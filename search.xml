<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ssr开启失败，1080端口被占用]]></title>
    <url>%2F2019%2F05%2F23%2Fssr-not-run-1080%2F</url>
    <content type="text"><![CDATA[检查端口占用cmd运行 netstat -ano，找到占用程序关闭 没发现端口占用windows10的Hyber虚拟机服务默认监听1080端口，开启了WSL或者Hyber服务则1080端口被占用 关闭Hyber服务，或者修改ssr的本地监听端口为其他端口（注意不能和正在运行的其他服务端口冲突）]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[vsftpd无法登录问题解决]]></title>
    <url>%2F2019%2F05%2F23%2Fvsftpd-user-login%2F</url>
    <content type="text"><![CDATA[在安装完vsftpd之后，添加用户ftp，然后无法使用filezila登录 检查21端口是否开启firewall-cmd --list-ports 检查ftp配置文件/etc/vsftpd/vsftpd.conf是否开启local_user 使用主动模式可以登录使用filezila的主动模式可以登录但是被动模式不能登录firewall-cmd --zone=public --add-port=4000-5000/tcp --permanent修改配置文件vsftpd.conf添加pasv_enable=YESpasv_max_port=5000pasv_min_port=4000 允许用户修改/etc/vsftpd/user_list 删除nobody 重启ftp服务systemctl restart vsftpd.servie]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>vsftpd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7的防火墙设置]]></title>
    <url>%2F2019%2F05%2F23%2Fcentos7-firewall%2F</url>
    <content type="text"><![CDATA[centos7开始使用firewalld服务作为防火墙 启动与停止123systemctl start firewalld.service #开启服务systemctl stop firewall.service #停止服务systemctl disable firewall.service #禁用服务，重启生效 查看开启的端口firewall-cmd --list-ports 查询http和ssh是否开启firewall-cmd --zone=public --query-service=sshfirewall-cmd --zone=public --query-service=http 规则策略permanent 永久生效runtime 运行时生效 添加端口firewall-cmd --zone=public --add-service=https --permanent 开放https规则端口 firewall-cmd --zone=public --add-port=80/tcp --permanent 开放80端口 firewall-cmd --zone=public --add-port=8000-8080/tcp --permantent 开放8000-8080端口 删除端口firewall-cmd --zone=public --remove-service=https --permanent firewall-cmd --zone=public --remove-port=80/tcp 查看端口是否开启firewall-cmd --query-port=80/tcp 使规则生效firewall-cmd --reloadsystemctl restart firewalld.service]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用cloudflare的cdn加速]]></title>
    <url>%2F2019%2F05%2F23%2Fcloudflare-cdn%2F</url>
    <content type="text"><![CDATA[申请域名在域名商处申请域名，绑定自己的服务器ip地址如果是对GitHub Pages进行加速，使用CNAME记录，添加自己的Github.io地址进入dns管理，等待后续操作 注册cloufalre进入cloudflare官网，点击添加域名，添加刚才注册的域名，选择计划free plan 设置dns 如果是GitHub Pages 添加A记录，指向Github page服务的ip地址（具体ip在github page帮助页面有） 添加CNAME记录@，指向你的GitHub.io地址 ​ 如果是服务器，添加A记录@，指向你的服务器ip地址。添加www记录指向你的ip地址​ 如果你有自己的ssl证书，在cytro界面选择full，没有且想使用ssl加密选择flexible，不使用选off 设置dns在cloudflare的dns界面，会提供给两个cloudflare的dns地址，进入自己的域名商dns设置界面，删除原来的dns服务器地址，添加cloudflare的地址，完成 遇到的问题 为什么全部配置完成却不能之际通过域名访问服务器？ 一般等待120s 为什么访问域名提示error521，host没有运行？ 检查服务器是否可以通过ip访问，可以则检查域名是否有ssl证书，没有就不要在cloudflare的ssl处开启full 使用cloudflare后访问更慢了？ 加速只针对国外及部分运营商的部分地区，cloudflare主要还提供ddos攻击防护]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[matlab使用超松弛迭代法求解电容]]></title>
    <url>%2F2019%2F05%2F22%2Fmatlab7%2F</url>
    <content type="text"><![CDATA[计算电磁学利用matlab超松弛迭代法求解微带线的电容 题目一块为正方形微带线 外围尺寸2cm，内部尺寸1cm，要求的电容误差10e-9，松弛系数1.9 设参数a,b,c,d分别为微带线的尺寸，n是迭代次数，tol为所需要的误差，rel为松弛迭代系数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667%第二次作业function cap = capacitor(a,b,c,d,n,tol,rel)h = 0.5*c/n;na = round(0.5*a/h);x= linspace(0,0.5*c,n+1);m = round(0.5*d/h);mb = round(0.5*b/h);y = linspace(0,0.5*d,m+1);%给定tol是电容的误差，rel是超松弛的参数f = zeros(n+1,m+1); %全零矩阵mask = ones(n+1,m+1)*rel; %全一矩阵for i = 1:na+1 %对矩阵简化后求解 for j = 1:mb+1 mask(i,j) = 0; f(i,j) = 1; endend%高斯迭代法oldcap = 0;for iter = 1:1000 f = seidel(f,mask,n,m); %计算迭代法得到松弛迭代后的矩阵 cap = gauss(n,m,h,f); %计算电容 if (abs(cap-oldcap)/cap&lt;tol) %计算小于误差的时候得到电容的大小 break else oldcap = cap; endendstr = sprintf('number of iterations = %4i', iter);disp(str) %输出最后的迭代次数disp(cap)endfunction f = seidel(f,mask,n,m) for i = 2:n for j = 2:m f(i,j) = f(i,j) + mask(i,j)*(0.25*(f(i-1,j) + f(i+1,j) + f(i,j-1) + f(i,j+1)) - f(i,j)); end end i = 1; for j = 2:m f(i,j) = f(i,j) + mask(i,j)*(0.25*(f(i+1,j) + f(i+1,j)+ f(i,j-1) + f(i,j+1)) - f(i,j)); end j = 1; for i = 2:n f(i,j) = f(i,j) + mask(i,j)*(0.25*(f(i-1,j) + f(i+1,j)+ f(i,j+1) + f(i,j+1)) - f(i,j)); endendfunction cap = gauss(n,m,h,f) q = 0; for i =1:n q = q + (f(i,m)+f(i+1,m))*0.5; end for j = 1:m q = q + (f(n,j)+f(n,j+1))*0.5; end cap = q*4; cap = cap*8.854187;end 假设迭代次数为20次，在命令行运行 capacitor(1,1,2,2,20,10e-9,1.9)]]></content>
      <categories>
        <category>matlab</category>
      </categories>
      <tags>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos上搭建aria2+YAAW]]></title>
    <url>%2F2019%2F05%2F21%2Fcentos-aria2%2F</url>
    <content type="text"><![CDATA[安装源123456#安装epel源yum -y install epel-release#安装aria2yum -y install aria2#查看aria2版本aria2c -v 配置123456#新建配置文件夹mkdir /home/aria2touch /home/aria2/aria2.conftouch /home/aria2/aria2.session#新建下载文件目录mkdir -p /home/aria2/download 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#编辑配置daemon=true #后台进程保护# 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置dir=/home/aria2/download# 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M#disk-cache=32M# 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc# 预分配所需时间: none &lt; falloc ? trunc &lt; prealloc# falloc和trunc则需要文件系统和内核支持# NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项file-allocation=trunc# 断点续传continue=true ## 下载连接相关 ## # 最大同时下载任务数, 运行时可修改, 默认:5max-concurrent-downloads=5# 同一服务器连接数, 添加时可指定, 默认:1max-connection-per-server=5# 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M# 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载min-split-size=10M# 单个任务最大线程数, 添加时可指定, 默认:5split=32# 整体下载速度限制, 运行时可修改, 默认:0#max-overall-download-limit=0# 单个任务下载速度限制, 默认:0#max-download-limit=0# 整体上传速度限制, 运行时可修改, 默认:0#max-overall-upload-limit=0# 单个任务上传速度限制, 默认:0#max-upload-limit=0# 禁用IPv6, 默认:falsedisable-ipv6=true ## 进度保存相关 ## # 从会话文件中读取下载任务input-file=/home/aria2/aria2.session# 在Aria2退出时保存`错误/未完成`的下载任务到会话文件save-session=/home/aria2/aria2.session# 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0#save-session-interval=60 ## RPC相关设置 ## # 启用RPC, 默认:falseenable-rpc=true# 允许所有来源, 默认:falserpc-allow-origin-all=true# 允许非外部访问, 默认:falserpc-listen-all=true# 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同#event-poll=select# RPC监听端口, 端口被占用时可以修改, 默认:6800rpc-listen-port=60005# 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项#rpc-secret=# 设置的RPC访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项#rpc-user=# 设置的RPC访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项#rpc-passwd= ## BT/PT下载相关 ## # 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true#follow-torrent=true# BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999listen-port=60002# 单个种子最大连接数, 默认:55#bt-max-peers=55# 打开DHT功能, PT需要禁用, 默认:trueenable-dht=false# 打开IPv6 DHT功能, PT需要禁用#enable-dht6=false# DHT网络监听端口, 默认:6881-6999#dht-listen-port=6881-6999# 本地节点查找, PT需要禁用, 默认:false#bt-enable-lpd=false# 种子交换, PT需要禁用, 默认:trueenable-peer-exchange=false# 每个种子限速, 对少种的PT很有用, 默认:50K#bt-request-peer-speed-limit=50K# 客户端伪装, PT需要peer-id-prefix=-TR2770-user-agent=Transmission/2.77# 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0seed-ratio=0# 强制保存会话, 即使任务已经完成, 默认:false# 较新的版本开启后会在任务完成后依然保留.aria2文件#force-save=false# BT校验相关, 默认:true#bt-hash-check-seed=true# 继续之前的BT任务时, 无需再次校验, 默认:falsebt-seed-unverified=true# 保存磁力链接元数据为种子文件(.torrent文件), 默认:falsebt-save-metadata=true 运行1234#运行aria2caria2c --conf-path=/home/aria2/aria2.conf#如果您需要常驻运行，请修改为nohup aria2c --conf-path=/home/aria2/aria2.conf &amp; 配置YAAW12wget https://github.com/binux/yaaw/archive/master.zipunzip master.zip cd /home/aria2/yaaw-master后会看见如下文件 123456789101112131415161718192021222324252627├── aria2.conf├── aria2.session├── download├── master.zip└── yaaw-master ├── css │ ├── bootstrap.min.css │ ├── bootstrap-responsive.min.css │ └── main.css ├── img │ ├── favicon.ico │ ├── glyphicons-halflings.png │ └── glyphicons-halflings-white.png ├── index.html ├── js │ ├── aria2.js │ ├── bootstrap.min.js │ ├── jquery-1.7.2.min.js │ ├── jquery.base64.min.js │ ├── jquery.jsonrpc.js │ ├── jquery.Storage.js │ ├── mustache.js │ ├── peerid.js │ └── yaaw.js ├── offline.appcache ├── README.md └── TODO.md index.html就是我们需要的网页端 配置nginx服务器12cd /etc/nginx/conf.dnano aria2.conf 123456789server &#123; # 监听端口 listen 60003; # 项目的初始化页面 location / &#123; root /home/aria2/yaaw-master/; index index.html; &#125;&#125; 测试打开服务器地址 你的ip:60003 会看到yaaw的服务界面（如果出现internel error就是aria2服务还没有开启）点击setting 配置前面设置的rpc端口60005 设置登录密码12yum install httpd-toolshtpasswd -bc /home/aria2/yaaw-master/passwd user 123456 123456789101112nano /etc/nginx/conf.d/aria2.confserver &#123; # 监听端口 listen 60003; auth_basic "input password"; auth_basic_user_file /home/aria2/yaaw-master/passwd; location / &#123; root /home/aria2/yaaw-master/; index index.html; &#125;&#125; 重启服务123service nginx start#或者systemctl restart nginx.service]]></content>
      <categories>
        <category>linux</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vsftpd服务器添加用户]]></title>
    <url>%2F2019%2F05%2F21%2Flinux-vsftpd-user%2F</url>
    <content type="text"><![CDATA[Centos7禁用匿名用户1234567//安全起见禁用匿名用户上传权限和写权限nano /etc/vsftpd/vsftpd.confanonymous_enable=YES //开启匿名//禁用匿名上传，写权限，但是可以下载#anon_upload_enable=YES#anon_mkdir_write_enable=YES#anon_other_write_enable=YES 添加用户12adduser namepasswd name 禁止用户ssh登录123456cd /etc/sshnano sshd_config//最后加上DenyUsers name//重启ssh服务systemctl restart sshd 用户配置123456在/etc/vsftpd/vsftpd.conf下修改chroot_local_user=YES#chroot_list_enable=YESallow_writeable_chroot=YESchroot_list_file=/etc/vsftpd/chroot_listuser_config_dir=/etc/vsftpd/userconfig user_config_dir是用户配置信息目录cd /etc/vsftpd mkdir userconfig进入userconfig下创建配置文件nano name 1local_root=/var/ftp/name systemctl restart vsftpd.service 注意chroot_local_user=YES一旦添加，用户根目录就会被锁定为/home/name不能改变如果想要新建的用户根目录为pub公共目录下，必须注释上述项 更改根目录所属 cd /var/ftp chown -R name:name name 测试使用ssh连接用户，出现550禁止登录使用ftp登录pub目录，可以上传下载使用匿名用户登录pub，不能上传，可以下载]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>vsftpd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux上为hexo添加git远程部署]]></title>
    <url>%2F2019%2F05%2F21%2Fhexo-git-push%2F</url>
    <content type="text"><![CDATA[安装git1yum install -y git 创建git用户12adduser gitpasswd git #记住自己的密码 创建公钥123456git config --global user.name "name"git config --global user.email "xxx@gmail.com"//添加用户名 邮箱ssh-keygen -t rsa -C "your mail"//生成ssh公私钥cat ~/.ssh/id_rsa.pub //查看公钥 上传公钥1234mkdir /home/git/.sshcd /home/git/.sshnano authorized_keys//把本地的公钥复制进来 初始化git仓库1234cd /home/gitmkdir hexo.gitcd hexo.gitgit init --bare //初始化 创建钩子1234567cd /home/git/hexo.git/hooksnano post-receive//加入内容#!/bin/shgit --work-tree=/home/git --git-dir=/home/git/hexo.git checkout -f//其中目录为你的服务器部署hexo的web目录chmod +x post-receive 注意服务器上的公钥所有者应为git用户权限 chmod 600 ~/.ssh/authorized_keys chmod 700 ~/.ssh]]></content>
      <categories>
        <category>hexo</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo的NEXT主题配置]]></title>
    <url>%2F2019%2F05%2F21%2Fhexo-next%2F</url>
    <content type="text"><![CDATA[hexo安装next主题 官网 主题配置好朋友：百度一下 部分详细配置语言默认非中文，在博客目录的_config中language后加上zh-CN 侧边栏项目1hexo new page xxx 使用该命令创建一个新的分类目录，目录位置/source/xxx修改next主题目录下的_config.yml，添加刚生成的xxx目录，||后面的名称是图标文件的名称，详见next使用的图标源 12345678menu: home: / || home tags: /tags/ || tags #categories: /categories/ || archive archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 社交图标123social: GitHub: https://github.com/xxx || github Gitee: https://gitee.com/xxx || envira 阅读人数统计123456789busuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye //开启busuanzi不需要注册其他的统计网站账户，比较方便 主题背景设置123456//主题目录source/css/custom下// Custom styles.body&#123; background:url(/images/nap.jpg); background-attachment:fixed; background-size:cover;&#125; 添加头像12345avatar: # In theme directory (source/images): /images/avatar.gif # In site directory (source/uploads): /uploads/avatar.gif # You can also use other linking images. url: /images/Landers.jpg]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux搭建的vsftpd服务器解决匿名上传和下载]]></title>
    <url>%2F2019%2F05%2F19%2Flinux-vsftpd-ans%2F</url>
    <content type="text"><![CDATA[开启匿名上传下载12345anon_upload_enable=YES# Uncomment this if you want the anonymous FTP user to be able to create# new directories.anon_mkdir_write_enable=YESanon_other_write_enable=YES #这句话不加匿名用户不能重命名和修改子目录 解决匿名用户上传后不能直接下载1234chown_uploads=NO#匿名用户上传文件的权限问题，修改后文件权限所属从root改为ftp#根本解决问题，修改umask默认umask为022，最终权限为600，修改umask为000，最终权限为666 ##]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>vsftpd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[matlab仿真矩量法计算板间电容]]></title>
    <url>%2F2019%2F05%2F18%2Fmatlab6%2F</url>
    <content type="text"><![CDATA[题目 计算12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061NN = [3 7 11 18 39 59];disp(' ')disp('迭代次数 输出')for N = NN CL=3.0e8; %光速 ER=1.0; EO=8.8541878176E-12;%真空介电常数 H=2.0; W=5.0; NT=2*N; DELTA=W/(N);%单位长度 for K=1:N X(K) = DELTA*(K - .5); Y(K) = -H/2.0;%分上下表面 X(K+N) = X(K); Y(K+N) = H/2.0; end FACTOR = DELTA/(2.0*pi*EO);%前面的系数 for I=1:NT for J=1:NT if(I==J) A(I,J) = -(log(DELTA) - 1.5)*FACTOR; else R = sqrt((X(I) - X(J))^2 + (Y(I)-Y(J))^2); A(I,J) = -log(R)*FACTOR; end end end for K=1:N B(K)=1.0;%上表面的电势 B(K+N) = -1.0;%下表面的 end NIV = NT; NMAX=100; A = inv(A); for I=1:NT RO(I)=0.0; for M=1:NT RO(I)=RO(I)+A(I,M)*B(M); %p的矩阵 end end SUM=0.0; for I=1:N SUM = SUM+RO(I);%求上表面的电荷密度 end Q=SUM*DELTA;%求出单位密度的电荷量 VD=2.0; C=abs(Q)/VD;%求出单位长度的电容大小 ZO = sqrt(ER)/(CL*C);%根据电容求出微带线的特性阻抗 disp(num2str([N ZO ])) end]]></content>
      <categories>
        <category>matlab</category>
      </categories>
      <tags>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux修改ip地址，使用ssh连接]]></title>
    <url>%2F2019%2F05%2F17%2Flinux-ip-set%2F</url>
    <content type="text"><![CDATA[ssh连接sd卡启动的linux系统12345678sudo vi /etc/network/interfaces#修改为静态ipiface eth0 staticaddress 192.168.0.1netmask 255.255.255.0#修改后sudo /etc/init.d/networking 激活网卡12sudo ifconfig eth0 up#sudo ifconfig eth0 192.168.0.1 配置本地ip打开windows的网络适配器，进入有线网属性选择ipv4地址，进入编辑使用静态ip地址，输入192.168.0.2 连接ssh使用ssh协议的连接客户端，例如putty或者xshell使用网线连接电脑和zynq板，配置ip地址192.168.0.1连接成功会提示登录输入用户名和密码]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[matlab的QPSK信号调制与解调]]></title>
    <url>%2F2019%2F05%2F17%2Fmatlab5%2F</url>
    <content type="text"><![CDATA[main文件部分源代码地址 Gitee 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364clearclose all%%%%% 参数定义% 系统参数定义sys_param = SystemParaDef();% 输入的数据流input_data = [0 1 0 0 1 0 1 1 0 0 1 1 1 0 0 1 0 1 0 1];%%%% 仿真计算% ----------信号发射端部分% 信道编码% *******% 信号调制modulated_signal = QPSKMudulation(input_data,sys_param);% 带通滤波% *******% 封装成帧结构% *******% 画发射射频信号的频域图figure()PlotFFTSignal(modulated_signal,sys_param.sim_freq);title('发送信号频谱图');% ----------信道部分% 添加信道噪声% *******modulated_signal = modulated_signal + 0.2*rand(1,192000);% ----------信号接收端部分% 采用正交解调方式% 获得Q路信号的基带信号baseband_signal=QPhaseDemodulation(modulated_signal,sys_param,0);baseband_signa2=QPhaseDemodulation(modulated_signal,sys_param,pi/2);%result_signal = [baseband_signal,baseband_signa2];% 对基带信号采样sampled_signal = ReceiverSampling(baseband_signal,sys_param);sampled_signal2 = ReceiverSampling(baseband_signa2,sys_param);figure()plot(baseband_signal,baseband_signa2,'go');title('星座图');%并串转换zeros(1,[]);for k=0:8 result(1+k*200:100+k*200) = sampled_signal(1+100*k:100+100*k); result(101+k*200:200+k*200) = sampled_signal2(1+100*k:100+100*k);endresult(1801:1899) = sampled_signal(901:999);result(1900:1998) = sampled_signal2(901:999); % 解码decode_data1 = BPSKDecoder(sampled_signal,sys_param);decode_data2 = BPSKDecoder(sampled_signal2,sys_param);data_result = reshape([decode_data1;decode_data2],1,[]);% 画采样信号的时域图figure()PlotTDSignal(result,sys_param.sample_freq,sys_param.bit_rate);title('接收信号的时域图');% ----------统计性能error_ratio = CalBitErrorRate(input_data,data_result) 调制部分123456789101112131415161718192021222324252627282930function modulated_signal = QPSKMudulation(input,sys_param)%变为qpsk调制 使用四个相位调制% 获取数据长度len = length(input);% 一个比特的长度symbol_len = sys_param.sim_freq/sys_param.bit_rate;%reshape信号为并行信号bingxing = reshape(input,2,[]);% 初始化modulated_signal = [];% 离散时间点t_i = 1:symbol_len;% 获得符号表达for k = 1:len/2 if bingxing(1,k) == 0 &amp;&amp; bingxing(2,k) == 0 bit_representation = -cos(2*pi*sys_param.center_freq/sys_param.sim_freq*t_i)+sin(2*pi*sys_param.center_freq/sys_param.sim_freq*t_i); end if bingxing(1,k) == 0 &amp;&amp; bingxing(2,k) == 1 bit_representation = -cos(2*pi*sys_param.center_freq/sys_param.sim_freq*t_i)-sin(2*pi*sys_param.center_freq/sys_param.sim_freq*t_i); end if bingxing(1,k) == 1 &amp;&amp; bingxing(2,k) == 0 bit_representation = cos(2*pi*sys_param.center_freq/sys_param.sim_freq*t_i)+sin(2*pi*sys_param.center_freq/sys_param.sim_freq*t_i); end if bingxing(1,k) == 1 &amp;&amp; bingxing(2,k) == 1 bit_representation = cos(2*pi*sys_param.center_freq/sys_param.sim_freq*t_i)-sin(2*pi*sys_param.center_freq/sys_param.sim_freq*t_i); end modulated_signal = [modulated_signal bit_representation];end 解调部分123456789101112131415161718192021222324function output_signal = QPhaseDemodulation(input_signal,sys_param,p)% 获取输入信号的长度signal_len = length(input_signal);t_i = 1:signal_len;% 产生Q路相关解调信号cos(wt)Q_t = cos(2*pi*sys_param.center_freq/sys_param.sim_freq*t_i+p);s_t = input_signal.*Q_t;output_signal = LowPassFilter(s_t,1/4);%%%%%%%%function sampled_signal = ReceiverSampling(orignal_signal,sys_param)% 采样的比例(每间隔sampling_ratio个点采样一个)sampling_ratio = sys_param.sim_freq/sys_param.sample_freq;% 数据的总点数data_len = length(orignal_signal);%采样后的点数sampled_len = floor(data_len/sampling_ratio);% 间隔采样sample_location = 1 + 0:sampling_ratio:sampling_ratio*(sampled_len-1);% 采样sampled_signal = orignal_signal(sample_location); 实验结果]]></content>
      <categories>
        <category>matlab</category>
      </categories>
      <tags>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows的动态磁盘转换]]></title>
    <url>%2F2019%2F05%2F16%2Fwindows-dynamic2basic%2F</url>
    <content type="text"><![CDATA[什么是动态磁盘动态磁盘区别于基本磁盘，windows的基本磁盘是绝大多数人使用的格式，基本磁盘最多包含4个分区，其中3个主分区，一个扩展分区。动态磁盘的优点是可以创建多余4个分区，而且分区拥有许多的其他特性，比如跨区卷，raid卷等缺点是一旦由基本磁盘转为动态磁盘，过程就不可逆，如果原磁盘上包含启动分区，那么分区就会失效，系统无法从动态磁盘启动。 怎么转换一般磁盘分区过多，想要重新合并的时候，如果想要合并的两个分区不是相邻的，那么基本磁盘就不能完成合并分区的操作，一般会提示你把磁盘转化为动态磁盘来解决。从基本磁盘转换为动态磁盘数据不会丢失，只是改变了分区表结构。但是动态磁盘在后续的使用中可能不是使用很方便。 还原如果基本磁盘转换为了动态磁盘，那么怎么转换回去而且还要不失去原有数据使用分区软件，diskgenius专业版，在选择磁盘后，选项中硬盘，动态磁盘转换为基本磁盘，执行会自动构建分区表，点击保存会提醒该磁盘为动态磁盘改变分区表可能造成数据损失，建议先做备份，我直接选择确定完成，转换成功，数据完好无损]]></content>
  </entry>
  <entry>
    <title><![CDATA[matlab信号处理-BPSK调制]]></title>
    <url>%2F2019%2F05%2F14%2Fmatlab4%2F</url>
    <content type="text"><![CDATA[12345678clearclose all%%%%% 参数定义% 系统参数定义sys_param = SystemParaDef();% 输入的数据流input_data = [0 1 0 0 1 0 1 1 0 0 1 1 1 0 0 1 0 1 0 1]; 12345678910111213141516171819202122232425262728293031323334353637%%%% 仿真计算% ----------信号发射端部分% 信道编码% *******% 信号调制modulated_signal = BPSKMudulation(input_data,sys_param);% 带通滤波% *******% 封装成帧结构% *******% 画发射射频信号的频域图figure()PlotFFTSignal(modulated_signal,sys_param.sim_freq);title('发送信号频谱图');% ----------信道部分% 添加信道噪声% *******% ----------信号接收端部分% 采用正交解调方式% 获得Q路信号的基带信号baseband_signal = QPhaseDemodulation(modulated_signal,sys_param);% 对基带信号采样sampled_signal = ReceiverSampling(baseband_signal,sys_param);% 画采样信号的时域图figure()PlotTDSignal(sampled_signal,sys_param.sample_freq,sys_param.bit_rate);title('接收信号的时域图');% 解码decode_data = BPSKDecoder(sampled_signal,sys_param);% ----------统计性能error_ratio = CalBitErrorRate(input_data,decode_data)]]></content>
      <categories>
        <category>matlab</category>
      </categories>
      <tags>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[matlab的信号处理1]]></title>
    <url>%2F2019%2F05%2F14%2Fmatlab3%2F</url>
    <content type="text"><![CDATA[matlab2016a建立全零矩阵基础12345678910111213&gt;&gt; a=zeros(2,5)a = 0 0 0 0 0 0 0 0 0 0&gt;&gt; a(:)=-4:5a = -4 -2 0 2 4 -3 -1 1 3 5 建立变量123456%绘制y=1/(1+x)&gt;&gt; syms x,y;&gt;&gt; y=1/(x+1);&gt;&gt; ezplot(y)%可以传入参数，表示x的取值范围ezplot(y,[1,100]) 创建一个输入信号123&gt;&gt; x=sin(2*pi*t)+sin(4*pi*t);&gt;&gt;t=[1:199]./100;&gt;&gt; plot(t,x) 绘制包络线123456789clear;t=0:0.01:2*pi;y=sin(t).*sin(9*t);[up,down] = envelope(y); %包络线自定义函数plot(t,y,'b');hold on;plot(t,up,'r-.');plot(t,down,'r-.');xlabel('t'),ylabel('y')hold off 学会for循环1234567%找到100，200间的整除21的数字for n=[100:200] m=rem(n,21); if(m==0) fprintf('the value of n is %d\n',n); endend]]></content>
      <categories>
        <category>matlab</category>
      </categories>
      <tags>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows10省电配置]]></title>
    <url>%2F2019%2F05%2F14%2Fwindows-settings-for-power%2F</url>
    <content type="text"><![CDATA[Windows1809关闭onedrivewin+r输入gpedit.msc,找到计算机配置，windows组件，onedrive，禁用onedrive进行文件存储 关闭windows安全中心通知gpedit.msc，计算机配置，windows组件，windows安全中心，禁用所有通知 关闭sysmain（旧版为superfetch服务）计算机右键管理，服务，找到Sysmain，属性设置禁用 关闭后台进入设置，隐私，后台应用，关闭需要的 关闭ipv6服务进入服务，找到ip helper，禁用 关闭同步主机服务（作用是存储到onedrive）win+r运行regedit，以下路径计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services 找到OneSyncSvc，双击打开，找到start项，修改值为4（默认值为2）找到OneSyncSvc_***，同样修改为4找到UserDataSvc，修改start为4，默认为3找到UserDataSvc_***,重复步骤重启 关闭shell hardware detection服务，禁用 关闭TCP/IP NetBIOS Helper服务，禁用，作用网络文件共享 关闭windows defendergpedit打开组策略，windows组件，windows defender禁用 关闭Windows Search服务关闭Xbox服务关闭家长控制服务关闭Remote Desktop Services ***服务关闭Connected User Experiences and Telemetry服务关闭诊断服务Diagnostic Policy Service关闭兼容助手Program Compatibility Assistant Service组策略关闭rss服务组策略禁止windows错误报告和日志记录组策略禁用windows游戏录制组策略禁用加入家庭组关闭windows software 保护计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\sppsvc]]></content>
  </entry>
  <entry>
    <title><![CDATA[windows10的重装]]></title>
    <url>%2F2019%2F05%2F12%2Fwindows10-install%2F</url>
    <content type="text"><![CDATA[在更新Ubuntu的时候千万不要断网12执行sudo apt update 如果在执行更新源的过程中，断网会出现许多问题导致包没有下载完整，如果这个时候使用软件更新器安装的有系统内核更新的话，就会导致内核的更新失败 出现包更新失败的时候使用-f指令修复千万不要重启如果在修复的过程内核文件的更新出现了问题那么千万不要更新，否则重启后就会进入损坏状态，无法通过内核启动文件系统 windows10的重装在msdn你告诉我网站下载试用的windows纯净系统镜像 使用rufus制作镜像启动u盘，UEFI启动选择分区格式为GPT，启动方式为uefi 重启进入bios，关闭安全启动项，选择u盘启动开始安装 注意事项windows使用u盘安装的时候不能使用修复，也就是说不能在原有的win10系统上安装，选择第二项的自己手动分区安装 保留旧的分区不变，选择要安装的盘，如果文件保留在D盘，那么系统选择安装在C盘 你会发现C盘有三个分区结构可能更多，一个esp（系统引导分区），一个mbr恢复分区，一个文件系统分区 格式化掉esp即含有efi引导的分区，不用管mbr分区，选择空间最大的文件系统分区安装 提示缺少efi引导分区，windows10会自动创建，如果不格式化esp分区就会出现多个efi引导项 出现的最大问题每一次重启后，系统蓝屏，提示重大错误，找不到system32下的winload.efi引导项打开bios发现存在引导项，使用diskgenius查看分区找到错误，D盘下多出来一个系统启动分区，原本的系统启动分区没有安装在C盘，原因可能是win10默认的有双盘的时候分离系统分区。 解决办法： 首先关闭bios的安全启动，使用bios的引导项进入系统，使用硬盘天才在原来的C盘下建立一个fat32分区，如果是重装，这个分区是一直存在的，格式化其中的文件。 使用硬盘天才打开D盘的esp启动分区，右键该分区，克隆分区，选择对象为刚才创建的C盘的fat32分区，等待完成后重启 进入bios，选择启动项，禁用原本在D盘的启动项，选择C盘的启动项，将其移动到boot option#1的位置即可]]></content>
  </entry>
  <entry>
    <title><![CDATA[嵌入式设计SD卡启动linux系统]]></title>
    <url>%2F2019%2F05%2F11%2Flinux-ubuntu-on-sd%2F</url>
    <content type="text"><![CDATA[Xilinx-ARM-Linux-ZYNQ项目的源代码已经上传至托管平台 gitee github 介绍Xilinx公司的base system 硬件平台生成的，基于arm架构重新编译的linux板载操作系统 软件架构软件架构说明 BOOT启动分区：BOOT.bin,uIamge,devicetree.dtb FS文件系统：Ubuntu18.04 LTS minimal rootfs BOOT.bin文件用于启动zybo板时加载引导程序，由板载引导加载UBOOT启动linux uImage文件为linux系统内核文件，用于启动系统挂载磁盘 devicetree.dtb文件为设备树二进制文件，用于加载硬件设备 ​ 1234567#编译设备树文件#利用base-system生成的dts文件，在linux下生成二进制文件#在设备树中修改的启动参数如下1:修改内核参数为CONFIG_CMDLINE="console=ttyS0,115200 mem=108M rdinit=/linuxrc root=/dev/mtdblock2"2：修改bootargs参数 bootargs="console=ttyPS0,115200 root=/dev/mmcblk0p2 rw earlyprintk rootfstyle=ext4 rootwait devtmpfs.mount=1";apt install device-tree-compilerdtc -I dts -O dtb -o /home/devicetree.dtb /home/system-top.dts 编译xilinix-linux内核文件： 在xilinx官网获取内核源代码 安装完交叉编译环境后，使用交叉编译命令，在内核目录下，生成linux内核的映像文件 交叉编译环境安装参考本文 使用如下命令编译内核文件 123456ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- #首先配置交叉编译环境make xilinx_zynq_defconfigmake#生成uimagemake UIMAGE_LOADADDR=0x8000 uImage#无法运行上面的命令就安装编译工具 apt install u-boot-tools 文件系统 因为官网下载的内核是4.*版本，所以linaro上的低版本1209已经不能使用新内核启动，所以下载linaro官网最新的文件系统版本 官网 在linux下使用同步命令把文件系统放入sd卡的FS区 安装教程 使用分区工具对sd卡进行分区，分成BOOT区（fat32格式），FS区（EXT4格式） 将BOOT.bin,uImage,devicetree.dtb文件放入系统的BOOT分区 使用linux系统的同步命令rysnc 把文件系统所有文件同步到FS分区内 sudo rsync -av . /media/landers/fs 注意同步命令后面的为FS分区的挂载位置，使用lsblk查看或者右键sd卡属性查看 使用说明 把sd卡插入zybo板卡槽，将跳线帽J3放置到SD位，使用SD卡启动 连接供电，使用putty或者其他串口调试工具连接zybo板，默认波特率115200 按下zybo板的重启按钮，开始载入系统，在putty上观察输出 成果 注意事项 若要自己编译uboot.elf文件，需要修改zynq.h文件，去掉有关ramdisk启动的语句，因为需要sd卡启动 使用xilinx官方提供的linux内核编译 下载最新的xilinx官方提供的base-system系统使用vivado进行板材更新，使用sdk工具生成启动镜像文件，vivado版本低于2017.4可能出现工程不能更新的问题 跳线帽一定要放在sd启动位，否则不能从sd卡启动 使用linaro官方提供的ubuntu arm编译系统可能会出现内核不能挂载文件系统的问题，因为文件系统过于old 我的博客]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下的hexo安装]]></title>
    <url>%2F2019%2F05%2F10%2Flinux-hexo%2F</url>
    <content type="text"><![CDATA[ubuntu18.04安装nvm1wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh 安装node js123nvm install 7#node.js更新的很快，hexo3.8需求node&gt;6.9nvm ls-remote #可以查看所有的库 配置环境变量1234#这句话写入到bashrc export NVM_DIR="$HOME/.nvm"[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; . "$NVM_DIR/nvm.sh"#然后source一下 安装hexo12345$npm install hexo-cli -g$npm install hexo-server -g$npm install hexo-deployer-git -g$npm install hexo-util -g#也可以直接 install hexo -g 新建一个hexo文件夹初始化123#进入文件夹下hexo initnpm install #安装依赖的库 卸载旧版node.js1nvm uninstall 4 #卸载4.*版本的node.js]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下的mysql安装配置]]></title>
    <url>%2F2019%2F05%2F10%2Flinux-mysql-i%2F</url>
    <content type="text"><![CDATA[ubuntu安装mysql5.71sudo apt install mysql-server 配置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152sudo mysql_secure_installationSecuring the MySQL server deployment.Connecting to MySQL using a blank password.VALIDATE PASSWORD PLUGIN can be used to test passwordsand improve security. It checks the strength of passwordand allows the users to set only those passwords which aresecure enough. Would you like to setup VALIDATE PASSWORD plugin?Press y|Y for Yes, any other key for No: nPlease set the password for root here.New password: Re-enter new password: By default, a MySQL installation has an anonymous user,allowing anyone to log into MySQL without having to havea user account created for them. This is intended only fortesting, and to make the installation go a bit smoother.You should remove them before moving into a productionenvironment.Remove anonymous users? (Press y|Y for Yes, any other key for No) : n ... skipping.Normally, root should only be allowed to connect from'localhost'. This ensures that someone cannot guess atthe root password from the network.Disallow root login remotely? (Press y|Y for Yes, any other key for No) : ySuccess.By default, MySQL comes with a database named 'test' thatanyone can access. This is also intended only for testing,and should be removed before moving into a productionenvironment.Remove test database and access to it? (Press y|Y for Yes, any other key for No) : n ... skipping.Reloading the privilege tables will ensure that all changesmade so far will take effect immediately.Reload privilege tables now? (Press y|Y for Yes, any other key for No) : ySuccess.All done! 检查mysql服务1234567891011systemctl status mysql.service● mysql.service - MySQL Community Server Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: en Active: active (running) since Thu 2019-05-09 11:14:22 CST; 10min ago Main PID: 12781 (mysqld) Tasks: 29 (limit: 4915) CGroup: /system.slice/mysql.service └─12781 /usr/sbin/mysqld --daemonize --pid-file=/run/mysqld/mysqld.pi5月 09 11:14:22 landers systemd[1]: Starting MySQL Community Server...5月 09 11:14:22 landers systemd[1]: Started MySQL Community Server. 修改配置文件12345cd /etc/mysql/mysql.conf.dsudo nano mysqld.cnf添加一句话，跳过权限认证，否则每次使用mysql的时候都必须使用sudo权限skip-grant-tables 安装gui管理界面workbench官网下载deb包使用dpkg命令安装，因为缺少依赖所以必须使用-f命令 123sudo dpkg -i xxx.debsudo apt -f install再次执行dpkg安装即可 Centos安装mysqlcentos的yum库中更新mysql为Maridb了 123yum -y install mariadb mariadb-serversystemctl start mariadb #开启服务systemctl enable mariadb #开机启动 配置1mysql_secure_installation 步骤与mysql相同，如需远程登录，就设置yes 测试123mysql -uroot -p password进入后使用show databases; 查看数据库 修改配置文件不修改文本编码的话，中文就会报错 1234567#默认为my.cnf，但是修改 /etc/my.cnf.d/mysql-clients.cnf【mysql】添加 default-character-set=utf8【mysqld】添加 character-set-server=utf8 collation-server=utf8_unicode_ci 重启服务systemctl restart mariadb 和windows一样mysql的默认端口为3306]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux的显卡驱动安装]]></title>
    <url>%2F2019%2F05%2F10%2Fubuntu-nvidia%2F</url>
    <content type="text"><![CDATA[环境ubuntu18.04安装nvidia显卡驱动123456#首先使用ubuntu的驱动管理器查看当前系统推荐的显卡驱动sudo ubuntu device #好像是这句话，参考百度一下sudo ubuntu autoinstall #使用这句话自动安装系统推荐的驱动有的时候上面的这句话会因为缺少依赖而无法安装，比如缺少nvidia-390-dkms依赖，我们先安装这个包，再运行一次自动安装#或者使用以下命令直接安装390驱动sudo apt-get install nvidia-drivers-390 #下载390的驱动 正常情况下，安装完成后，在软件和更新中查看正在使用的驱动会看见正在使用专有驱动，然后重启电脑，在系统设置信息里查看，正在使用的图形显示卡，看是不是nvidia显卡。如果不是就打开命令行终端，执行sudo prime-select nvidia，然后重启系统即可 出现的问题123456789101112131415#进入系统会出现循环登录的情况，一直让输入密码但是不能进入桌面#出现的原因分析：显卡的OpenGL驱动部分和ubuntu的系统opengl文件冲突，导致启动失败。驱动版本不正确。解决方法一官网下载驱动run文件，在终端中执行sudo ./***.run --no-opengl-files --no-x-check解决方法二在安装nvidia之前禁用自带的显卡驱动nouveau，参考百度，然而我并没有解决问题解决方法三在安装nvidia驱动时必须关闭图形化桌面，避免冲突，ubuntu18.04使用gdm而不是lightdm作为图形化服务sudo systemctl stop gdm关闭后使用终端安装驱动即可，如果之前安装了请先卸载先前的nvidia驱动，然而这个方法对我来说还是没用解决方法四ctrl+alt+f1或者f2进入tty界面，进入主目录下cd ~,然后列出全部文件ls -a查看.xession.errors文件，它记录了xserver的启动错误，查看错误解决问题我的错误是搜狗输入法的图形化界面无法启动，我在卸载了搜狗输入法后依旧没有用 尝试因为安装显卡驱动的时候，图形界面xserver仍然在运行，所以显卡驱动的opengl文件覆盖了正在运行的xserver导致在重启的时候登录界面进入循环，尝试卸载掉全部的nvidia驱动 1sudo apt remove -purge nvidia* 然后开机进入后按住ctrl+f1或者f2进入tty无图形化界面 再次执行安装NVIDIA驱动的指令 最后还是失败了。。。 于是放弃使用nvidia显卡作为图形卡使用n卡驱动，禁用n卡达到省电目的1234567891011121314151617181920212223242526272829303132#使用自带的nouveau驱动是不能禁用nvidia显卡的必须使用nvidia的闭源驱动sudo prime-select intel #切换为intel集成显卡#按常理切换后nvidia显卡就会被禁用，但是由于nvidia的软件包使用的是nouveau来控制显卡的电源管理，这在ubuntu18.04上是不行的，所以显卡还是会耗电#使用bbswitch代替nouveau方案sudo apt-get install bbswitch-dkms#修改nvidia的电源管理cd /lib/systemd/systemsudo nano nvidia-prime-boot.service#修改ExecStart后的/sys/kernel/debug/vgaswitcheroo/switch/proc/acpi/bbswitchcd /usr/libsudo nano prime-select#你会发现他是python3写的#注释掉_disable_nvidia方法下的三个调用的函数#注释掉_enable_nvidia方法下的三个调用的函数#在系统自启动配置下添加bbswitch.confcd /etc/modprobe.dsudo nano bbswitch.conf#添加如下内容#echo 'options bbswitch load_state=0 unload_state=1'&gt; /etc/modprobe.d/bbswitch.conf#上面的那个#也要加#然后添加开机启动程序modprobe bbswitch#更新内核sudo update-initramfs -u#查看是否禁用成功lspci#如果nvidia显卡后面的状态是 ff就是已关闭，是a1，a2就是没有禁用成功]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[grub引导界面的字体更换]]></title>
    <url>%2F2019%2F05%2F10%2Fgrub-font%2F</url>
    <content type="text"><![CDATA[字体生成使用如下的命令可以创建用于开机启动界面的字体文件 1sudo grub-mkfont -o name.pf2 -s=25 /usr/share/fonts/truetype/ubuntu/Ubuntu-R.ttf -o 指定输出的字体文件名称-s 指定输出的字体的大小最后为字体文件的路径 在fonts目录下选择自己喜欢的字体，修改后，把生成的pf2二进制字体文件放入主题目录下，在theme.txt中修改即可，命名与theme主题目录下的pf2文件名称相同即可 grub界面顺序文字调整默认第一项为ubuntu，ubuntu高级选项，windows boot manager 需要调整顺序，只需要修改grub配置文件 12cd /boot/grubsudo nano grub.cfg 查找启动项名称的语句，在“ ”间修改自己想要的名称即可，不需要使用update-grub更新引导文件]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[matlab基础2]]></title>
    <url>%2F2019%2F05%2F08%2Fmatlab2%2F</url>
    <content type="text"><![CDATA[计算1到100间的质数12345678910for i = 1000 : 1020 %外层循环，i的初值为2，终值为100 for j = 1:1020 %内层循环，j的初值为2，终值为100 if(~mod(i,j)) % i除以j取余后再取反 break; % 跳出循环 end end if(j &gt; (i/j)) %检查是否有其他除数 fprintf('%d is prime \n',i); %输出素数 endend]]></content>
      <categories>
        <category>matlab</category>
      </categories>
      <tags>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[matlab矩阵基础1]]></title>
    <url>%2F2019%2F05%2F07%2Fmatlab1%2F</url>
    <content type="text"><![CDATA[矩阵的逆12345678&gt;&gt; A=[1,2,3;2,3,4;4,5,3];&gt;&gt; B=inv(A)B = -3.6667 3.0000 -0.3333 3.3333 -3.0000 0.6667 -0.6667 1.0000 -0.3333 抽象求逆12345678&gt;&gt; syms a b c d&gt;&gt; A=[a b; c d];&gt;&gt; B=A^(-1) B = [ d/(a*d - b*c), -b/(a*d - b*c)][ -c/(a*d - b*c), a/(a*d - b*c)] 矩阵转置123456789101112131415&gt;&gt; A=[2 0 -1;1 3 2]A = 2 0 -1 1 3 2&gt;&gt; B = [1 7 -1;4 2 3;2 0 1];&gt;&gt; (A*B)'% '表示转置符号ans = 0 17 14 13 -3 10 行列式计算123456&gt;&gt; C=[1,2;3,4];&gt;&gt; det(C)ans = -2 向量点积1234567891011121314&gt;&gt; X=[ 1 2 3];&gt;&gt; Y=[-3 -4 -5];&gt;&gt; dot(X,Y)ans = -26 %两个向量的维相同时，可以使用sum函数&gt;&gt; sum(X.*Y)ans = -26 混合积1234567891011121314&gt;&gt; X=[1 2 3];&gt;&gt; Y=[3 4 5];&gt;&gt; Z=[5 6 7];&gt;&gt; dot(X,cross(Y,Z))ans = 0%根据混合积的性质，(axb)c=a(bxc) &gt;&gt; dot(cross(X,Y),Z)ans = 0]]></content>
      <categories>
        <category>matlab</category>
      </categories>
      <tags>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[arm-linux-gcc交叉编译器的安装]]></title>
    <url>%2F2019%2F04%2F26%2Farm-linux-gcc%2F</url>
    <content type="text"><![CDATA[环境ubuntu16.04下载gcc编译器官网地址 放到ubuntu的下载目录下12#右键 提取到此处得到如下文件夹 gcc-linaro-6.1.1-2016.08-x86_64_arm-linux-gnueabihf 新建一个文件夹放置gcc1234sudo mkdir /usr/local/arm-gcc#在下载目录下打开终端sudo mv gcc-linaro-6.1.1-2016.08-x86_64_arm-linux-gnueabihf /usr/local/arm-gcc#把gcc文件夹移动过去 添加环境变量123456789101112131415sudo nano /etc/bash.bashrc#写入# Add ARM toolschain pathif [ -d /usr/local/arm-gcc/gcc-linaro-6.1.1-2016.08-x86_64_arm-linux-gnueabihf ] ; then PATH=/usr/local/arm-gcc/gcc-linaro-6.1.1-2016.08-x86_64_arm-linux-gnueabihf/bin:"$&#123;PATH&#125;"fiexport PATH=/usr/local/arm-gcc/gcc-linaro-6.1.1-2016.08-x86_64_arm-linux-gnueabihfexport CROSS_COMPILE=arm-linux-gnueabihf-#ctrl+x 关闭 y 确定保存source /etc/bash.bashrc #变量生效arm-linux-gnueabihf-gcc -v #检验是否生效 成功信息1234Using built-in specs.COLLECT_GCC=arm-linux-gnueabihf-gccCOLLECT_LTO_WRAPPER=/usr/local/arm-gcc/gcc-linaro-6.1.1-2016.08-x86_64_arm-linux-gnueabihf/bin/../libexec/gcc/arm-linux-gnueabihf/6.1.1/lto-wrapperTarget: arm-linux-gnueabihf]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[更新ubuntu的源为国内源]]></title>
    <url>%2F2019%2F04%2F19%2Fupdate-source-apt%2F</url>
    <content type="text"><![CDATA[首次安装完建议先更新源1sudo apt-get update 备份源列表1cp /etc/apt/source.list /etc/apt/source.list.bak 查看系统版本 1lsb_release -a 我是16.04位xenial 换源 12sudo nano /etc/apt/source.list#删除所有内容 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273deb http://mirrors.sohu.com/ubuntu/ trusty main restricted universe multiversedeb http://mirrors.sohu.com/ubuntu/ trusty-security main restricted universe multiversedeb http://mirrors.sohu.com/ubuntu/ trusty-updates main restricted universe multiversedeb http://mirrors.sohu.com/ubuntu/ trusty-proposed main restricted universe multiversedeb http://mirrors.sohu.com/ubuntu/ trusty-backports main restricted universe multiversedeb-src http://mirrors.sohu.com/ubuntu/ trusty main restricted universe multiversedeb-src http://mirrors.sohu.com/ubuntu/ trusty-security main restricted universe multiversedeb-src http://mirrors.sohu.com/ubuntu/ trusty-updates main restricted universe multiversedeb-src http://mirrors.sohu.com/ubuntu/ trusty-proposed main restricted universe multiversedeb-src http://mirrors.sohu.com/ubuntu/ trusty-backports main restricted universe multiverse#163 guangdongdeb http://mirrors.163.com/ubuntu/ trusty main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ trusty main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiverse#aliyundeb-src http://archive.ubuntu.com/ubuntu xenial main restricteddeb http://mirrors.aliyun.com/ubuntu/ xenial main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universedeb http://mirrors.aliyun.com/ubuntu/ xenial universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb http://mirrors.aliyun.com/ubuntu/ xenial multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb http://archive.canonical.com/ubuntu xenial partnerdeb-src http://archive.canonical.com/ubuntu xenial partnerdeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universedeb http://mirrors.aliyun.com/ubuntu/ xenial-security universedeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse#tsinghua.edudeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricteddeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricteddeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial universedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates universedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial multiversedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates multiversedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiversedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricteddeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security universedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security multiverse#neu.edudeb-src http://mirror.neu.edu.cn/ubuntu/ xenial main restricted #Added by software-propertiesdeb http://mirror.neu.edu.cn/ubuntu/ xenial main restricteddeb-src http://mirror.neu.edu.cn/ubuntu/ xenial restricted multiverse universe #Added by software-propertiesdeb http://mirror.neu.edu.cn/ubuntu/ xenial-updates main restricteddeb-src http://mirror.neu.edu.cn/ubuntu/ xenial-updates main restricted multiverse universedeb http://mirror.neu.edu.cn/ubuntu/ xenial universedeb http://mirror.neu.edu.cn/ubuntu/ xenial-updates universedeb http://mirror.neu.edu.cn/ubuntu/ xenial multiversedeb http://mirror.neu.edu.cn/ubuntu/ xenial-updates multiversedeb http://mirror.neu.edu.cn/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirror.neu.edu.cn/ubuntu/ xenial-backports main restricted universe multiversedeb http://archive.canonical.com/ubuntu xenial partnerdeb-src http://archive.canonical.com/ubuntu xenial partnerdeb http://mirror.neu.edu.cn/ubuntu/ xenial-security main restricteddeb-src http://mirror.neu.edu.cn/ubuntu/ xenial-security main restricted multiverse universedeb http://mirror.neu.edu.cn/ubuntu/ xenial-security universedeb http://mirror.neu.edu.cn/ubuntu/ xenial-security multiverse 最后执行更新 1sudo apt-get update]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[grub2引导界面的美化]]></title>
    <url>%2F2019%2F04%2F19%2Fgrub2%2F</url>
    <content type="text"><![CDATA[用于windows与ubuntu的双系统引导界面太丑美化一下 美化包下载：链接 下载到系统后解压 创建主题文件夹 12sudo mkdir /boot/grub/themes #新建一个主题文件夹sudo cp -R 主题文件夹名称 /boot/grub/themes 修改grub引导配置文件 12cd /etc/grub.dsudo nano 00_header 在注释下面的第一行写入 12GRUB_THEME="/boot/grub/themes/主题包名/theme.txt"GRUB_GFXMODE="1920x1080" 或者为"auto" 更新grub 1sudo update-grub 注意一个themes文件夹下不能有多个主题包，否则只会生效第一次配置的那个 重启]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[完全卸载双系统ubuntu的efi引导]]></title>
    <url>%2F2019%2F04%2F19%2Fdelete-efi%2F</url>
    <content type="text"><![CDATA[使用power shell123456789diskpart #打开diskpartlist disk #列出系统中拥有的磁盘，我笔记本上有两块磁盘，记得当时ubuntu启动项文件安装到了SSD所在的磁盘0中select disk 0 #选择EFI引导分区所在的磁盘，请根据实际情况选择list partition #列出所选磁盘拥有的分区select partition 1 #选择EFI引导分区，类型为系统的分区，就是EFI引导分区assign letter=p: #为所选分区分配盘符，请分配空闲盘符exit # 退出taskkill /im explorer.exe /f #关闭explorerexplorer.exe #再以管理员身份打开explorer 此时，在文件管理器可以看见盘符为p的efi分区 使用管理员身份进入后，删除ubuntu文件夹 重启即可 参考]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu16.04双系统的安装]]></title>
    <url>%2F2019%2F04%2F19%2FUbuntu16-04%2F</url>
    <content type="text"><![CDATA[注意：仅适合UEFI引导的系统网络上很多的安装教程都有许多误导，直接在互联网上搜索得到的答案大致分为如下几类： 利用vmware或者box虚拟机，进入试用ubuntu界面后，连接外部usb安装 利用u盘启动盘 一开始我是想要安装在u盘里面，做成口袋系统，但是u盘没有缓存，一直读写容易坏，而且系统引导是由grub引导的一旦u盘拔出就会出现找不到引导系统的问题 最后我决定在机械硬盘上安装ubuntu，最后实现ssd上跑win10，硬盘上跑ubuntu的双系统 开始因为安装的过程没有截图，所以描述全部由纯文字表述，但是你一定能看懂 误区1 什么是uefi和bios的区别： uefi作为新的启动方式，由efi进行系统引导，新的笔记本操作系统几乎都采用uefi引导，所以我们安装ubuntu的时候也采用uefi引导，网络教程大部分u盘安装要求进入系统bios关闭secure boot，开启兼容启动（lagency或者launch in csm启动。好像是这两个叫法）。 ​ 网络解释是：只有这样系统才能识别u盘，才能使用u盘启动盘安装，然而这是错误的。开启兼容模式启动后安装的ubuntu系统就是传统bios引导，无法和uefi引导的windows共存，所以每次启动系统必须进入bios开启和关闭兼容模式启动，来更换系统 误区2 分区： ​ 有几篇文章给的分区很详细，把swap，home，boot，usr都分配了空间，但是其实只需要分配下swap和/home分区，其他的由系统自动分配。 分区的区域设置：分为主分区和逻辑分区，在uefi模式下不分这个，不需要管 误区3 系统引导： ​ 一般系统引导分区为/boot，网上的教程建议/boot分配500m以上，格式选择为bios预留，然后在下方的选择启动引导器的设备里选择/boot所在的分区。 ​ 这个做法是用于bios系统，而且选择/boot所在的分区后，引导安装的位置与win10不一样，在uefi模式下不会找到ubuntu的引导开机选项 正确做法 找到自己电脑的进入bios的快捷按钮，华硕是F2，在开机界面一直按F2进入bios 进入bios，自行百度关闭windows的安全启动，即secure boot设置为disable 不要按照网上的说法打开兼容模式启动，直接开机，进入windows准备 给机械硬盘分区​ 使用搜索或者小娜搜索分区，打开windows自带的分区工具，会看见自己的硬盘，不看固态硬盘，根据容量找到机械硬盘，右键压缩卷，会弹出压缩空间窗口，根据自己情况填写，100GB就很好，然后确定开始压缩，一般等待30分钟到两个小时不等。 ​ 压缩完成后，会弹出窗口，要求分配卷标或者格式化，注意现在新的分区应该是未分配状态，不需要分配空间，直接关掉。 制作启动u盘​ 不要使用软碟通也就是Ultraliso，选择ubuntu官方推荐的工具rufus，地址，不想安装就选择便携版本下载。 ​ 下载好ubuntu的镜像iso文件，进入rufus，选择自己的u盘（最好是fat32格式，不支持exfat），选择镜像文件，分区类型选择GPT（因为机械硬盘的分区表结构是这个），目标格式选择UEFI，其他默认然后点击开始制作 ​ 注意会格式化u盘，注意备份 安装系统重启进入bios界面（华硕按F2），在boot 项下的boot option里把名称为你u盘名称（也可能为general usb设备）的选项上移到第一位，然后F10保存确定重启 开始安装正常情况下进入ubuntu系统界面，选择语言中文或者不选，点击install ubuntu 可以参考网络教程的图解，到达安装分区的那一步，第一个选项是安装ubuntu到整个磁盘，选这个就完了。选择最后一项其他，进入自定义分区的界面。 参考网络的分区建议或者按照我的步骤，找到自己刚才压缩的100GB分区，应该是显示空闲，然后左下角的加号+。 先分配引导系统文件格式选择efi系统，位置选择/boot。 分配系统部分，文件格式选择ext4，位置/，建议60GB，系统程序都在这里。 分配用户文件夹，格式ext4，位置/home，自己的文件放在这里，建议25GB以上 分配swap，格式选择交换空间，位置为空，不分配时后面系统可能不能正常待机 其他的交给系统分配 最后，在最下面的安装系统引导设备选择windows bootmanager，如果没有那么就不是以uefi模式安装的系统，退回去重新做。 等待安装完成 使用安装完成后，提示重启系统，就会进入grub界面，引导第一项应该是ubuntu，第二项是ubuntu高级选项，第三个是windows。 记得先拔掉u盘 后记如果分区错误，导致系统安装失败，可以进入bios选择第一项启动为windows，进入windows使用diskgenius删除分区，删掉之后就是空闲空间了 ubuntu出现问题想要重装一次：由于efi是写在windows的隐藏分区里，要删掉efi分区里的ubuntu项，才能完全卸载ubuntu，方法参考文章：简书]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Pyqt5中的QDialog使用]]></title>
    <url>%2F2019%2F04%2F15%2Fpyqt5-3%2F</url>
    <content type="text"><![CDATA[Pyqt5环境QDialogQDialog类的子类主要有QMessageBox，QFileDialog，QColorDialog，QFontDialog，QInputDialog等 qt库中自带的对话框为了提高人机交互的效率 QMessagebox1234567891011121314151617181920QMessageBox.information 信息框QMessageBox.question 问答框QMessageBox.warning 警告QMessageBox.ctitical危险QMessageBox.about 关于reply = QMessageBox.question(self, 'Message',"Are you sure to quit?",QMessageBox.Yes,QMessageBox.No) if reply == QMessageBox.Yes: event.accept() else: event.ignore() QMessageBox.about(self, "About Search System", "The Search System demonstrates how to search images")QMessageBox.warning(self, "warning", "The save directory is empty", QMessageBox.Cancel)QMessageBox.information(self,"Tips","Save the current frame successfully!", QMessageBox.Yes)QMessageBox.aboutQt(self,"About Qt") QMessageBox.critical(self,"Critical",self.tr("错误!")) QFileDialog123456789101112131415161718192021#打开文件fileName_choose, filetype = QFileDialog.getOpenFileName(self, "选取文件", self.cwd, # 起始路径 "All Files (*);;Text Files (*.txt)") #设置文件扩展名过滤,用双分号间隔#打开多文件files, filetype = QFileDialog.getOpenFileNames(self, "多文件选择", self.cwd, # 起始路径 "All Files (*);;PDF Files (*.pdf);;Text Files (*.txt)") #保存文件fileName_choose, filetype = QFileDialog.getSaveFileName(self, "文件保存", self.cwd, # 起始路径 "All Files (*);;Text Files (*.txt)") #保存文件时，fileName_choose返回一个文件的地址+名称#使用with开辟一块空间保存with open(fileName_choose,'w')as f: f.write(data)#注意文件的编码问题，二进制文件只有wb 参考文章： 1 2]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>pyqt5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sql server的tsql语句学习]]></title>
    <url>%2F2019%2F04%2F14%2Fsql-server-tsql%2F</url>
    <content type="text"><![CDATA[Tsql语句属于微软为sql server设计的高级sql语句新建查询变量赋值123declare @n intset @n=5print @n 声明变量n，用set方法赋值为5，打印 12declare @name char,@age intselect @name='pig',@age=20 使用select语句可以对多个变量同时赋值 循环12345678910declare @a intdeclare @sum intset @a=1 set @sum=0 while @a&lt;=100 begin set @sum+=@a set @a+=1 endprint @sum 计算1到100循环 条件语句12345678if(1+1=2) begin print '对'endelsebegin print '错'end 游标123456789101112131415161718declare @ID intdeclare @Oid intdeclare @Login varchar(50) --定义一个游标 declare user_cur cursor for select ID,Oid,[Login] from ST_User --打开游标 open user_cur while @@fetch_status=0 begin--读取游标 fetch next from user_cur into @ID,@Oid,@Login print @ID --print @Login endclose user_cur --摧毁游标 deallocate user_cur 触发器12345678910111213--创建触发器 Create trigger User_OnUpdate On ST_User for Update As declare @msg nvarchar(50) --@msg记录修改情况 select @msg = N'姓名从“' + Deleted.Name + N'”修改为“' + Inserted.Name + '”' from Inserted,Deleted --插入日志表 insert into [LOG](MSG)values(@msg) --删除触发器 drop trigger User_OnUpdate 存储过程12345678CREATE PROCEDURE PR_Sum @a int, @b int, @sum int outputASBEGIN set @sum=@a+@b END 带有output参数 12345678--创建Return返回值存储过程 CREATE PROCEDURE PR_Sum2 @a int, @b intASBEGIN Return @a+@b END 1234--执行存储过程获取Return型返回值 declare @mysum2 intexec @mysum2= PR_Sum2 1,2 print @mysum2 函数1234567891011--新建标量值函数 create function FUNC_Sum1 ( @a int, @b int) returns intasbegin return @a+@b end 12345678--新建内联表值函数 create function FUNC_UserTab_1 ( @myId int) returns tableasreturn (select * from ST_User where ID&lt;@myId) 123456789101112131415161718192021222324252627282930--新建多语句表值函数 create function FUNC_UserTab_2 ( @myId int) returns @t table( [ID] [int] NOT NULL, [Oid] [int] NOT NULL, [Login] [nvarchar](50) NOT NULL, [Rtx] [nvarchar](4) NOT NULL, [Name] [nvarchar](5) NOT NULL, [Password] [nvarchar](max) NULL, [State] [nvarchar](8) NOT NULL) asbegin insert into @t select * from ST_User where ID&lt;@myId returnend --调用表值函数 select * from dbo.FUNC_UserTab_1(15) --调用标量值函数 declare @s intset @s=dbo.FUNC_Sum1(100,50) print @s --删除标量值函数 drop function FUNC_Sum1 参考文章：参考博客]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库实验二]]></title>
    <url>%2F2019%2F04%2F14%2Fsqltest2%2F</url>
    <content type="text"><![CDATA[使用Tsql语句描述汉诺塔汉诺塔简介：参考 使用sql server的tsql语句 利用存储过程实现 123456789101112131415161718create procedure hannuo(@num int,@a char,@b char,@c char)as declare @numm int select @numm=@num-1 begin if @num=1 begin print 'move'+convert(char,@num)+' from '+@a+' to '+@c end else begin exec hannuo @numm,@a,@c,@b print 'move'+convert(char,@numm)+' from '+@a+' to '+@c exec hannuo @numm,@b,@a,@c end endexec hannuo 10 ,a,b,c 存储过程的变量分别为num盘子数目，abc为柱子的名称 使用Tsql语句描述猫鼠问题猫鼠问题简介：在一个m*n的方格中，老鼠位于最顶端的1*1方格内，猫位于一个特定的方格内，出口在最右下角，老鼠每次移动一格，只能向右和向下移动，不能碰到猫。求解一共有多少条路径 12345678910111213141516171819202122create procedure mouse(@m int,@n int,@i int,@j int)as declare @mm int ,@nn int,@l int,@r intselect @mm=@m-1,@nn=@n-1 begin if @m=@i and @n=@j or @m=0 or @n=0 begin return 0 end else if @m=1 and @n=1 begin print '找到一条路径' return 1 end exec @l= mouse @mm,@n,@i,@j exec @r= mouse @m,@nn,@i,@j return @l+@r endexec mouse 5,3,2,2 存储过程的变量分别为mn方格的行列数，ij猫所在的位置，每次走到出口打印一次]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机辅助电磁学结课]]></title>
    <url>%2F2019%2F04%2F14%2Fmicorwave-fuhzu%2F</url>
    <content type="text"><![CDATA[计算机辅助电磁学结课作业编程实现对任意多端口微波无源网络的不定导纳矩阵，阻抗参数，导纳矩阵，s参数矩阵求解 使用python numpy库解决 解决思路针对复杂的网络，不能简单的通过算法得到其网络拓扑图结构，所以采用不定导纳矩阵方法，由用户输入节点的数目假设输入的节点数n为3，假设每个节点间都有一个元件计算得出节点间的元件数目为Cn2给定元件的参数表示方法：导纳用户在命令台输入元件的电导和电纳值由python的矩阵计算实现计算 算法实现zero()方法 创建一个n*n的全零矩阵buding()方法 根据不定导纳矩阵的定义，对零矩阵赋值建立单个节点的不定导纳矩阵sum()方法 对每个元件的不定导纳矩阵求和，得到不定导纳矩阵result()方法 取公共端点为1节点接地，得到节点的导纳矩阵Zarray()方法 对导纳矩阵求逆得到Z矩阵Z()方法 根据级联矩阵电压电流关系，取定j，k节点 求出参数ABCDZin,Zout()方法 求电路的输入输出阻抗Sin,Sout()方法 求电路的输入输出反射系数 快捷计算库实现简单的把计算步骤打包进了库里，库包含两个文件，用户输入.py和计算.py 使用方法： 1234567import microwave_sci as mc#用户输入参数datas = mc.go(num) #传入参数为节点数#计算矩阵mc.Buding(num,datas) #传入参数节点数，参数列表#计算节点导纳矩阵mc.Yarray(Z) #参数Z为计算得到的不定导纳矩阵 构造图形化界面]]></content>
  </entry>
  <entry>
    <title><![CDATA[PIL库的图片处理使用]]></title>
    <url>%2F2019%2F04%2F11%2Fpy8-pil%2F</url>
    <content type="text"><![CDATA[PIL库123from PIL import ImageFontfrom PIL import Imagefrom PIL import ImageDraw 1234567891011121314151617imageFile = "pinyin.png" #使用的图片资源 try: word_css = "pinyin.ttf" word_size = 138 # 文字大小 font = ImageFont.truetype(word_css, word_size) # 分割得到数组 im1 = Image.open(imageFile) # 打开图片 draw = ImageDraw.Draw(im1) time = datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S') draw.text((x, y), pstr, (0, 0, 0), font=font) # 设置位置坐标 文字 颜色 字体 im1.save(r'C:\\Users\Administrator\Desktop\\&#123;&#125;.png'.format(time)) except: print('找不到字体文件') del draw # 删除画笔 im1.close() # 关闭图片 123456789101112131415161718192021222324252627282930313233343536blank = Image.new("RGB",[1024,768],"white") #创建图片或者导入图片drawObj = ImageDraw.Draw(blank) #新建一个图片操纵对象# 创建一个正方形。 [x1,x2,y1,y2]或者[(x1,x2),(y1,y2)] fill代表的为颜色drawObj.line([100,100,100,600],fill='red')drawObj.line([100,100,600,100],fill='red')drawObj.line([600,100,600,600],'black')drawObj.line([100,600,600,600],'red')# 弧形 [x1,x2,y1,y2] 弧度 颜色drawObj.arc([100,100,600,600],0,360,fill='black')drawObj.arc([200,100,500,600],0,360,fill='red')# 画半圆 [x1,x2,y1,y2] 弧度 outline弦线颜色 fill填充颜色drawObj.chord([100,100,600,600],0,360,outline=125)drawObj.chord([100,100,600,600],0,90,outline=158)drawObj.chord([100,100,600,600],90,180,outline=99,fill='red')# 扇形 [x1,x2,y1,y2] 弧度 outline弦线颜色 fill填充颜色drawObj.pieslice([100,100,600,600],180,210,outline=255)drawObj.pieslice([100,100,600,600],30,80,fill=255)# 多边形drawObj.polygon([10,23,45,6,77,87],outline='red')drawObj.polygon([10,20,30,40,50,90,70,80,90,100],fill='red')# 矩形drawObj.rectangle((200,200,500,500),outline = "red")drawObj.rectangle((250,300,450,400),fill = 128)# 文字text = 'i\'m very happy'# 颜色drawObj.ink = 0 + 0 * 256 + 255 * 256 * 256# 加载到图片上drawObj.text([300,500],text) 参考文章：csdn]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python的时间模块和数学取整]]></title>
    <url>%2F2019%2F04%2F11%2Fpy7%2F</url>
    <content type="text"><![CDATA[datatime模块使用datatime模块获取系统的时间 12import datatimetime = datatime.datatime.now() 将获取的时间格式化为字符串 12time.strftime('%Y-%m-%d-%H-%M-%S')#格式化为年-月-日 -小时 -分钟- 秒 字符串转化为时间 1time = datetime.datetime.strptime(string,'%Y-%m-%d %H:%M:%S') 格式 123456789101112131415161718192021222324252627282930313233343536%a 星期几的简写%A 星期几的全称%b 月分的简写%B 月份的全称%c 标准的日期的时间串%C 年份的后两位数字%d 十进制表示的每月的第几天%D 月/天/年%e 在两字符域中，十进制表示的每月的第几天%F 年-月-日%g 年份的后两位数字，使用基于周的年%G 年分，使用基于周的年%h 简写的月份名%H 24小时制的小时%I 12小时制的小时%j 十进制表示的每年的第几天%m 十进制表示的月份%M 十时制表示的分钟数%n 新行符%p 本地的AM或PM的等价显示%r 12小时的时间%R 显示小时和分钟：hh:mm%S 十进制的秒数%t 水平制表符%T 显示时分秒：hh:mm:ss%u 每周的第几天，星期一为第一天 （值从0到6，星期一为0）%U 第年的第几周，把星期日做为第一天（值从0到53）%V 每年的第几周，使用基于周的年%w 十进制表示的星期几（值从0到6，星期天为0）%W 每年的第几周，把星期一做为第一天（值从0到53）%x 标准的日期串%X 标准的时间串%y 不带世纪的十进制年份（值从0到99）%Y 带世纪部分的十制年份%z，%Z 时区名称，如果不能得到时区名称则返回空字符。%% 百分号 math模块python的数值计算取整import math库 1234567891011121314151617181920import math#取整n = 3.25print(int(n))&gt;&gt;&gt; 3 #向上取整print(math.ceil(n))&gt;&gt;&gt; 4 #向下取整print(math.floor(n))&gt;&gt;&gt; 3 #四舍五入a = 3.25b = 3.75print(math.round(a))print(math.round(b))#取整数和小数部分n = 3.75print(math.modf(n))&gt;&gt;&gt; (0.75, 3.0) 保留一位小数 123print(format((10/3),'.1f'))print('%.1f'%(10/3))print(round(10/3,1))]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拼音模板使用说明书]]></title>
    <url>%2F2019%2F04%2F10%2Fpinyin-guide%2F</url>
    <content type="text"><![CDATA[拼音模板 demo手册功能： 用户输入拼音字母制作成模板图片 使用拼音自选功能，快速选择音标 提供预览（因为布局问题有些许错位，不影响保存） 高级功能：汉字注音（还未完成） 界面 新建模板在输入框中输入字母 点击功能按钮生成预览查看效果 保存预览无误后，点击按钮保存模板 成功会在右下角的状态栏提示 清空内容点击按钮清空内容会清空所有输入 更换背景提供两种背景切换（可能很丑吧）点击按钮更换背景切换 高级功能目前只完成了自选拼音的功能，首先点击高级功能按钮，会跳出激活框，输入激活码即可 激活码如下： 0到50间的素数个数 哪位科学家的棺材板总是被按住（中文名） 名侦探柯南中使新一变小的药物（大写） 复仇者联盟1的上映年份 玻尔兹曼常数的前六位 我名字的拼音首字母小写 经常使用花呗的人欠谁钱 输入激活码后再次点击左侧的自选拼音按钮即可使用该功能 不激活会出现如下提示 激活成功后进入高级功能界面 拼音自选框的使用声母部分因为不存在音标直接点击对应字母就会添加进最终的字母串，最后点击确定按钮应用，然后进入主界面，点击生成预览即可查看 韵母部分包含音标，如果输入韵母没有音标声调，先点击对应字母，再点击无音标如果有音标，先点击对应字母，再点击声调 例如： ​ a = a + 无音标​ ā = a + 一声 最后点击确定，生成模板查看 拼音自选框作为辅助界面，可以移动到主界面的旁边，方便预览修改 捐赠点击按钮Alipay捐赠，扫描支付宝收款码即可向我打钱 问题软件主程序和图片资源必须在同一目录下，删除图片不影响使用，但是软件依赖的图片资源会失效因为没使用qt的转码工具所以图片不能打包进主程序里]]></content>
  </entry>
  <entry>
    <title><![CDATA[使用numpy求解微波无源多端口网络的不定导纳矩阵]]></title>
    <url>%2F2019%2F04%2F07%2Fpython-weibo-array%2F</url>
    <content type="text"><![CDATA[​ 对于任意多任意端口网络的拓扑结构，如果通过输入来确定是不可能的因为任意多端口决定了不可能穷尽 ​ 考虑使用不定导纳矩阵的方法解决 不定导纳矩阵把网络看做全部是由节点构成的，每个元件都连接两个节点，每个元件都有一个导纳矩阵。 假如对任意j节点，与其连接的有k个节点，那么就会存在k个导纳矩阵，对k个矩阵求和，就可以求出j节点的导纳矩阵 取节点1为公共节点，在求得的nxn矩阵中去掉第一行，第一列，最后得到的(n-1x(n-1)矩阵就是不定导纳矩阵，对不定导纳矩阵求逆得到Z矩阵 编程实现算法如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768import numpy as npimport time#使用字典来存储数据data = []num = int(input('输入节点数'))jiedian = int((num*(num-1)/2))for n in range(1,jiedian+1): dict = &#123;'导纳':'','l':'','r':''&#125; G = int(input('导纳值电导')) B = int(input('导纳值电纳')) image = 1j dict['导纳'] = G + B*image dict['l'] = int(input('左节点')) dict['r'] = int(input('右节点')) data.append(dict)def zero(): #创建全0矩阵 zarray = np.zeros((num,num),dtype=complex) return zarraydef buding(l,r,Y): zarray = zero() #单个元件的不定导纳矩阵 zarray[l-1,l-1] = Y zarray[r-1,r-1] = Y zarray[l-1,r-1] = -Y zarray[r-1,l-1] = -Y # print(zarray,'\n') return zarraydef sum(): #矩阵的相加 sum = zero() for dict in data: array = buding(dict['l'],dict['r'],dict['导纳']) sum += array # print('求和矩阵') # print(sum) return sumdef result(): #得到不定导纳矩阵 budingjuzhen = sum() tmp1 = np.delete(budingjuzhen,0,axis=1) tmp2 = np.delete(tmp1,0,axis=0) budingjuzhen = tmp2 # print('不定导纳矩阵\n') return budingjuzhendef Zarray(): #Z矩阵 Z = np.linalg.pinv(result()) # 逆矩阵就是Z矩阵 # print('逆矩阵\n', Z) return Ztime.sleep(2)print('\n----开始----')print('单个元件的导纳矩阵和\n',sum())print('不定导纳矩阵\n',result())print('逆矩阵\n', Zarray())time.sleep(2) print('\n----结束----') 使用pyqt进行图形化重建请转到github]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>numpy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Numpy打包出现的问题]]></title>
    <url>%2F2019%2F04%2F07%2Fnumpy-learn1%2F</url>
    <content type="text"><![CDATA[版本：Numpy1.6.01在对新版本的numpy库进行打包的时候，经常会出现导入包错误，最终运行时提醒 no module name numpy.core.*** 往往是由于numpy的版本出现问题，对numpy降级或更新，对python自带的setuptools进行更新 最简单的解决办法，在需要打包的py脚本中导入缺失的包 1import numpy.core._dtype_ctypes]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>numpy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx配置]]></title>
    <url>%2F2019%2F03%2F27%2Fnginx-conf%2F</url>
    <content type="text"><![CDATA[在linux上运行nginx在nginx下配置静态网站进入cd /etc/nginx 编辑配置文件vi nginx.conf 1234567891011121314151617181920server &#123; listen 80 default_server; listen [::]:80 default_server; server_name _; root /home/git; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125; &#125; 在本地home/git下面放入静态网页资源，conf文件中指定到该文件夹下 1nginx -s reload ## 在nginx下配置多个网站注意：nginx的默认端口必须是80端口 使用nginx代理不同的端口的请求 12345cd /etc/nginxmkdir conf新建一个放置配置文件的文件夹vi con1.confvi con2.conf 1234567891011121314151617181920212223242526272829303132333435363738394041#修改配置内容#网站1server &#123; listen 80; server_name _; root /home/git; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125; &#125;#网站2server &#123; listen 80; server_name 域名; root /home/www; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125; &#125; 可以看见同时监听80端口，只有server name和root不同，当检测到输入的域名不同时自动切换到对应的web根目录 在nginx.conf中添加include /etc/nginx/conf/*.conf 方法二 在不同的端口部署 12345678910111213141516171819server &#123; listen 8081; server_name _; root /home/git; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125; &#125; 最终根据ip+端口访问网站 nginx的log文件夹错误见下一次总结]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库实验1]]></title>
    <url>%2F2019%2F03%2F27%2Fsqltest1%2F</url>
    <content type="text"><![CDATA[环境：SQL server Postgresql 实验一：（postgre）根据供应商表完成数据库操作建表 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import psycopg2import sysimport jsonclass sql(): def connect(self): #连接数据库 self.db = psycopg2.connect(host='localhost',user='postgres',password='123456',database='db1',port='5432') self.cursor = self.db.cursor() def roll(self): self.db.rollback() def creat_table(self): self.connect() sql = 'CREATE TABLE IF NOT EXISTS \ S(SNO VARCHAR (100) NOT NULL ,\ SNAME VARCHAR (100) NOT NULL,\ STATUS INT NOT NULL ,\ CITY VARCHAR (100) NOT NULL,\ PRIMARY KEY (SNO))' self.cursor.execute(sql) sql = 'create table if not exists \ p(pno varchar (100) not null ,\ pname varchar (100) not null ,\ color varchar(100) not null ,\ weight varchar (100) not null ,\ primary key(pno))' self.cursor.execute(sql) sql = 'create table if not exists \ j(jno varchar (100) not null ,\ jname varchar (100) not null ,\ city varchar (100) not null ,\ primary key(jno))' self.cursor.execute(sql) sql = 'create table if not exists \ spj(sno varchar (100)not null ,\ pno varchar (100)not null ,\ jno varchar (100) not null ,\ qty varchar (100)not null ,\ primary key(sno,pno,jno) ,\ foreign key(sno)references S(sno),\ foreign key(pno)references p(pno),\ foreign key(jno)references j(jno))' self.cursor.execute(sql) self.db.commit() 输入数据 找出所有供应商的姓名和所在城市 1select sname,city from s 所有零件的名称，颜色和重量 1select pname,color,weight from p S1提供的零件的工程号码 1select jno from spj where sno='s1' J2项目使用的各种零件的名称和重量 1select pname,qty from spj,p where spj.pno=p.pno and spj.jno='j2' 上海厂商提供的所有零件号码 1select pno from spj,s where spj.sno=s.sno and s.city='上海' 使用上海零件的工程名称 1select jname from j,spj,s where spj.sno=s.sno and spj.jno=j.jno and s.sno='s5' 没有使用天津零件的工程号码 1select jno from spj,s where spj.sno=s.sno and not s.city='天津' 把红色零件全部换为蓝色 1update p set color='蓝' where color='红' 把由s5供给s4零件p6改为由s3提供 1update spj set sno='s3' where sno='s5'and pno=’p6' and jno='j4' 从供应商关系中删除s2，并从供应情况关系中删除相应记录 123delete from spj where sno='s2'delete from s where sno='s2'#涉及外键 插入数据 1insert into spj (sno,jno,pno,qty)values ('s2','j4','p6','200') 实验二（sql server2012）统计数学的成绩分布，按照分段统计 12345678910111213141516171819create procedure count@hcname char(20)asselect count(sno) as 优秀人数from course,scwhere course.cno=sc.cno and cname=@hcname and grade between 90 and 100select count(sno) as 良好人数from course,scwhere course.cno=sc.cno and cname=@hcname and grade between 80 and 90select count(sno) as 一般人数from course,scwhere course.cno=sc.cno and cname=@hcname and grade between 70 and 80select count(sno) as 及格人数from course,scwhere course.cno=sc.cno and cname=@hcname and grade between 60 and 70select count(sno) as 不及格人数from course,scwhere course.cno=sc.cno and cname=@hcname and grade between 0 and 60exec count "数学" 统计任意一门课平均成绩 1234567create procedure avg@hcourse char(20)as declare @grade_avg floatbeginselect cname,avg(grade*1.0)from sc,course where sc.cno=course.cno and @hcourse=course.cname group by cnameendexec avg "数学" 将成绩从百分制变为ABCDE 1234567891011121314151617181920212223create procedure abcdeas declare @sno char(10),@cno char(4),@grade smallint,@grade_char char(1)declare cur_grade cursor for select sno,cno,gradefrom scopen cur_gradefetch next from cur_grade into @sno,@cno,@gradewhile @@FETCH_STATUS=0beginif @grade&gt;90 and @grade&lt;100 set @grade_char='A'else if @grade&gt;80 and @grade&lt;=90 set @grade_char='B'else if @grade&gt;70 and @grade&lt;=80 set @grade_char='C'else if @grade&gt;60 and @grade&lt;=70 set @grade_char='D'else if @grade&lt;60 set @grade_char='E'update scset newgrade=@grade_charwhere sno=@sno and cno=@cnofetch next from cur_grade into @sno,@cno,@gradeendclose cur_gradedeallocate cur_gradeexec abcde]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos安装python3]]></title>
    <url>%2F2019%2F03%2F26%2Fcentos-python%2F</url>
    <content type="text"><![CDATA[centos本身自带python2.7用于系统的环境设置 安装另外的python3版本 123#安装依赖yum -y groupinstall "Development tools"yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel 1wget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tar.xz 12#创建本地文件夹mkdir /usr/local/python3 123456mv Python-3.7.2.tar.xz /usr/local/python3tar -xvJf Python-3.7.2.tar.xzcd Python-3.6.2./configure --prefix=/usr/local/python3make make install 123#创建软链接ln -s /usr/local/python3/bin/python3 /usr/bin/python3ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 123#配置yum文件 让python版本共存vi /usr/bin/yum把#! /usr/bin/python修改为#! /usr/bin/python2 12vi /usr/libexec/urlgrabber-ext-down把#! /usr/bin/python修改为#! /usr/bin/python2]]></content>
      <categories>
        <category>linux</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos查看端口占用]]></title>
    <url>%2F2019%2F03%2F26%2Fcentos5%2F</url>
    <content type="text"><![CDATA[12lsof -i:8888#查看端口的占用程序 12netstat -tunlp |grep 8888#查看端口的进程情况]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos的软链接指令]]></title>
    <url>%2F2019%2F03%2F26%2Fcentos4%2F</url>
    <content type="text"><![CDATA[软链接类似于一个快捷方式 将任意文件夹的命令链接到系统的根目录下 常用指令 1ln -s 文件夹 centos上常见问题 安装python3版本后pip和python指令和系统自带指令冲突 12ln -s /usr/local/python3/bin/python3 /usr/bin/python3ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 安装nginx后 使用nginx指令提示不存在 1ln -s /usr/local/bin/nginx /usr/bin/nginx 安装uwsgi后指令不存在 1ln -s /usr/local/python3/bin/uwsgi /usr/bin/uwsgi]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vsftpd的搭建]]></title>
    <url>%2F2019%2F03%2F20%2Fcentos3%2F</url>
    <content type="text"><![CDATA[Centos7+vsftpd安装1sudo yum install -y vsftpd #安装 配置123cd /etc/vsftpdsystemctl enable vsftpd.service #开机启动systemctl start vsftpd.service #启动服务 最重要的配置文件是vsftpd.conf 设置FTP打开conf文件 12345678910111213141516171819202122232425262728293031323334353637 anonymous_enable=YES #允许匿名用户访问# Uncomment this to allow local users to log in. # When SELinux is enforcing check for SE bool ftp_home_dir local_enable=YES #允许本地用户# # Uncomment this to enable any form of FTP write command. write_enable=YES #全局设置允许写入创建文件（开启）# # Default umask for local users is 077. You may wish to change this to 022, # if your users expect that (022 is used by most other ftpd's) local_umask=022 anon_upload_enable=YES #允许匿名用户上传 anon_mkdir_write_enable=YES #允许匿名用户创建文件夹anon_other_write_enable=YES #允许匿名用户重命名文件夹 # # Activate directory messages - messages given to remote users when they # go into a certain directory. dirmessage_enable=YES # # Activate logging of uploads/downloads. xferlog_enable=YES # connect_from_port_20=YES #chown_uploads=YES #chown_username=whoever #允许修改文件所有者 xferlog_std_format=YES # listen=YES #监听ipv4地址# Make sure, that one of the listen options is commented !! listen_ipv6=NO #监听ipv6地址 pam_service_name=vsftpd userlist_enable=YES tcp_wrappers=YES 修改配置文件后，修改公开目录的权限 12chmod o+w /var/ftp/pub/ #更改/var/ftp/pub目录的权限systemctl restart vsftpd.service #重启ftp服务 修改后如果还是不能上传文件，修改为允许全部权限 1chmod -R 777 /var/ftp/pub/ 遇到的问题 123550 no permission没有权限上传文件开启匿名用户的上传权限，修改pub目录权限为777 123553 无法创建文件anon_mkdir_write_enable=YES #允许匿名用户创建文件夹anon_other_write_enable=YES #允许匿名用户重命名文件夹 添加本地用户1234useradd ftptest #创建ftptest用户passwd ftptest #修改ftptest用户密码#会让用户输入两次密码确认 #创建的目录在/home/ftptest下 测试使用xftp登录用户ftp出现如下问题 1234#无法显示远程文件夹检查conf的设置local_enable=YES #允许本地用户将ftptest文件夹的权限设置为777 1234#用户验证失败找到/etc/vsftpd下的user_list文件里面包含禁止访问的用户名单项，如果里面有刚才创建的ftptest用户则删除最新的vsftpd版本默认包含nobody用户，禁止一切外部连接，删除即可 12345#连接远程服务器失败进入阿里云的控制台，找到安全，防火墙，添加规则自定义 协议tcp 端口1自定义 协议tcp 端口1024/65535 #开启后服务器安全性降低，测试端口后关闭FTP 协议tcp 端口21 阿里云服务器默认关闭linux的网络防火墙，所以不需要配置linux防火墙的规则 每次上传文件的时候，如果新建文件夹，都需要配置权限]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux文件操作指令]]></title>
    <url>%2F2019%2F03%2F19%2Fcentos2%2F</url>
    <content type="text"><![CDATA[CentOS测试文件夹1234567#生成文件夹testmkdir test#生成特定目录下文件夹mkdir /home/test#删除rm testrm -r test #删除test以及下面的子目录 文件1234#生成key文件vi key#删除文件rm key 12rm -rf ***#不提示用户直接删除，慎用 移动12mv tmp/1.test /home/test#移动tmp下的1.test文件到home/test下 复制1234cp 1.test /home/testcp 1.test 2.test #把1中的内容复制到2中cp -b 1.test 2.test #创建1.test的副本名为2.testcp -R test /home/test2 #复制test以及子目录到test2中 遍历1ls #遍历列出当前文件夹下的所有文件 vim编辑器12345678910#使用vi编辑文件内容时i #进入插入编辑模式，移动光标插入内容a #在光标后面插入内容#ESC键退出编辑模式: #输入指令q #退出wq #保存退出q! #强制退出wq！ #强制保存退出]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx服务器部署hexo]]></title>
    <url>%2F2019%2F03%2F19%2Fhexo-nginx%2F</url>
    <content type="text"><![CDATA[为linux学习打基础环境：centos7.3 阿里云ECSgit环境准备安装git在服务器上12yum install git-core # 适用centos redhatapt-get install git-core # 使用ubuntu 权限不够使用sudo权限 安装nginx服务器1yum install -y nginx 启动服务 1service nginx start 在浏览器输入服务器的ip 应该会出现nginx的测试界面 建立git仓库1adduser git # 添加用户 123cd /home/git # 初始化hexo.git文件夹git init --bare hexo.gitchown -R git:git hexo.git 创建一个密匙验证文件 1vi /home/git/.ssh/authorized_keys 这时文件会自动打开，进入C:\Users\Administrator\.ssh文件夹下，用记事本打开id_rsa.pub公匙文件，把里面的内容拷贝到刚才新建的authorized_keys文件内保存 ssh密匙的生成参考 廖雪峰 配置Nginx服务12nginx -t #列出配置文件的路径vi /etc/nginx/nginx.conf # 打开配置文件 1234567listen 80;root /home/git; # 网站的根目录server_name localhost;location / &#123; index index.html index.htm;&#125; 1service nginx restart # 重启服务 遇到的问题访问网站时遇到403 forbidden问题分析：使用sudo安装nginx时，用户是root，打开nginx的配置文件，首行发现user是nginx，修改为root即可 配置git文件12345678cd /home/git/hexo.git/hooks# 新建增量更新文件配置vi post-update# 添加如下内容#!/bin/shgit --work-tree=/home/git --git-dir=/home/git/hexo.git checkout -f# 赋予可执行权限chmod +x post-update 测试在本机hexo根目录下找到config.yml文件，修改deploy 1234567deploy: type: git repo: github: git@github.com:Landers1037/Landers1037.github.io.git aliyun: git@服务器ip或域名:/home/git/hexo.git branch: master 1hexo d 再次在浏览器输入ip地址，部署成功]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[scrapy的打包技巧]]></title>
    <url>%2F2019%2F03%2F18%2Fscrapy3%2F</url>
    <content type="text"><![CDATA[传统的爬虫脚本是直接运行于服务器上，如果写了一个小的爬虫想要随时使用，可以使用scrapy自带的打包方法在scrapy爬虫的根目录下（例如爬虫项目名为test）test文件夹下，新建run.py文件 1234567891011from scrapy.utils.project import get_project_settingsfrom scrapy.crawler import CrawlerProcessdef run(): project_settings = get_project_settings() process = CrawlerProcess(project_settings) process.crawl(testSpider)# 自己定义的爬虫 process.start()if __name__=='__main__': run() scrapy使用以上的process类启动爬虫导入spider文件夹下自己定义的蜘蛛.py文件中的爬虫类 1from test.spiders.bot import testSpider 在最后的运行时，可能出现缺少***modle test.spider.bot 不存在的错误，注意自己根目录的位置** 导入所需要的scrapy包 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import scrapy.pipelines.images # 如果有图片的下载用到images类就要单独导入import urllib.robotparserimport scrapy.spiderloaderimport scrapy.statscollectorsimport scrapy.logformatterimport scrapy.dupefiltersimport scrapy.squeuesimport scrapy.extensions.spiderstateimport scrapy.extensions.corestatsimport scrapy.extensions.telnetimport scrapy.extensions.logstatsimport scrapy.extensions.memusageimport scrapy.extensions.memdebugimport scrapy.extensions.feedexportimport scrapy.extensions.closespiderimport scrapy.extensions.debugimport scrapy.extensions.httpcacheimport scrapy.extensions.statsmailerimport scrapy.extensions.throttleimport scrapy.core.schedulerimport scrapy.core.engineimport scrapy.core.scraperimport scrapy.core.spidermwimport scrapy.core.downloaderimport scrapy.downloadermiddlewares.statsimport scrapy.downloadermiddlewares.httpcacheimport scrapy.downloadermiddlewares.cookiesimport scrapy.downloadermiddlewares.useragentimport scrapy.downloadermiddlewares.httpproxyimport scrapy.downloadermiddlewares.ajaxcrawlimport scrapy.downloadermiddlewares.chunkedimport scrapy.downloadermiddlewares.decompressionimport scrapy.downloadermiddlewares.defaultheadersimport scrapy.downloadermiddlewares.downloadtimeoutimport scrapy.downloadermiddlewares.httpauthimport scrapy.downloadermiddlewares.httpcompressionimport scrapy.downloadermiddlewares.redirectimport scrapy.downloadermiddlewares.retryimport scrapy.downloadermiddlewares.robotstxtimport scrapy.spidermiddlewares.depthimport scrapy.spidermiddlewares.httperrorimport scrapy.spidermiddlewares.offsiteimport scrapy.spidermiddlewares.refererimport scrapy.spidermiddlewares.urllengthimport scrapy.pipelinesimport scrapy.core.downloader.handlers.httpimport scrapy.core.downloader.contextfactoryfrom test.pipelines import* # 自己定义的项目文件from test.settings import *# 缺什么import什么from test import * 使用pyinstaller 打包，在cmd cd到项目的根目录，记住scrapy的项目目录是两层的同名文件夹，进入里层的test文件夹 运行 pyinstaller -F run.py直接生成单文件，方便拷贝使用 最后会在项目目录下的dist文件夹下找到exe文件，此时运行一定会报错一般问题是缺少scrapy版本信息 进入python的库里找到scrapy库，拷贝mime.types,VERSION文件，在exe所在的目录下新建scrapy文件夹，把版本文件放进去，再次运行即可]]></content>
      <categories>
        <category>Python</category>
        <category>scrapy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用scrapy特定爬虫爬取不同的网页]]></title>
    <url>%2F2019%2F03%2F18%2Fscrapy2%2F</url>
    <content type="text"><![CDATA[在我的不断摸索下，发现当只想使用一个spider就想爬取不同的网站时，可以直接对parse方法进行条件判断 1234567891011121314151617181920212223242526272829303132333435# 常见的parse函数用于解析request的url# starturls可以是一个列表，里面可以放入不同的网址，记住这个时候要把顶级的allowed domin注释掉def parse(self, response): if response.url == 'https://my.ss8.fun/': return scrapy.Request(response.url,callback=self.parse_ss8) elif response.url == 'https://ttizi.com/': return scrapy.Request(response.url,callback=self.parse_ttizi) elif response.url == 'https://d.ishadowx.com/': return scrapy.Request(response.url,callback=self.parse_ishadow) def parse_ttizi(self,response): html = response.css('.card-body') for data in html: item = ImageItem() item['url'] = data.css('a:nth-child(2)::attr(href)').extract_first() yield item def parse_ishadow(self,response): html = response.css('.hover-text') for data in html: item = ImageItem() try: item['url'] = 'https://d.ishadowx.com/'+data.css('h4 a::attr(href)').extract_first() yield item except: continue def parse_ss8(self,response): html = response.css('article') for data in html: item = ImageItem() item['url'] = 'https://my.ss8.fun/'+data.css('a::attr(href)').extract_first() yield item 利用parse中的判断条件判断处理的url为哪一个网址，然后callback中的函数调用的就是专门处理这个网站的方法 注意方法start_requests（）方法的覆盖不能用于判断，它返回的必须是一个迭代器型的url列表]]></content>
      <categories>
        <category>Python</category>
        <category>scrapy</category>
      </categories>
      <tags>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[postgresql使用]]></title>
    <url>%2F2019%2F03%2F12%2Fpostgresql2%2F</url>
    <content type="text"><![CDATA[Python使用psycopg2库对postgresql数据库进行连接连接数据库 1234def connect(self): #连接数据库 self.db = psycopg2.connect(host='localhost',user='postgres',password='123456',database='db1',port='5432') self.cursor = self.db.cursor() 对数据库进行操作建表1234567sql = 'CREATE TABLE IF NOT EXISTS \ S(SNO VARCHAR (100) NOT NULL ,\ SNAME VARCHAR (100) NOT NULL,\ STATUS INT NOT NULL ,\ CITY VARCHAR (100) NOT NULL,\ PRIMARY KEY (SNO))' self.cursor.execute(sql) 1234567891011sql = 'create table if not exists \ spj(sno varchar (100)not null ,\ pno varchar (100)not null ,\ jno varchar (100) not null ,\ qty varchar (100)not null ,\ primary key(sno,pno,jno) ,\ foreign key(sno)references S(sno),\ foreign key(pno)references p(pno),\ foreign key(jno)references j(jno))' self.cursor.execute(sql) # 同时指定外键 用于和其他的表建立参照完整性 查询123sql = 'select sname,city from s'self.cursor.execute(sql)# 从表s中查询sname和city字段信息 123 sql = 'select jno from spj where sno=\'s1\'' self.cursor.execute(sql)# 查询符合sno=s1条件的字段信息 12sql = 'select pname,qty from spj,p where spj.pno=p.pno and spj.jno=\'j2\''# 连接两个表，查询满足关系的字段，在where语句内要注意参照完整性的表达 12 sql = 'select jno from spj,s where spj.sno=s.sno and not s.city=\'天津\''# 否定形式的语句使用not判断 提取123result = self.cursor.fetchall() print(result) # 将执行后的sql返回值全部提取出来 更新123sql = 'update s set color=\'蓝\' where color=\'红\''self.cursor.execute(sql)# 把s表内的color字段为红的全部修改为蓝 插入123sql = 'insert into spj (sno,jno,pno,qty) values (\'s2\',\'j4\',\'p6\',\'200\')'self.cursor.execute(sql)# 插入语句注意，前面的字段和后面的数据是一一对应的，如果只是插入部分字段数据，一定要把字段和数据对应填写 删除123sql = 'delete from s,spj where sno=\'s2\''self.cursor.execute(sql)# 删除s表中sno为s2的数据 所有的修改后都要执行 db.commit()数据库才会更新当有错误发生时，使用 db.rollback()数据库回滚]]></content>
      <tags>
        <tag>postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scrapy常见错误一]]></title>
    <url>%2F2019%2F03%2F08%2Fscrapy1%2F</url>
    <content type="text"><![CDATA[通用爬虫爬取页面深层链接出现以下错误 1'str' object has no attribute 'iter' 查看css选择器的部分1Rule(LinkExtractor(allow=r'/photo.*',restrict_css='li div a::attr(href)'),callback='parse_item') 解析：scrapy的css提取链接不需要指定属性，如果链接存在于属性href中，则只需要提取包含它的元素a 1Rule(LinkExtractor(allow=r'/photo.*',restrict_css='li div a'),callback='parse_item')]]></content>
      <categories>
        <category>Python</category>
        <category>scrapy</category>
      </categories>
      <tags>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scrapy爬取烂番茄的年度电影榜单]]></title>
    <url>%2F2019%2F03%2F08%2Fspider9%2F</url>
    <content type="text"><![CDATA[分析网页结构后，发现年度电影数据最早到1950年，使用一个for循环对url进行构造源码地址 github 蜘蛛部分123456789101112131415161718192021222324# -*- coding: utf-8 -*-import scrapyfrom rottentomatoes.items import RottentomatoesItemclass TomatoSpider(scrapy.Spider): name = 'tomato' allowed_domains = ['www.rottentomatoes.com'] start_urls = ['https://www.rottentomatoes.com/'] def parse(self, response): datas = response.css('.table tr') for data in datas: item = RottentomatoesItem() item['movieyear'] = response.url.replace('https://www.rottentomatoes.com/top/bestofrt/?year=','') item['rank'] = data.css('td:nth-child(1)::text').extract_first() item['movie'] = str(data.css('td a::text').extract_first()).strip() item['tomatometer'] = str(data.css('.tMeterScore::text').extract_first()).replace('\xa0','') yield item def start_requests(self): base_url = 'https://www.rottentomatoes.com/top/bestofrt/?year=' for page in range(1950,2019): url = base_url + str(page) yield scrapy.Request(url,callback=self.parse) pipeline部分1234567891011121314151617181920212223242526272829303132333435363738394041class pgPipeline(): def __init__(self,host,database,user,password,port): self.host = host self.database = database self.user = user self.password = password self.port = port self.db = psycopg2.connect(host=self.host, user=self.user, password=self.password, database=self.database, port=self.port) self.cursor = self.db.cursor() @classmethod def from_crawler(cls,crawler): return cls( host=crawler.settings.get('SQL_HOST'), database=crawler.settings.get('SQL_DATABASE'), user=crawler.settings.get('SQL_USER'), password=crawler.settings.get('SQL_PASSWORD'), port=crawler.settings.get('SQL_PORT'), ) def open_spider(self,spider): self.db = psycopg2.connect(host=self.host, user=self.user, password=self.password, database=self.database, port=self.port) self.cursor = self.db.cursor() def process_item(self,item,spider): data = item sql = 'insert into tomato(movieyear,rank,movie,tomatometer) values (%s,%s,%s,%s)' try: self.cursor.execute(sql,(data['movieyear'],data['rank'],data['movie'],data['tomatometer'])) self.db.commit() except: self.db.rollback() return item def close_spider(self,spider): self.db.close()]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>scrapy</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scrapy+selenium动态网页抓取]]></title>
    <url>%2F2019%2F03%2F07%2Fspider8%2F</url>
    <content type="text"><![CDATA[scrapy+selenium源代码地址 github 网页解析123456789101112131415161718&lt;div class="l-item"&gt; &lt;div class="l"&gt; &lt;div class="spread-module"&gt; &lt;a href="/video/av2247" target="_blank"&gt; &lt;div class="pic"&gt; &lt;div class="lazy-img"&gt;&lt;img alt="【ドナルド】Dr.McDo-みさおと一緒-" src="//i2.hdslb.com/bfs/archive/364ab57dda0f61015ddb974285bb82e659fc590a.jpg@200w_125h.webp"&gt; &lt;/div&gt;&lt;i class="icon medal "&gt;&lt;/i&gt; &lt;div class="cover-preview-module"&gt;&lt;!----&gt; &lt;div class="progress-bar"&gt;&lt;span style="width: 0%;"&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="mask-video"&gt;&lt;/div&gt; &lt;div class="danmu-module"&gt;&lt;/div&gt; &lt;span class="dur"&gt;01:27&lt;/span&gt; &lt;!----&gt;&lt;!----&gt; &lt;div class="watch-later-trigger w-later"&gt;&lt;/div&gt; &lt;/div&gt; &lt;p title="【ドナルド】Dr.McDo-みさおと一緒-" class="t"&gt;【ドナルド】Dr.McDo-みさおと一緒-&lt;/p&gt;&lt;p class="num"&gt;&lt;span class="play"&gt; 根据网页结构发现渲染的html中信息包含在li节点内部，于是我们使用css选择器进行提取 蜘蛛12345678910111213141516171819202122232425262728293031323334353637383940import scrapyimport jsonfrom kichiku.items import KichikuItemimport selenium.webdriverfrom selenium.webdriver.chrome.options import Optionsclass GuichuSpider(scrapy.Spider): name = 'guichu' allowed_domains = ['www.bilibili.com'] base_url = 'https://www.bilibili.com/v/kichiku/guide/?spm_id_from=333.334.b_7072696d6172795f6d656e75.67#/all/default/0/' def __init__(self): chrome_options = Options() chrome_options.add_argument('--headless') # 指定使用无头的模式 self.driver = selenium.webdriver.Chrome(chrome_options=chrome_options) # def closed(self,spider): # self.driver.close() def parse(self, response): datas = response.css('.vd-list li') for data in datas: item = KichikuItem() item['title'] = data.css('a p::text').extract_first() item['play'] = data.css('.play::text').extract_first() item['danmu'] = data.css('.danmu::text').extract_first() item['up'] = data.css('.up-info a::text').extract_first() item['time'] = data.css('.pic span::text').extract_first() yield item def start_requests(self): for page in range(1,self.settings.get('PAGE')+1): url = self.base_url+str(page) yield scrapy.Request(url=url,callback=self.parse,dont_filter=True) ​ 因为selenium在模拟打开网页的时候总是每次新建一个标签页，并且不会主动关闭浏览器，我们在蜘蛛的init函数中新建一个模拟实体然后定义一个closed函数，在每次爬虫结束的时候关闭浏览器 selenium模拟部分放在middleware.py中 123456class jsmiddleware(object): def process_request(self,request,spider): if request.url != 'https://s1.hdslb.com/bfs/static/jinkela/subchannel/subchannel.a5960552c0624e434750f62452fcdb8a47eb3bf4.js': spider.driver.get(request.url) html = spider.driver.page_source return scrapy.http.HtmlResponse(url=request.url,body=html.encode('utf-8'),encoding='utf-8',request=request) 因为哔哩哔哩在每次渲染的时候会有一个提前加载的哔哩哔哩图标页面，我们用if语句排除这个网址的渲染 反爬虫策略1234567891011121314151617181920212223242526272829303132333435363738394041424344454647SQL_HOST = 'localhost'SQL_USER = 'postgres'SQL_PASSWORD = '123456'SQL_DATABASE = 'spiders'SQL_PORT = '5432'user_agent_list = [\ "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 " "(KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1", "Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 " "(KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11", "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 " "(KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6", "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 " "(KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6", "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 " "(KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 " "(KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5", "Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 " "(KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5", "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 " "(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3", "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 " "(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 " "(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3", "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 " "(KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3", "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 " "(KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3", "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 " "(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3", "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 " "(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3", "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 " "(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3", "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 " "(KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 " "(KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24", "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 " "(KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24" ]USER_AGENT = random.choice(user_agent_list)PAGE = 3000 使用random函数对每次的浏览器头进行伪装，这个还不够，最好使用代理服务器，每次抓取时自动切换服务器 item1234567891011import scrapyfrom scrapy import Fieldclass KichikuItem(scrapy.Item): # define the fields for your item here like: # name = scrapy.Field() title = Field() play = Field() danmu = Field() up = Field() time = Field() 最终的结果保存到数据库中 遇到的问题因为一共有差不多4000多页的数据，scrapy每次请求的次数太多，在爬取到400页的时候就出现了远程服务器拒绝连接的情况，所以降低爬取的线程数，使用代理是最好的办法]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>scrapy</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scrapy统计哔哩哔哩番剧榜单]]></title>
    <url>%2F2019%2F03%2F05%2Fspider7%2F</url>
    <content type="text"><![CDATA[哔哩哔哩番剧榜单源代码地址 github 分析网页源码根据网页链接提取，发现网页使用ajax异步加载数据，找到了对应的接口后发现里面的数据是json，所以使用json模块进行分析 蜘蛛12345678910111213141516171819202122232425262728293031323334353637# -*- coding: utf-8 -*-import scrapyimport jsonfrom bilibili.items import fanItemclass BilibotSpider(scrapy.Spider): name = 'bilibot' allowed_domains = ['www.bilibili.com'] start_urls = ['https://bangumi.bilibili.com/media/web_api/search/result?season_version=-1&amp;area=-1&amp;is_finish=-1&amp;copyright=-1&amp;season_status=-1&amp;season_month=-1&amp;pub_date=-1&amp;style_id=-1&amp;order=3&amp;st=1&amp;sort=0&amp;page=1&amp;season_type=1&amp;pagesize=20'] # def parse(self, response): # data = response.text # print(data) def parse(self,response): jsonBody = json.loads(response.body) result = jsonBody['result'] data = result['data'] for dict in data: modelItem = fanItem() modelItem['title'] = dict['title'] modelItem['follow'] = dict['order']['follow'] modelItem['play'] = dict['order']['play'] try: modelItem['score'] = dict['order']['score'] except Exception : modelItem['score'] = '没有数据' modelItem['cover'] = dict['cover'] yield modelItem # modelItems.append(modelItem) # return modelItems def start_requests(self): base_url = 'https://bangumi.bilibili.com/media/web_api/search/result?season_version=-1&amp;area=-1&amp;is_finish=-1&amp;copyright=-1&amp;season_status=-1&amp;season_month=-1&amp;pub_date=-1&amp;style_id=-1&amp;order=3&amp;st=1&amp;sort=0&amp;page=' for i in range(1,self.settings.get('MAX_PAGE')+1): url = base_url + str(i) + '&amp;season_type=1&amp;pagesize=20' yield scrapy.Request(url,callback=self.parse) item1234567891011121314import scrapyfrom scrapy import Fieldclass BilibiliItem(scrapy.Item): # define the fields for your item here like: # name = scrapy.Field() passclass fanItem(scrapy.Item): title = Field() # 名字 follow = Field() # 追番 play = Field() # 播放量 score = Field() # 评分 cover = Field() # 封面 数据库连接12345678910111213141516171819202122232425262728293031323334353637383940class pgPipeline(): def __init__(self,host,database,user,password,port): self.host = host self.database = database self.user = user self.password = password self.port = port self.db = psycopg2.connect(host=self.host, user=self.user, password=self.password, database=self.database, port=self.port) self.cursor = self.db.cursor() @classmethod def from_crawler(cls,crawler): return cls( host=crawler.settings.get('SQL_HOST'), database=crawler.settings.get('SQL_DATABASE'), user=crawler.settings.get('SQL_USER'), password=crawler.settings.get('SQL_PASSWORD'), port=crawler.settings.get('SQL_PORT'), ) def open_spider(self,spider): self.db = psycopg2.connect(host=self.host, user=self.user, password=self.password, database=self.database, port=self.port) self.cursor = self.db.cursor() def process_item(self,item,spider): data = item sql = 'insert into fanju (番剧,追番人数, 播放量,评分,封面) values (%s,%s,%s,%s,%s)' try: self.cursor.execute(sql,(data['title'],data['follow'],data['play'],data['score'],data['cover'])) self.db.commit() except: self.db.rollback() return item def close_spider(self,spider): self.db.close() 问题分析：部分番剧没有评分或者观看记录，在使用json提取数据的时候使用try语句进行提取返回错误时直接对字典的键赋值为“null”]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scrapy爬取考研成绩分数线]]></title>
    <url>%2F2019%2F03%2F03%2Fspider6%2F</url>
    <content type="text"><![CDATA[github源代码：github 蜘蛛部分123456789101112131415161718192021222324import scrapyfrom kaoyan.items import KaoyanItemclass KaoyanlineSpider(scrapy.Spider): name = 'kaoyanline' allowed_domains = ['www.kaoshidian.com'] start_urls = ['http://www.kaoshidian.com/kaoyan/fs-13-0-0-0-0.html'] def parse(self, response): html = response.css('tr') for data in html: item = KaoyanItem() item['years'] = data.css('td[class="tc"]::text').extract_first() item['school'] = data.css('td[class="tc"]:nth-child(2) a::text').extract_first() item['cate'] = data.css('td[class="tc"]:nth-child(3)::text').extract_first() item['profession'] =data.css('td[class="tc"]:nth-child(5) a::text').extract_first() item['score'] = data.css('td[class="tc"]:nth-child(6)::text').extract_first() yield item def start_requests(self): base_url = 'http://www.kaoshidian.com/kaoyan/fs-13-0-0-0-' for page in range(1,self.settings.get('MAX_PAGE')+1): url = base_url + str(page) + '.html' yield scrapy.Request(url,self.parse) item部分123456789import scrapyfrom scrapy import Fieldclass KaoyanItem(scrapy.Item): years = Field() school = Field() cate = Field() profession = Field() score = Field() pipeline部分1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import psycopg2class KaoyanPipeline(object): def process_item(self, item, spider): return itemclass pgPipeline(): def __init__(self,host,database,user,password,port): self.host = host self.database = database self.user = user self.password = password self.port = port self.db = psycopg2.connect(host=self.host, user=self.user, password=self.password, database=self.database, port=self.port) self.cursor = self.db.cursor() @classmethod def from_crawler(cls,crawler): return cls( host=crawler.settings.get('SQL_HOST'), database=crawler.settings.get('SQL_DATABASE'), user=crawler.settings.get('SQL_USER'), password=crawler.settings.get('SQL_PASSWORD'), port=crawler.settings.get('SQL_PORT'), ) def open_spider(self,spider): self.db = psycopg2.connect(host=self.host, user=self.user, password=self.password, database=self.database, port=self.port) # 先新建一个表格存放大学排名 self.cursor = self.db.cursor() def process_item(self,item,spider): data = item sql = 'insert into score (years,school,cate,profession,score) values (%s,%s,%s,%s,%s)' try: self.cursor.execute(sql,(data['years'],data['school'],data['cate'],data['profession'],data['score'])) self.db.commit() except: self.db.rollback() return item def close_spider(self,spider): self.db.close() settings部分123456789USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119\ Safari/537.36'MAX_PAGE = 344SQL_HOST = 'localhost'SQL_USER = 'postgres'SQL_PASSWORD = '123456'SQL_DATABASE = 'spiders'SQL_PORT = '5432']]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>scrapy</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[postgresql的使用]]></title>
    <url>%2F2019%2F03%2F03%2Fpostgresql1%2F</url>
    <content type="text"><![CDATA[PostgreSQLpostgresql是目前使用最多的功能最完善的开源数据库拥有比mysql更加友好的操作体验 下载：官网使用自带的管理界面服务器pgadmin4操作数据库]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scrapy中的css选择器的使用]]></title>
    <url>%2F2019%2F03%2F02%2Fcss1%2F</url>
    <content type="text"><![CDATA[Scrapy提供两种选择器分析网页的源代码xpath和css因为css的高效简单，我大部分时间使用css分析简单的网页结构，xpath适合分析网页结构更为复杂的页面 使用方法.css(&#39;选择器语句&#39;).extract() 注意extract提取的返回是列表，extract_first提取的是其中的第一项 css选择器 选择器 实例 解释 .class .name 选择类名name的节点后的所有元素 #id #name 选择id为name的节点后的所有内容 .class a .name a 选择class为name后的所有a节点 a div a div 选择a节点后的所有div节点 a[title] a[title] 选择属性含有title的所有a节点 a::text a::text 提取a节点内的文字 a::attr(href) a::attr(href) 提取a节点内的href属性的文字 :nth-child(n) a:nth-child(2) 提取第二个a节点 :nth-child(2n) a:nth-child(2n) 提取2的倍数的a节点 * a* 提取a后面的所有元素]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scrapy爬取世界500强大学排名]]></title>
    <url>%2F2019%2F03%2F02%2Fspider5%2F</url>
    <content type="text"><![CDATA[环境：python3.7github源代码地址：github 蜘蛛部分123456789101112131415161718192021222324252627282930# -*- coding: utf-8 -*-import scrapyfrom rank.items import RankItemclass UnirankSpider(scrapy.Spider): name = 'unirank' allowed_domains = ['http://www.shanghairanking.com'] start_urls = ['http://www.shanghairanking.com/ARWU2018.html'] def parse(self, response): # with open('1.html','w',encoding='utf-8')as f: # f.write(response.text) campus = response.css('tr') # campus1 = response.css('.bgf5') for data in campus: item = RankItem() item['years'] = str(response.url).replace('http://www.shanghairanking.com/ARWU','').replace('.html','') item['ranks'] = data.css('td::text').extract_first() item['uni'] = data.css('.left a::text').extract_first() item['location'] = data.css('td a::attr(title)').extract_first() item['score']= data.css('td:nth-child(9) div::text').extract_first() yield item def start_requests(self): base_url = 'http://www.shanghairanking.com/ARWU' for i in range(1,self.settings.get('YEAR')+1): parse = 2019-i url = base_url+str(parse)+'.html' yield scrapy.Request(url,self.parse) item部分1234567891011import scrapyfrom scrapy import Fieldclass RankItem(scrapy.Item): # define the fields for your item here like: # name = scrapy.Field() years = Field() ranks = Field() uni = Field() location = Field() score = Field() pipeline部分1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import pymysqlclass RankPipeline(object): def process_item(self, item, spider): return itemclass MysqlPipeline(): def __init__(self,host,database,user,password,port): self.host = host self.database = database self.user = user self.password = password self.port = port self.db = pymysql.connect(self.host, self.user, self.password, self.database, port=self.port) self.cursor = self.db.cursor() @classmethod def from_crawler(cls,crawler): return cls( host=crawler.settings.get('MYSQL_HOST'), database=crawler.settings.get('MYSQL_DATABASE'), user=crawler.settings.get('MYSQL_USER'), password=crawler.settings.get('MYSQL_PASSWORD'), port=crawler.settings.get('MYSQL_PORT'), ) def open_spider(self,spider): self.db = pymysql.connect(self.host, self.user, self.password, self.database, port=self.port) # 先新建一个表格存放大学排名 self.cursor = self.db.cursor() # sql = 'create table if not exists unirank(years varchar(255) not null,ranks varchar(255) not null,uni \ # varchar(255) not null,location varchar(255) not null,score varchar(255) not null,primary key(years,uni))' # self.cursor.execute(sql) def process_item(self,item,spider): data = item sql = 'insert into unirank (years,ranks,uni,location,score) values (%s,%s,%s,%s,%s)' self.cursor.execute(sql,(data['years'],data['ranks'],data['uni'],data['location'],data['score'])) self.db.commit() return item def close_spider(self,spider): self.db.close() settings12345678910USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119\ Safari/537.36'MYSQL_HOST = 'localhost'MYSQL_USER = 'root'MYSQL_PASSWORD = '123456'MYSQL_PORT = 3306MYSQL_DATABASE = 'spiders'YEAR = 10 # 爬取10年的数据 爬取结果]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scrapy实现京东商城爬虫]]></title>
    <url>%2F2019%2F03%2F02%2Fspider4%2F</url>
    <content type="text"><![CDATA[Python3.7github源码地址：github 蜘蛛部分123456789101112131415161718192021222324252627282930# -*- coding: utf-8 -*-'''对京东的商品爬取尝试对一个关键字列表进行遍历，获取其对应的全部商品信息'''import scrapyfrom jd.items import shopItemfrom scrapy import Requestclass JdspiderSpider(scrapy.Spider): name = 'jdspider' allowed_domains = ['jd.com'] start_urls = ['https://search.jd.com/Search?keyword=iphone&amp;enc=utf-8&amp;wq=iphone&amp;page='] def parse(self, response): with open('1.html','w',encoding='utf-8')as f: f.write(response.text) goods = response.css('.gl-item') for shop in goods: item = shopItem() item['title'] = shop.css('.p-name-type-2 a em::text').extract_first() item['img'] = shop.css('.p-img img::attr(source-data-lazy-img)').extract_first() item['colors'] = shop.css('.ps-item a::attr(title)').extract_first() item['price'] = shop.css('.p-price i::text').extract_first() yield item def start_requests(self): base_url = 'https://search.jd.com/Search?keyword=iphone&amp;enc=utf-8&amp;wq=iphone&amp;page=' for page in range(1,self.settings.get('MAX_PAGE')+1): url = base_url+str(page) yield Request(url,self.parse) # 递归 item部分12345678910111213import scrapyfrom scrapy import Item,Fieldclass JdItem(scrapy.Item): # define the fields for your item here like: # name = scrapy.Field() passclass shopItem(Item): title = Field() img = Field() colors = Field() price = Field() pipelines部分12345678910111213141516171819202122232425262728293031323334353637383940414243import pymysqlfrom scrapy.exceptions import DropItemfrom scrapy import Requestclass JdPipeline(object): def process_item(self, item, spider): return itemclass MysqlPipeline(): def __init__(self,host,database,user,password,port): self.host = host self.database = database self.user = user self.password = password self.port = port self.db = pymysql.connect(self.host, self.user, self.password, self.database, port=self.port) self.cursor = self.db.cursor() @classmethod def from_crawler(cls,crawler): return cls( host=crawler.settings.get('MYSQL_HOST'), database=crawler.settings.get('MYSQL_DATABASE'), user=crawler.settings.get('MYSQL_USER'), password=crawler.settings.get('MYSQL_PASSWORD'), port=crawler.settings.get('MYSQL_PORT'), ) def open_spider(self,spider): self.db = pymysql.connect(self.host, self.user, self.password, self.database, port=self.port) self.cursor = self.db.cursor() def process_item(self,item,spider): data = item sql = 'insert ignore into jd (标题,颜色,图片,价格) values (%s,%s,%s,%s)' self.cursor.execute(sql,(data['title'],data['colors'],data['img'],data['price'])) self.db.commit() return item def close_spider(self,spider): self.db.close() settings部分1234567891011121314151617181920BOT_NAME = 'jd'SPIDER_MODULES = ['jd.spiders']NEWSPIDER_MODULE = 'jd.spiders'ROBOTSTXT_OBEY = FalseITEM_PIPELINES = &#123; 'jd.pipelines.JdPipeline': 300, 'jd.pipelines.MysqlPipeline': 301,&#125;USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119\ Safari/537.36'MYSQL_HOST = 'localhost'MYSQL_USER = 'root'MYSQL_PASSWORD = '123456'MYSQL_PORT = 3306MYSQL_DATABASE = 'spiders'MAX_PAGE = 100 # 限制抓取页数]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>scrapy</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql语法常见错误]]></title>
    <url>%2F2019%2F03%2F02%2Fpymysql3%2F</url>
    <content type="text"><![CDATA[有时候会遇到但是不易发现的错误1064 sql语法错误如果检查语句没有问题，但是一直报错，那么检查表名和字段名可能与mysql自带的关键字重复，例如year，rank 字段重复问题提示PRIMARY KEY重复的错误，因为mysql不允许重复主键，定义多个主键使可以单独区分出一条记录即可 提示字段拼接错误，没有对应的字段检查values中的字段与表内的字段数目是否一致 提示插入的数据不符合执行sql语句后面附加的参数是一个元组( )的形式，传入时要么使用format定义了元组的顺序，要么在元组中按顺序排放数据]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pandas的loc，iloc函数]]></title>
    <url>%2F2019%2F03%2F01%2Fpy6%2F</url>
    <content type="text"><![CDATA[pandas基础pandas的loc函数12345678910# loc函数用于使用标题索引行列# 当为连续的行列时.loc['行','列'].loc[:,'A':'B'] # 索引AB列.loc['a':'b',:] # 索引ab行.loc['a':'b','A':'B'] # 索引ab行和AB列#当不连续的行列时.loc[['c':'f'],['C':'F']] # 取c到f行 C到F列.loc[['c','f'],['C','F']] # 取c和f行 C和F列# 注意区分：和，的区别 pandas的iloc函数12345# 使用行号列号进行索引注意起始位为0.iloc[:,0:2] # 取前两列.iloc[0:2,:] # 取前两行# 不连续时.iloc[[0,2],[0,3] # 取1,3行 1,4列]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python文件读取]]></title>
    <url>%2F2019%2F02%2F28%2Fpy5%2F</url>
    <content type="text"><![CDATA[Python的文件处理1使用with open()方法打开csv文件时出现多余空行 12# 使用附加参数newlinewith open('1.csv',newline='') 因为在unix系统中的换行符和windows系统下的换行符号不同 python默认处理的时候使用LF的方式打开，windows下的换行符为CRLF所以会出现多余一行的现象]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python中的字符串处理]]></title>
    <url>%2F2019%2F02%2F28%2Fpy4%2F</url>
    <content type="text"><![CDATA[常用的python对于字符串处理.format1234567# 用于格式化字符串"&#123;0&#125;&#123;1&#125;&#123;0&#125;".format('i','love','u')&gt;&gt;&gt; ilovei&#123;0:d&#125; #格式化为整数&#123;0:s&#125; #格式化为字符串&#123;0:3f&#125; #保留到小数点后三位浮点数# 分号： 是用来分隔字符和格式化符的 .join1234# 用于拼接符号','.join('i','love','u')&gt;&gt;&gt; i,love,u# 使用，来拼接字符串 .split123# 用于分割字符串'''ilove'''.split() # 默认使用空格分割''''''.split(',',2) # 使用逗号分割，分割两次，即拆分为3个字符串 .strip12345# 删除不需要的字符''.strip() # 删除两侧的空格.rstrip() # 删除右侧的空格.lstrip()# 删除左侧的空格.strip('$') # 传入参数，删除$]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[win10解决字体发虚的问题]]></title>
    <url>%2F2019%2F02%2F28%2Fwin10-font%2F</url>
    <content type="text"><![CDATA[适用于1809版本前对于部分软件在win10平台的字体发虚的问题解决办法： intel集成显卡 在3D设置中关闭抗锯齿效果英伟达显卡对于特定的软件覆盖全局设置，关闭抗锯齿效果对于特定的软件进入设置关闭其中的硬件加速选项]]></content>
      <tags>
        <tag>win10</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pymysql操作表插入数据]]></title>
    <url>%2F2019%2F02%2F21%2Fpymysql2%2F</url>
    <content type="text"><![CDATA[字符串操作基础join()方法12345str.join(data) # 常用来拼接，指定data数据用什么str连接data = &#123;"1","2","3"&#125;str = ','print(str.join(data))# 输出结果应为1,2,3 format()方法123# 用来格式化字符串&#123;0&#125;&#123;1&#125;&#123;0&#125;.format('hello','world')# 结果为hello world hello 12# 用来传入参数str = '名字:&#123;name&#125;,年龄:&#123;age&#125;'format(name='landers',age='2') tuple()方法12345678# 操作列表转化为元组list = [1,2,3,4]m = tuple(data)print(m) # (1,2,3,4)dict = &#123;1:2,3:4&#125;m = tuple(dict)# (1,3) 返回key值 Mysql插入数据使用传统插入方法123456789101112131415161718192021import pymsqlcode = [&#123; 'name':'github', 'count':'landers1037', 'pass':'2333' &#125;]# sql = 'CREATE TABLE IF NOT EXISTS code(名称 VARCHAR(100) NOT NULL,账户 VARCHAR(100) NOT NULL,密码 VARCHAR(100) NOT NULL\# ,PRIMARY KEY (名称))'# cursor.execute(sql)print('database created')sql = 'insert into code(名称, 账户, 密码) values (%s,%s,%s)'try: for i in range(0,len(code)): data = code[i] # print(data) cursor.execute(sql,(data['name'],data['count'],data['pass'])) db.commit() # 这句话别忘了except Exception as e: print(e.args) db.rollback()db.close() 以上方法是把一个元组传入到数据库中这样适合数据格式固定的数据存储 使用字典动态传入数据12345678910111213data = &#123; 'id':'201901', 'name':'landers', 'age':'2'&#125;table = 'student'keys = ','.join(data.keys())values = ','.join([%s]*len(data))sql = 'insert into &#123;table&#125;(&#123;keys&#125;) values(&#123;values&#125;)'.format(table=table,keys=keys,values=values)cursor.execute(sql,tuple(data.values()))db.commit()db.close() 针对mysql的禁止数据重复的报错1234insert into # 传统插入 不能插入重复的数据insert ignore into # 忽略重复插入insert into ***表 键 值***on duplicate key update # 如果主键存在就更新里面的数据replace into # 如果数据之前存在就替换]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pymysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python中的json数据]]></title>
    <url>%2F2019%2F02%2F20%2Fjson%2F</url>
    <content type="text"><![CDATA[json数据什么是 JSON ？ JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation） JSON 是轻量级的文本数据交换格式 JSON 独立于语言 * JSON 具有自我描述性，更易理解 * JSON 使用 JavaScript 语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 python中对json的读取123import jsonfile = open('test.json','r',encoding='utf-8')json.load(file,ensure_ascii=False) python中对json的写入123import jsonwith open('list.json','w',encoding='utf-8')as file: file.write(json.dumps(list,indent=2,ensure_ascii=False)) dump和dumps区别load和loads的区别12345678import jsona = &#123;"num":"12"&#125; #这是一个字典b = json.dumps(a) #把字典转化为strc = b #这是一个字符串d = json.loads(c) #把字符串转为字典fp = open('1.json','r')e = json.load(fp) #dump,load属于文件操作还需要传入参数,不是简单的只有json对象 注意json里有中文的时候，需要传入参数ensure_ascii=False，否则会报错]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pymysql基础操作]]></title>
    <url>%2F2019%2F02%2F18%2Fpymysql1%2F</url>
    <content type="text"><![CDATA[pymysql操作创建新的数据库12sql = 'CREATE DATABASE spiders DEFAULT CHARACTER SET utf-8'cursor.execute(sql) 创建新的表12345678910111213141516# pymysqlimport pymysql# 前提 我已经建立好了一个名为spiders的数据库，里面有一个表为student# connect databasedb = pymysql.connect(host='localhost',user='root',password='123456',port=3306,db='spiders')cursor = db.cursor() # 操作的游标cursor.execute('select version()') # 执行sql语句的方法data = cursor.fetchone() # 获取第一行的数据 就是版本号print('版本号', data)# 将爬虫爬取的租房信息存储到数据库中sql = 'CREATE TABLE IF NOT EXISTS house (location VARCHAR(255) NOT NULL,detail VARCHAR (255) NOT NULL,price INT NOT NULL\ ,PRIMARY KEY (location))'cursor.execute(sql)# 添加多条数据在数据库中db.close() 建立后就会发现在spider数据库下多出了一张表 1pymysql.err.InternalError: (1046, 'No database selected') 出现这种错误，表明本地没有这个数据库]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>pymysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python图片资源处理]]></title>
    <url>%2F2019%2F02%2F17%2Fpy3%2F</url>
    <content type="text"><![CDATA[python图片资源的处理转化为png.py文件加载123456789101112131415161718192021import base64 def pic2py(picture_name): """ 将图像文件转换为py文件 :param picture_name: :return: """ open_pic = open("%s" % picture_name, 'rb') b64str = base64.b64encode(open_pic.read()) open_pic.close() # 注意这边b64str一定要加上.decode() write_data = 'img = "%s"' % b64str.decode() f = open('%s.py' % picture_name.replace('.', '_'), 'w+') f.write(write_data) f.close() if __name__ == '__main__': pics = ["one.png", "two.png"] for i in pics: pic2py(i) 在文件中引用123456from png import img as one...tmp = open('one.png', 'wb')tmp.write(base64.b64decode(one))tmp.close()os.remove(‘one.png’)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python入门 字符处理]]></title>
    <url>%2F2019%2F02%2F17%2Fpy2%2F</url>
    <content type="text"><![CDATA[常见的编码问题中文字符中文字符属于GBK编码字符集，在爬虫保存的时候数据一般保存为utf-8的形式，这个时候文件里的中文会出现乱码，通常使用以下的几种办法解决 123456789101112# 把utf-8保存为gbk格式def ReadFile(filePath,encoding="utf-8"): with codecs.open(filePath,"r",encoding) as f: return f.read() #通过utf-8格式读取文件def WriteFile(filePath,u,encoding="gbk"): with codecs.open(filePath,"w",encoding) as f: f.write(u) #文件保存为gbkdef UTF8_to_GBK(src,dst): content = ReadFile(src,encoding="utf-8") WriteFile(dst,content,encoding="gbk") 不想通过读取的方式转换可以直接把数据保存为gbk的格式通常转码的时候会遇到的错误 1UnicodeEncodeError: 'gbk' codec can't encode character u'\xa0' in position 4813: illegal multibyte sequence 使用编码gbk超集解决 12encoding=gkb18030error='igonre' ascii码123ord('a') # 返回字母a的asciichr(100) # 返回100 int对应的字符unichr(100) # 返回对应的unicode]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql最全的配置教程]]></title>
    <url>%2F2019%2F02%2F14%2Fmysql1%2F</url>
    <content type="text"><![CDATA[在安装mysql中遇到各种问题cmd输入密码无法连接数据库12Enter password: ********ERROR 1045 (28000): Access denied for user 设置数据库的配置文件my.ini 1234567891011121314151617[mysql]# 设置mysql客户端默认字符集default-character-set=utf8 [mysqld]#设置3306端口port = 3306 # 设置mysql的安装目录basedir=C:/Program Files/MySQL/MySQL Server 8.0# 设置mysql数据库的数据的存放目录datadir=C:/Program Files/MySQL/MySQL Server 8.0/data# 允许最大连接数max_connections=200# 服务端使用的字符集默认为8比特编码的latin1字符集character-set-server=utf8# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB#skip_grant_tables 结尾添加skip_grant_tables重新打开cmd输入 123# 先关闭mysql服务net stop mysqlmysql -u root -p 123456789101112# 提示输入密码直接按回车# 使用sql语句use mysql;# 第一种重置密码的方法UPDATE user SET password=PASSWORD(‘123456’)WHERE user=’root’; flush privileges;# 第二种重置密码的方法update user set authentication_string=password(&quot;123456&quot;) where user=&quot;root&quot;;# 第三种重置密码的方法ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;;# 第四种重置密码的方法SET PASSWORD = &apos;123456&apos;; 设置成功后打开mysql服务 1net start mysql Navicat无法连接数据库mysql5.8以上的版本因为密码的保存机制发生了变化所以不能使用传统的验证方式登录数据库 1234567mysql -u root -p# 输入你的密码mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;password&apos; PASSWORD EXPIRE NEVER;Query OK, 0 rows affected (0.10 sec)# 重置密码为123ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;123&apos;;FLUSH PRIVILEGES; # 刷新权限]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[wordcloud制作词云]]></title>
    <url>%2F2019%2F02%2F14%2Fwordcloud%2F</url>
    <content type="text"><![CDATA[注意事项：结巴库是中文分词，原理是把gbk编码转换为utf-8，所以导入的文本一定要是gbk编码，否则会出现编码错误 1234567891011121314151617181920212223242526import jiebaimport wordcloudimport matplotlib.pyplot as plttxt = open('./txt.txt', 'r').read()words_ls = jieba.cut(txt, cut_all=True)words_split = " ".join(words_ls)wc = wordcloud.WordCloud( width=800, height=600, background_color="#ffffff", # 设置背景颜色 max_words=500, # 词的最大数（默认为200） max_font_size=60, # 最大字体尺寸 min_font_size=10, # 最小字体尺寸（默认为4） colormap='bone', # string or matplotlib colormap, default="viridis" random_state=10, # 设置有多少种随机生成状态，即有多少种配色方案 mask=plt.imread("x.jpg"), # 读取遮罩图片！！ font_path='simhei.ttf')my_wordcloud = wc.generate(words_split)plt.imshow(my_wordcloud)plt.axis("off")plt.show()# wc.to_file('zzz.png') # 保存图片文件]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>wordcloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pycharm破解文件 & mysql可视化管理等]]></title>
    <url>%2F2019%2F02%2F13%2Fdownload2%2F</url>
    <content type="text"><![CDATA[Pycharm的激活文件（支持2018.3.4之前的版本）：百度网盘 Navicat for MySQL：百度网盘 密码：2cbr exe4j jar打包程序（64位虚拟机）：百度网盘 密码：5ed8 IDM下载器注册版：百度网盘 密码：paiw]]></content>
      <categories>
        <category>资源下载</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ps插件 & 游戏平台工具]]></title>
    <url>%2F2019%2F02%2F13%2Fdownload1%2F</url>
    <content type="text"><![CDATA[photoshop cc系列ico文件制作插件：百度网盘 steam，origin等CDN切换：百度网盘 密码：5i66 host主机切换工具：百度网盘 密码：35xc]]></content>
      <categories>
        <category>资源下载</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[centOS从入门到放弃]]></title>
    <url>%2F2019%2F02%2F12%2Fcentos%2F</url>
    <content type="text"><![CDATA[再也不碰linux 安装CentOS虚拟机对Linux系统进行配置使用简单的命令语句centos不允许使用root用户登录所以终端的指令有两种用户：普通用户和root使用su进入root账户，输入root密码即可进行权限操作 简单的权限操作12chown或者chmod usrname my #usrname是你的用户名，my是你要修改的文件夹chown或者chmod -R usrname my #将权限应用到子文件目录 简单的cd操作123#在想要指向的文件夹下使用终端即可进入文件夹cd #即可回到根目录cd.. #回到父目录 安装python3.7环境 在linux里python3.7以上的版本需要使用另外的依赖库否则会出现安装缺少module的问题首先安装依赖库 1yum install libffi-devel -y 然后安装组件 12yum -y groupinstall "Development tools"yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel 下载python3.7 1wget https://www.python.org/ftp/python/3.7.1/Python-3.7.1.tar.xz 建立一个空文件夹安装python 1mkdir /usr/local/python3 安装 1234tar -xvJf Python-3.7.1.tar.xzcd Python-3.7.1./configure --prefix=/usr/local/python3make &amp;&amp; make install 使用root创建软连接 12ln -s /usr/local/python3/bin/python3 /usr/bin/python3ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 命令行输入python3测试 添加桌面图标使用下面命令创建一个desktop文件 1gedit /home/用户名/Desktop/xxx.desktop #中文系统路径是桌面不是desktop 使用编辑器打开修改内容 123456789101112[Desktop Entry]Version=1.0Encoding=UTF-8Name=pycharmType=ApplicationTerminal=falseName[en_US]=pycharmExec=pycharm脚本文件的路径.sh文件Comment=pycharmGenericName[en_US]=Icon=图标的路径# 注意所有的语句后面不能有空格]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[selenium自动测试3]]></title>
    <url>%2F2019%2F02%2F09%2Fselenium3%2F</url>
    <content type="text"><![CDATA[环境：py3.7 selenium选项卡的管理1234567891011import timefrom selenium import webdriverbrowser=webdriver.Chrome()browser.get('https://www.baidu.com')browser.execute_script('window.open()')print(browser.window_handles)browser.switch_to_window(browser.window_handles[1])browser.get('https://www.taobao.com')time.sleep(2)browser.switch_to_window(browser.window_handles[0]) 我们打开两个网页并且在两个选项卡之间切换解释器有一句提示123456D:\Python3.7\python.exe D:/PyCharmProject/pylearn1/5/sele8.py['CDwindow-43E60C0E5F0F40D681C031FD97565C7C', 'CDwindow-11F12BB1C815706EAC8AB211D6A7BA53']D:/PyCharmProject/pylearn1/5/sele8.py:9: DeprecationWarning: use driver.switch_to.window instead browser.switch_to_window(browser.window_handles[1])D:/PyCharmProject/pylearn1/5/sele8.py:12: DeprecationWarning: use driver.switch_to.window instead browser.switch_to_window(browser.window_handles[0]) 可见selenium库的函数有些许变化改变标签建议使用driver.switch_to.window 异常处理1234567891011121314# 异常处理from selenium import webdriverfrom selenium.common.exceptions import NoSuchElementException,TimeoutExceptionbrowser=webdriver.Chrome()browser.get('https://www.baidu.com')try: browser.find_element_by_id('hello')except TimeoutException: print('time out')except NoSuchElementException: print('no such element')finally: browser.close()]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[selenium自动测试2]]></title>
    <url>%2F2019%2F02%2F09%2Fselenium2%2F</url>
    <content type="text"><![CDATA[模拟浏览器的前进后退1234567891011import timefrom selenium import webdriverbrowser=webdriver.Chrome()browser.get('https://www.taobao.com')browser.get('https://www.baidu.com')browser.get('https://www.zhihu.com')browser.back()time.sleep(1)browser.forward() 模仿获取修改cookie123456789101112# cookiesimport timefrom selenium import webdriverbrowser=webdriver.Chrome()browser.get('https://www.zhihu.com/explore')print(browser.get_cookies())browser.add_cookie(&#123;'name':'name','domain':'www.zhihu.com','value':'germey'&#125;)print(browser.get_cookies())browser.delete_all_cookies()print(browser.get_cookies()) 结果 1234D:\Python3.7\python.exe D:/PyCharmProject/pylearn1/5/sele7.py[&#123;'domain': '.zhihu.com', 'httpOnly': False, 'name': 'l_n_c', 'path': '/', 'secure': False, 'value': '1'&#125;, &#123;'domain': 'www.zhihu.com', 'expiry': 1549705680.884314, 'httpOnly': False, 'name': 'tgw_l7_route', 'path': '/', 'secure': False, 'value': 'f2979fdd289e2265b2f12e4f4a478330'&#125;, &#123;'domain': '.zhihu.com', 'expiry': 1549706584, 'httpOnly': False, 'name': '__utmb', 'path': '/', 'secure': False, 'value': '51854390.0.10.1549704784'&#125;, &#123;'domain': '.zhihu.com', 'expiry': 1644312780.88437, 'httpOnly': False, 'name': 'q_c1', 'path': '/', 'secure': False, 'value': 'b81c79e2c604431d856561e9bd072f4a|1549704811000|1549704811000'&#125;, &#123;'domain': 'www.zhihu.com', 'httpOnly': False, 'name': '_xsrf', 'path': '/', 'secure': False, 'value': '6524dc593f67c2fc75a0daa912d3ad69'&#125;, &#123;'domain': '.zhihu.com', 'expiry': 1552296780.884404, 'httpOnly': False, 'name': 'r_cap_id', 'path': '/', 'secure': False, 'value': '"ZGI4MTM3YmVkN2NjNGQ2NmI1Y2Q0ODQ0MjNmZGMxYTQ=|1549704811|288662099f8ab872df144b6afac66eab0fa6f5bd"'&#125;, &#123;'domain': '.zhihu.com', 'expiry': 1552296780.884425, 'httpOnly': False, 'name': 'cap_id', 'path': '/', 'secure': False, 'value': '"MGJjNzFiMTE5ZGVhNGVlMDhjNTM1YTU0N2NiNzM4OTA=|1549704811|bbd5b33faa33b55f1eaf911585a94767c974d511"'&#125;, &#123;'domain': '.zhihu.com', 'expiry': 1552296780.884445, 'httpOnly': False, 'name': 'l_cap_id', 'path': '/', 'secure': False, 'value': '"NTg1YTRiY2NhOWYyNDIwMmE5MGE4YTkyMTNjMzI1MjI=|1549704811|9a78db62999d39161a5a9150d69fcabbfe2b02c1"'&#125;, &#123;'domain': '.zhihu.com', 'httpOnly': False, 'name': 'n_c', 'path': '/', 'secure': False, 'value': '1'&#125;, &#123;'domain': '.zhihu.com', 'expiry': 1644312783.696351, 'httpOnly': False, 'name': 'd_c0', 'path': '/', 'secure': False, 'value': '"AIAjkGJ69A6PTtudL-q7P8p60dqmgl53jjc=|1549704813"'&#125;, &#123;'domain': '.zhihu.com', 'expiry': 1612776783, 'httpOnly': False, 'name': '_zap', 'path': '/', 'secure': False, 'value': '227b4bf9-0c06-41bf-a50d-37c90f02fb40'&#125;, &#123;'domain': '.zhihu.com', 'expiry': 1612776784, 'httpOnly': False, 'name': '__utma', 'path': '/', 'secure': False, 'value': '51854390.808437234.1549704784.1549704784.1549704784.1'&#125;, &#123;'domain': '.zhihu.com', 'httpOnly': False, 'name': '__utmc', 'path': '/', 'secure': False, 'value': '51854390'&#125;, &#123;'domain': '.zhihu.com', 'expiry': 1565472784, 'httpOnly': False, 'name': '__utmz', 'path': '/', 'secure': False, 'value': '51854390.1549704784.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none)'&#125;, &#123;'domain': '.zhihu.com', 'expiry': 1612776784, 'httpOnly': False, 'name': '__utmv', 'path': '/', 'secure': False, 'value': '51854390.000--|3=entry_date=20190209=1'&#125;][&#123;'domain': '.zhihu.com', 'httpOnly': False, 'name': 'l_n_c', 'path': '/', 'secure': False, 'value': '1'&#125;, &#123;'domain': 'www.zhihu.com', 'expiry': 1549705680.884314, 'httpOnly': False, 'name': 'tgw_l7_route', 'path': '/', 'secure': False, 'value': 'f2979fdd289e2265b2f12e4f4a478330'&#125;, &#123;'domain': '.zhihu.com', 'expiry': 1549706584, 'httpOnly': False, 'name': '__utmb', 'path': '/', 'secure': False, 'value': '51854390.0.10.1549704784'&#125;, &#123;'domain': '.zhihu.com', 'expiry': 1644312780.88437, 'httpOnly': False, 'name': 'q_c1', 'path': '/', 'secure': False, 'value': 'b81c79e2c604431d856561e9bd072f4a|1549704811000|1549704811000'&#125;, &#123;'domain': 'www.zhihu.com', 'httpOnly': False, 'name': '_xsrf', 'path': '/', 'secure': False, 'value': '6524dc593f67c2fc75a0daa912d3ad69'&#125;, &#123;'domain': '.zhihu.com', 'expiry': 1552296780.884404, 'httpOnly': False, 'name': 'r_cap_id', 'path': '/', 'secure': False, 'value': '"ZGI4MTM3YmVkN2NjNGQ2NmI1Y2Q0ODQ0MjNmZGMxYTQ=|1549704811|288662099f8ab872df144b6afac66eab0fa6f5bd"'&#125;, &#123;'domain': '.zhihu.com', 'expiry': 1552296780.884425, 'httpOnly': False, 'name': 'cap_id', 'path': '/', 'secure': False, 'value': '"MGJjNzFiMTE5ZGVhNGVlMDhjNTM1YTU0N2NiNzM4OTA=|1549704811|bbd5b33faa33b55f1eaf911585a94767c974d511"'&#125;, &#123;'domain': '.zhihu.com', 'expiry': 1552296780.884445, 'httpOnly': False, 'name': 'l_cap_id', 'path': '/', 'secure': False, 'value': '"NTg1YTRiY2NhOWYyNDIwMmE5MGE4YTkyMTNjMzI1MjI=|1549704811|9a78db62999d39161a5a9150d69fcabbfe2b02c1"'&#125;, &#123;'domain': '.zhihu.com', 'httpOnly': False, 'name': 'n_c', 'path': '/', 'secure': False, 'value': '1'&#125;, &#123;'domain': '.zhihu.com', 'expiry': 1644312783.696351, 'httpOnly': False, 'name': 'd_c0', 'path': '/', 'secure': False, 'value': '"AIAjkGJ69A6PTtudL-q7P8p60dqmgl53jjc=|1549704813"'&#125;, &#123;'domain': '.zhihu.com', 'expiry': 1612776783, 'httpOnly': False, 'name': '_zap', 'path': '/', 'secure': False, 'value': '227b4bf9-0c06-41bf-a50d-37c90f02fb40'&#125;, &#123;'domain': '.zhihu.com', 'expiry': 1612776784, 'httpOnly': False, 'name': '__utma', 'path': '/', 'secure': False, 'value': '51854390.808437234.1549704784.1549704784.1549704784.1'&#125;, &#123;'domain': '.zhihu.com', 'httpOnly': False, 'name': '__utmc', 'path': '/', 'secure': False, 'value': '51854390'&#125;, &#123;'domain': '.zhihu.com', 'expiry': 1565472784, 'httpOnly': False, 'name': '__utmz', 'path': '/', 'secure': False, 'value': '51854390.1549704784.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none)'&#125;, &#123;'domain': '.zhihu.com', 'expiry': 1612776784, 'httpOnly': False, 'name': '__utmv', 'path': '/', 'secure': False, 'value': '51854390.000--|3=entry_date=20190209=1'&#125;, &#123;'domain': 'www.zhihu.com', 'expiry': 2180424784, 'httpOnly': False, 'name': 'name', 'path': '/', 'secure': True, 'value': 'germey'&#125;][]]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[selenium自动测试1]]></title>
    <url>%2F2019%2F02%2F08%2Fselenium1%2F</url>
    <content type="text"><![CDATA[测试工具：Chrome ，selenium获取浏览器的网页信息1234567891011121314151617181920# 使用selenium模拟浏览器来获取网页的信息from selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.common.keys import Keysfrom selenium.webdriver.support import expected_conditions as ECfrom selenium.webdriver.support.wait import WebDriverWaitbrowser=webdriver.Chrome() # 模拟Chrometry: browser.get('https://www.baidu.com') input = browser.find_element_by_id('kw') input.send_keys('python') input.send_keys(Keys.ENTER) wait = WebDriverWait(browser,10) wait.until(EC.presence_of_all_elements_located((By.ID,'coment_left'))) print(browser.current_url) print(browser.get_cookie()) print(browser.page_source)finally: browser.close() 获取淘宝网站的节点信息 12345678910111213141516# 尝试获取淘宝的信息from selenium import webdriverbrowser=webdriver.Chrome()browser.get('https://www.taobao.com')# input_first = browser.find_element_by_id('q')# input_second = browser.find_element_by_css_selector('#q')# input_third = browser.find_element_by_xpath('//*[@id="q"]')# print(input_first,input_second,input_third)# 获取多个节点lis1=browser.find_element_by_css_selector('.service-bd li')lis2=browser.find_elements_by_css_selector('.service-bd li')print(lis1) # 返回第一个值print(lis2) # 返回列表browser.close() 根据html的源代码利用css选择器获取需要的信息 自动化测试，在输入框中填写信息12345678910111213141516browser = webdriver.Chrome()# browser.get('https://www.taobao.com/')# input = browser.find_element_by_id('q')# input.send_keys('五三模拟')# time.sleep(2)# input.clear()# input.send_keys('黄冈金卷')# button = browser.find_element_by_class_name('btn-search')# button.click()# javascript模拟下拉进度条url='https://landers1037.top'browser.get(url)# top=browser.find_element_by_class_name()browser.execute_script('window.scrollTo(0, document.scrollHeight)')browser.execute_script('alert("To Bottom")') 使用自带的方法属性获取节点的信息12345678910from selenium import webdriverbrowser=webdriver.Chrome()browser.get('https://www.zhihu.com/explore')input=browser.find_element_by_class_name('zu-top-add-question')print(input.text) # 文本属性print(input.id)print(input.tag_name)print(input.location)print(input.size) 自动化测试设置等待网页响应时间1234567891011from selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECbrowser=webdriver.Chrome()browser.get('http://www.taobao.com/')wait=WebDriverWait(browser,10) # 10s的最长等待时间input=wait.until(EC.presence_of_element_located((By.ID,'q')))button=wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,'.btn-search')))print(input,button)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo向Google提交网站]]></title>
    <url>%2F2019%2F02%2F06%2Fhexo-theme2%2F</url>
    <content type="text"><![CDATA[进入Google站长网站，登录自己的谷歌账号 选择html文件，在自己的github.io网站下上传html验证文件 验证通过后进入hexo的目录下，安装sitemap插件 1npm install hexo-generator-sitemap --save 修改配置文件_config.yml中的url为自己的网站地址 再次生成静态文件，就会生成站点地图 进入谷歌站长的控制台后，选择左侧的站点地图添加地图]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo主题配置]]></title>
    <url>%2F2019%2F02%2F06%2Fhexo-theme1%2F</url>
    <content type="text"><![CDATA[感谢主题的设计者针对主题的模板文件修改，找到layout下的ejs文件 网页左侧的信息栏 base-profile.ejs网页底部标题 base-footer.ejs网页侧边栏 base-sidebar.ejs 在信息栏添加自己喜欢的文字12345&lt;% if(theme.school.enable) &#123; %&gt; &lt;div class="school"&gt; &lt;a href = "&lt;%- url_for("http://www.hust.edu.cn/") %&gt;" &gt;&amp;nbsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;thinsp;HUST 1037&lt;/a&gt; &lt;/div&gt; &lt;% &#125; %&gt; 然后只需要在主题配置文件_config.yml中添加 12school: enable: true 在css文件中修改文字样式找到D:\Github Page\themes\archer\src\scss\_partial\_partial\profile.scss添加内容 12345678.school &#123; padding: 0.5rem 0; border-bottom: 1px solid rgba(0, 0, 0, 0.1); a &#123; font-size: 1.2rem; font-weight: bold; &#125;&#125; 空格修改网页元素的位置html常用的空格样式12345&amp;nbsp; #牛逼空格是最常用的空格&amp;ensp; #嗯空格是1/2的中文字符长度&amp;emsp; #恶魔空格是1格中文字符长度&amp;thinsp; #瘦子空格是一个很窄的空格#记住不要忘记分号 html常用的分割线123&lt;hr&gt; # 一条分割线&lt;HR style="FILTER: alpha(opacity=100,finishopacity=0,style=3)" width="80%" color=#987cb9 SIZE=3&gt; # 一条颜色渐变的分割线&lt;HR style="FILTER: alpha(opacity=100,finishopacity=0,style=1)" width="80%" color=#987cb9 SIZE=3&gt; # 一边颜色渐变的分割线 添加人数统计旋转地球统计 官网 快速插入js代码 1&lt;script type="text/javascript" src="//ra.revolvermaps.com/0/0/6.js?i=0n29o7blvb7&amp;amp;m=7&amp;amp;c=e63100&amp;amp;cr1=ffffff&amp;amp;f=arial&amp;amp;l=0&amp;amp;bv=90&amp;amp;lx=-420&amp;amp;ly=420&amp;amp;hi=20&amp;amp;he=7&amp;amp;hc=a8ddff&amp;amp;rs=80" async="async"&gt;&lt;/script&gt; 压缩hexo的css和html文件安装插件 all_minifier修改hexo目录下的配置文件，添加all_minifier: true 禁止git自动转义LF到CRLF1git config --global core.autocrlf flase]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[win10替换字体]]></title>
    <url>%2F2019%2F02%2F04%2Fwin-10font%2F</url>
    <content type="text"><![CDATA[前提：win10，记得自己的电脑账户密码下载苹果方体百度网盘第一步：备份原来的微软雅黑字体 C:\Windows\Fonts 12345msyh.ttcmsyhbd.tccmsyhl.ttcsimsun.ttcsimsunb.ttf 第二步：解压出苹果字体，进入计算机的高级启动模式，替换fonts下的字体 因为我的电脑高级启动组件失效，所以使用如下方法：搜索：系统配置 重启后进入安全模式，到fonts文件夹内替换字体即可，替换后再次进入系统配置，取消勾选安全引导选项]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>windows10</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python简易爬虫之动态爬取租房信息]]></title>
    <url>%2F2019%2F02%2F03%2Fspider3%2F</url>
    <content type="text"><![CDATA[环境：Python3保存为json和csv文件 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# 尝试抓取中介信息from selenium import webdriverimport jsonimport csvlist=[]browser=webdriver.Chrome()def geturl(offset): url='https://xy.zu.anjuke.com/fangyuan/xiangchengbc/p'+str(offset) browser.get(url) classnames=browser.find_elements_by_class_name('zu-info') # for classname in classnames: # print(classname.text) tags=browser.find_elements_by_css_selector('.zu-info a')# 位置 details=browser.find_elements_by_css_selector('.zu-info p') # 大小 prices=browser.find_elements_by_css_selector('.zu-side p') # 价格 for tag ,detail,price in zip(tags,details,prices): # print(tag.text+'\n'+detail.text+'\n'+price.text) data = &#123;&#125; data['位置']=tag.text data['大小'] = detail.text.replace('\n','') # 去掉里面的换行符号 data['价格']=price.text.replace('元/月','') list.append(data) # with open('house.json','a',encoding='utf-8')as file: # file.write(json.dumps(data,ensure_ascii=False))def save(): with open('list.json','w',encoding='utf-8')as file: file.write(json.dumps(list,indent=2,ensure_ascii=False)) headers=['位置','大小','价格'] with open('house.csv','w',encoding='utf-8')as file: file_csv=csv.DictWriter(file,headers) file_csv.writeheader() file_csv.writerows(list)def main(): for i in range(12): try: geturl(i) except Exception as e: print(e.args)if __name__ == '__main__': main() save()]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用python写一个拼音模板生成器]]></title>
    <url>%2F2019%2F02%2F03%2Fpyqt5-pinyinchart%2F</url>
    <content type="text"><![CDATA[使用python重写拼音模板生成器，意在做到高效易用项目链接]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pyqt5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用java写一个拼音模板生成器]]></title>
    <url>%2F2019%2F02%2F03%2Fjava-pinyinchart%2F</url>
    <content type="text"><![CDATA[为了方便儿童认知拼音四线格，我用java写了一个简单的拼音字母模板 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137import javax.imageio.ImageIO;import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;//简单的拼音格制作public class happy&#123; public static String pinyinzimu; public static void main(String args[])&#123; try &#123; UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel"); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; catch (InstantiationException e) &#123; e.printStackTrace(); &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); &#125; catch (UnsupportedLookAndFeelException e) &#123; e.printStackTrace(); &#125; JFrame frame=new JFrame("拼音模板"); pinyinpanel panel=new pinyinpanel(); frame.setBounds(100,100,1400,500); frame.setLayout(null); panel.setBounds(0,20,1330,210); frame.add(panel); final ImageIcon[] pinyin = &#123;new ImageIcon("src/pinyin.png")&#125;; JLabel label=new JLabel(); label.setText("abcd"); label.setFont(new Font("微软雅黑",Font.PLAIN,120)); //添加几个按钮用 JButton b1=new JButton("添加字母"); JButton b2=new JButton("保存图片"); JButton b3=new JButton("清空内容"); b1.setBounds(10,350,200,50); b2.setBounds(250,350,200,50); b3.setBounds(490,350,200,50); //添加监听 b1.addActionListener(new ActionListener() &#123; @Override public void actionPerformed(ActionEvent e) &#123; JFrame frame1=new JFrame("输入字母"); frame1.setBounds(200,300,500,200); frame1.setLayout(null); TextField textField=new TextField(); textField.setEditable(true); textField.setText(label.getText()); textField.setBounds(5,5,490,50); JButton add=new JButton("确定"); add.setBounds(10,80,150,50); JButton del=new JButton("清空"); del.setBounds(300,80,150,50); //添加监听 add.addActionListener(new ActionListener() &#123; @Override public void actionPerformed(ActionEvent e) &#123; pinyinzimu =textField.getText(); label.setText(pinyinzimu); frame1.setVisible(false); &#125; &#125;); del.addActionListener(new ActionListener() &#123; @Override public void actionPerformed(ActionEvent e) &#123; textField.setText(null); &#125; &#125;); frame1.add(textField); frame1.add(add); frame1.add(del); frame1.setVisible(true); &#125; &#125;); b2.addActionListener(new ActionListener() &#123; @Override public void actionPerformed(ActionEvent e) &#123; //仅仅对panel进行截图 BufferedImage map=new BufferedImage(panel.getWidth(),panel.getHeight(),BufferedImage.TYPE_INT_RGB); Graphics2D g=map.createGraphics(); panel.printAll(g); JFileChooser jfc=new JFileChooser(); jfc.showSaveDialog(null); String path=jfc.getSelectedFile().getPath(); File f=new File(path+"."+"jpg"); try&#123; ImageIO.write(map,"jpg",f); &#125;catch(IOException err)&#123; err.printStackTrace(); &#125; &#125; &#125;); b3.addActionListener(new ActionListener() &#123; @Override public void actionPerformed(ActionEvent e) &#123; label.setText(null); &#125; &#125;); frame.add(b1); frame.add(b2); frame.add(b3); panel.add(label); panel.setLayout(null); label.setBounds(10,-7,1400,200); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); &#125;&#125;class pinyinpanel extends JPanel&#123; //进行重绘 public void paintComponent(Graphics g)&#123; super.paintComponent(g); ImageIcon imageIcon=new ImageIcon(this.getClass().getResource("pinyin.png")); g.drawImage(imageIcon.getImage(),0,0,1322,208,null); int step=200;//定义一个步进为100 for (int i=0;i&lt;6;i++) &#123; step +=200; g.drawLine(10+step, 5, 10+step, 205); &#125; &#125;&#125; 最终效果图：]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java实现的简易思维导图]]></title>
    <url>%2F2019%2F02%2F03%2Fjava-mindmap%2F</url>
    <content type="text"><![CDATA[源代码地址：Github 思维导图设计要求：1.1 软件基本要求 （1）提供基本思维导图编著功能，如建立、删除、修改各级主题功能，主题中可输入不等长的文字信息； （2）提供给主题设置图标、链接、备注等功能； （3）提供基本的拷贝、剪切和粘贴功能； （4）提供基本思维导图文件管理功能：新建、保存、打开等； （5）支持思维导图的各种风格设置与修改。 1.2 可选要求 （1）提供友好的绘图操作界面； （2）支持创建联系、外框、概要、标签和批注等功能； （3）提供完善的均衡布局功能； （4）提供创建鱼骨图、流程图、甘特图等功能； （5）其他功能（可任选拟实现的功能）。 框架结构：本软件使用java开发，基于jdk1.8环境虚拟机运行，可以利用java的跨平台特性运行与windows，linux和mac os系统。 软件开发使用到的工具Idea2018，eclipse，photoshop 本思维导图软件主要使用了java的swing绘图组件进行图形化方面的绘制，软件一共分为Windows,Mindmap，iconSet，Note，Guide，Sidebar，Tree，Filemanager,Vec2这9个类文件，其中Windows是包含主函数的窗体函数。 模块通信：\1. Windows类是主函数窗体类，是整个思维导图的基础框架，在这个框架上放上了Sidebar侧边栏和Mindmap思维导图的面板，以及各种弹出菜单和快捷图标菜单，美化菜单 \2. Mindmap类是思维导图的面板，用来绘制思维导图的区域，在这里面通过重写paint方法绘制，添加节点并且将节点进行连线 \3. IconSet类是图标设置类，所有的节点图标都存储在同名的idea项目的包下面，通过包间文件访问获取节点的图标 \4. Note类是节点的备注类，作用是添加和删除节点的备注 \5. Guide类是软件的入门指南类，通过菜单的“入门指南”选项打开，可以了解软件的使用方法和功能 \6. Sidebar类是侧边栏类，里面主要包含了侧边栏内容的绘制和点击节点的组件获取功能，侧边栏包含的信息有软件的名称 Zmap，软件的版本号，创建思维导图的时间，欢迎标语 \7. Tree类是继承自TreeModel接口和Jlabl的节点类，因为继承了树形结构的接口，所以节点有层次分明的父子的结构，使用的是Jlabel来表示节点。在Tree类里面还包括鼠标监听函数和右键菜单函数，以及网页链接添加函数。 \8. Filemanager类是文件管理类，主要包括文件的生成和从xml文件里恢复思维导图的功能 \9. Sample类是快速切换模板的选择窗口，可以通过里面的模板样式直观地选择模板 \10. 另外xmlsam项目包内存储的是思维导图的模板 最终实现：]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PyQt5图形化布局]]></title>
    <url>%2F2019%2F02%2F02%2Fpyqt5-2%2F</url>
    <content type="text"><![CDATA[环境：python3绝对布局 12345678910111213141516171819202122232425#布局管理#使用绝对定位或者提供的layout类import sysfrom PyQt5.QtWidgets import QWidget,QLabel,QApplicationclass ly1(QWidget): def __init__(self): super().__init__() self.initUI() def initUI(self): label1=QLabel('test1',self) label1.move(15,10) label2=QLabel('test2',self) label2.move(35,40) self.setGeometry(300,200,600,500) self.setWindowTitle('absolute layout') self.show()if __name__=='__main__': app=QApplication(sys.argv) ly1=ly1() sys.exit(app.exec_()) 盒式布局 123456789101112131415161718192021222324252627282930313233# qhboxlayoutimport sysfrom PyQt5.QtWidgets import (QWidget,qApp,QApplication,QPushButton,QHBoxLayout,QVBoxLayout)class ly2(QWidget): def __init__(self): super().__init__() self.initUI() def initUI(self): okbutton=QPushButton('ok') cancelbutton=QPushButton('cancel') hbox=QHBoxLayout() # 定义一个水平布局，放置按钮 hbox.addStretch(1) # 添加按钮间的弹性空间 hbox.addWidget(okbutton) hbox.addWidget(cancelbutton) vbox=QVBoxLayout() # 新建一个垂直布局，把水平布局放在里面 vbox.addStretch(1) # 放在右下角 vbox.addLayout(hbox) self.setLayout(vbox) self.setGeometry(300,200,600,500) self.setWindowTitle('hbox layout') self.show()if __name__=='__main__': app=QApplication(sys.argv) ly2=ly2() sys.exit(app.exec_()) 表格布局 1234567891011121314151617181920212223242526272829303132333435# qgridlayout# 栅格布局import sysfrom PyQt5.QtWidgets import (QGridLayout,QWidget,QApplication,QPushButton)class ly3(QWidget): def __init__(self): super().__init__() self.initUI() def initUI(self): grid=QGridLayout() self.setLayout(grid) names=['cls','bck','','close' ,'7','8','9','/', '4','5','6','*', '1','2','3','-', '0','.','=','+'] positions=[(i,j) for i in range(5) for j in range(4)] for positions,name in zip(positions,names): if name=='': continue button=QPushButton(name) grid.addWidget(button,*positions) self.move(200,300) self.setWindowTitle('grid layout') self.show()if __name__=='__main__': app=QApplication(sys.argv) ly3=ly3() sys.exit(app.exec_())]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>pyqt5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PyQt5图形化窗口界面学习]]></title>
    <url>%2F2019%2F02%2F02%2Fpyqt5-1%2F</url>
    <content type="text"><![CDATA[PyQt5图形化学习一个带有图标的窗口界面 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253'''带有图标的面向对象编程'''#因为之前是面向过程的函数import sysfrom PyQt5.QtWidgets import QApplication, QWidget, QToolTip, QPushButton, QMessageBox, QDesktopWidgetfrom PyQt5.QtGui import QIconfrom PyQt5.QtGui import QFontfrom PyQt5.QtCore import QCoreApplication#qtooltip的作用是放在上面的一个提示框，这个提示框用html语言进行换行#新建一个类继承qwidgetclass demo1(QWidget): def __init__(self): super().__init__() self.initUI() def initUI(self): QToolTip.setFont(QFont('Sanserif',10)) self.setToolTip('this is a &lt;b&gt;QWidget&lt;/b&gt;widget') btn=QPushButton('Button',self) btn.setToolTip('this is a &lt;b&gt;QPushButton&lt;/b&gt;widget') btn.resize(btn.sizeHint()) #自动默认按钮大小 btn.move(50,50) qbtn=QPushButton('click close',self)#后面的self就是放置的父亲组件没有的时候就是一个顶层窗口 qbtn.clicked.connect(QCoreApplication.instance().quit) qbtn.move(100,100) qbtn.resize(qbtn.sizeHint()) self.setWindowTitle('GUI with icon') # self.setGeometry(300,300,600,600) '''设置窗口居中''' self.center() self.setWindowIcon(QIcon('icon.png')) self.show() def closeEvent(self, event): reply=QMessageBox.question(self,'message','are u sure to quit',QMessageBox.Yes|QMessageBox.No) if reply==QMessageBox.Yes: event.accept() else: event.ignore() def center(self): qr=self.frameGeometry() #获取当前屏幕的尺寸 cp=QDesktopWidget().availableGeometry().center() #获取屏幕的可用尺寸的中心像素位置 qr.moveCenter(cp) #把qr移动到中心位置 self.move(qr.topLeft()) #把窗口组件移动到qr定义的左上角零点位置if __name__=='__main__': app=QApplication(sys.argv) demo1=demo1() #实例化对象 sys.exit(app.exec_()) 状态栏窗口 1234567891011121314151617181920'''菜单和工具栏'''import sysfrom PyQt5.QtWidgets import QApplication,QMainWindow#qmainwindow is a main window used to put othersclass demo2(QMainWindow): def __init__(self): super().__init__() self.initUI() def initUI(self): self.statusBar().showMessage('ready') self.setGeometry(300,300,600,600) self.setWindowTitle('demo2 statusbar') self.show()if __name__=='__main__': app=QApplication(sys.argv) demo2=demo2() sys.exit(app.exec_()) 菜单栏窗口 12345678910111213141516171819202122232425262728293031323334'''menubar'''import sysfrom PyQt5.QtWidgets import QApplication,QMainWindow,qApp,QActionfrom PyQt5.QtGui import QIconclass demo3(QMainWindow): def __init__(self): super().__init__() self.initUI() def initUI(self): exitAct=QAction(QIcon('icon.png'),'&amp;Exit',self) openAct=QAction('&amp;Open',self) exitAct.setShortcut('Ctrl+Q') exitAct.setStatusTip('exit application') exitAct.triggered.connect(qApp.quit) #所有的信号槽调用关闭方法都没有（） openAct.triggered.connect(qApp.quit) self.statusBar() menubar=self.menuBar() #是最上面的顶层菜单 filemenu=menubar.addMenu('&amp;File') #设置顶层菜单 openmenu=menubar.addMenu('&amp;Open') filemenu.addAction(exitAct) #下面的选项菜单 filemenu.addAction(openAct) self.setGeometry(300,300,600,600) self.setWindowTitle('menu') self.show()if __name__ == '__main__': app = QApplication(sys.argv) demo3 = demo3() sys.exit(app.exec_()) 二级菜单 1234567891011121314151617181920212223242526272829#二级子菜单import sysfrom PyQt5.QtWidgets import QMainWindow,QAction,QMenu,QApplicationclass demo4(QMainWindow): def __init__(self): super().__init__() self.initUI() def initUI(self): menubar=self.menuBar() filemenu=menubar.addMenu('file') impMenu=QMenu('import',self) impAct=QAction('import mail',self) #动作的监听 impMenu.addAction(impAct) newAct=QAction('new',self) filemenu.addAction(newAct) filemenu.addMenu(impMenu) self.setGeometry(300,200,600,500) self.setWindowTitle('demo4') self.show()if __name__=='__main__': app=QApplication(sys.argv) demo4=demo4() sys.exit(app.exec_()) 勾选式菜单栏 12345678910111213141516171819202122232425262728293031323334353637#勾选菜单栏import sysfrom PyQt5.QtWidgets import QMainWindow,QAction,QMenu,QApplicationclass demo5(QMainWindow): def __init__(self): super().__init__() self.initUI() def initUI(self): self.statusBar=self.statusBar() self.statusBar.showMessage('ready') menubar=self.menuBar() viewMenu=menubar.addMenu('view') viewStatAct=QAction('view statusbar',self,checkable=True) viewStatAct.setStatusTip('view statusbar') viewStatAct.setChecked(True) viewStatAct.triggered.connect(self.toggleMenu) viewMenu.addAction(viewStatAct) self.setGeometry(300,200,600,500) self.setWindowTitle('demo5') self.show() def toggleMenu(self): if state: self.statusBar.show() else: self.statusBar.hide()if __name__=='__main__': app=QApplication(sys.argv) demo5=demo5() sys.exit(app.exec_()) 右键菜单 1234567891011121314151617181920212223242526272829#右键菜单import sysfrom PyQt5.QtWidgets import QMainWindow,QAction,QMenu,qApp,QApplicationclass demo6(QMainWindow): def __init__(self): super().__init__() self.initUI() def initUI(self): self.setGeometry(300,200,600,500) self.setWindowTitle('demo4') self.show() def contextMenuEvent(self, QContextMenuEvent): cmenu=QMenu(self) newAct=cmenu.addAction('new') opnAct=cmenu.addAction('open') quitAct=cmenu.addAction('quit') action=cmenu.exec_(self.mapToGlobal(QContextMenuEvent.pos())) if action==quitAct: qApp.quit()if __name__=='__main__': app=QApplication(sys.argv) demo6=demo6() sys.exit(app.exec_()) 图标工具栏 1234567891011121314151617181920212223242526#工具栏import sysfrom PyQt5.QtWidgets import QMainWindow,QAction,QMenu,QApplication,qAppfrom PyQt5.QtGui import QIconclass demo7(QMainWindow): def __init__(self): super().__init__() self.initUI() def initUI(self): exitAct=QAction(QIcon('icon.png'),'exit',self) exitAct.triggered.connect(qApp.quit) self.toolbar=self.addToolBar('exit') self.toolbar.addAction(exitAct) self.setGeometry(300,200,600,500) self.setWindowTitle('demo4') self.show()if __name__=='__main__': app=QApplication(sys.argv) demo7=demo7() sys.exit(app.exec_()) 主窗口 12345678910111213141516171819202122232425262728293031323334353637#主窗口的设计from PyQt5.QtWidgets import QMainWindow,QTextEdit,QAction,QApplicationfrom PyQt5.QtGui import QIconimport sysclass demo8(QMainWindow): def __init__(self): super().__init__() self.initUI() def initUI(self): textEdit=QTextEdit() self.setCentralWidget(textEdit) exitAct=QAction(QIcon('icon.png' ),'EXIT',self) exitAct.setShortcut('Ctrl+q') exitAct.setStatusTip('exit') exitAct.triggered.connect(self.close) self.statusBar() menubar=self.menuBar() filemenu=menubar.addMenu('&amp;File') filemenu.addAction(exitAct) toolbar=self.addToolBar('Exit') toolbar.addAction(exitAct) self.setGeometry(300,200,800,600) self.setWindowTitle('main window') self.show()#这个文本编辑框是自带右键菜单的if __name__=='__main__': app=QApplication(sys.argv) demo8=demo8() sys.exit(app.exec_())]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>pyqt5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python简单爬虫之抓取头条图片]]></title>
    <url>%2F2019%2F02%2F02%2Fspider2%2F</url>
    <content type="text"><![CDATA[环境：python3查看网页源代码得知，头条的网页使用ajax刷新获取网页资源，不能使用简单的html分析，定位网页的ajax请求,分析得到图片的cdn地址 保存时自动获取图片的md5值作为图片的名称避免命名重复，使用多线程池抓取图片提高效率 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#爬取今日头条的图片#爬取data的图片的原地址数据import requestsfrom urllib.parse import urlencodeimport osfrom hashlib import md5from multiprocessing.pool import Pooldef get_page(offset): params=&#123; 'offset':offset, 'format':'json', 'keyword':'街拍', 'autoload':'true', 'count':'20', 'cur_tab':'3', &#125; url='https://www.toutiao.com/api/search/content/?'+urlencode(params) try: response=requests.get(url) if response.status_code==200: return response.json() #encoding to json except requests.ConnectionError: return Nonedef get_images(json): #迭代器返回一个生成器 if json.get('data'): for item in json.get('data'): #先找到页面的分类0-20 title=item.get('title') images=item.get('image_list') for image in images: yield &#123; 'image_url':image.get('url'), 'title':title &#125;def save_images(item): if not os.path.exists(item.get('title')): os.mkdir(item.get('title')) try: response=requests.get(item.get('image_url')) if response.status_code==200: file_path='&#123;0&#125;/&#123;1&#125;.&#123;2&#125;'.format(item.get('title'),md5(response.content).hexdigest(),'jpg') if not os.path.exists(file_path): with open(file_path,'wb')as f: f.write(response.content) else: print('alreadly download',file_path) except requests.ConnectionError: print('Failed to save')def main(offset): json=get_page(offset) for item in get_images(json): print(item) save_images(item)GROUP_START = 1GROUP_END = 20if __name__=='__main__': pool=Pool() groups=([x*20 for x in range(GROUP_START,GROUP_END+1)]) pool.map(main,groups) pool.close() pool.join()]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python简易爬虫之猫眼电影榜单]]></title>
    <url>%2F2019%2F02%2F02%2Fspider1%2F</url>
    <content type="text"><![CDATA[环境：python3进入猫眼官网，使用浏览器调试模式f12查看源码使用requests模块请求网页，利用正则表达式提取我们需要的内容 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950'''抓取猫眼电影的排行前100'''import jsonimport requestsimport re#抓取链接 https://maoyan.com/board/4#分析html可以写出对应的正则表达式def get_one_page(url): headers=&#123;'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) ' 'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.80 Safari/537.36'&#125; response=requests.get(url,headers=headers) if response.status_code==200: return response.text return Nonedef parse_one_page(html): pattern=re.compile('&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?data-src="(.*?)".*?name.*?a.*?&gt;(.*?)&lt;/a&gt;.*?star.*?&gt;(.*?)&lt;/p&gt;' '.*?releasetime.*?&gt;(.*?)&lt;/p&gt;.*?integer.*?&gt;(.*?)&lt;/i&gt;.*?fraction.*?&gt;(.*?)&lt;/i&gt;.*?&lt;/dd&gt;',re.S) items=re.findall(pattern,html) for item in items: yield &#123; #类似一个迭代器，每次返回一个值（字典） 'index':item[0], 'image':item[1], 'title':item[2], 'actor':item[3].strip()[3:] if len(item[3])&gt;3 else '', 'time' :item[4].strip()[5:] if len(item[4])&gt;5 else '', 'score':item[5].strip()+item[6].strip() &#125;def write_to_file(content): with open('result.txt','a',encoding='utf-8')as f: print(type(json.dumps(content))) f.write(json.dumps(content,ensure_ascii=False)+'\n')def main(offset): url='https://maoyan.com/board/4?offset='+str(offset) html=get_one_page(url) # print(html) parse_one_page(html) for item in parse_one_page(html): write_to_file(item)if __name__=='__main__': for i in range(10): main(offset=i*10) 抓取的榜单： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110&#123;"index": "1", "image": "https://p1.meituan.net/movie/20803f59291c47e1e116c11963ce019e68711.jpg@160w_220h_1e_1c", "title": "霸王别姬", "actor": "张国荣,张丰毅,巩俐", "time": "1993-01-01", "score": "9.6"&#125;&#123;"index": "2", "image": "https://p0.meituan.net/movie/283292171619cdfd5b240c8fd093f1eb255670.jpg@160w_220h_1e_1c", "title": "肖申克的救赎", "actor": "蒂姆·罗宾斯,摩根·弗里曼,鲍勃·冈顿", "time": "1994-10-14(美国)", "score": "9.5"&#125;&#123;"index": "3", "image": "https://p0.meituan.net/movie/54617769d96807e4d81804284ffe2a27239007.jpg@160w_220h_1e_1c", "title": "罗马假日", "actor": "格利高里·派克,奥黛丽·赫本,埃迪·艾伯特", "time": "1953-09-02(美国)", "score": "9.1"&#125;&#123;"index": "4", "image": "https://p0.meituan.net/movie/e55ec5d18ccc83ba7db68caae54f165f95924.jpg@160w_220h_1e_1c", "title": "这个杀手不太冷", "actor": "让·雷诺,加里·奥德曼,娜塔莉·波特曼", "time": "1994-09-14(法国)", "score": "9.5"&#125;&#123;"index": "5", "image": "https://p1.meituan.net/movie/f5a924f362f050881f2b8f82e852747c118515.jpg@160w_220h_1e_1c", "title": "教父", "actor": "马龙·白兰度,阿尔·帕西诺,詹姆斯·肯恩", "time": "1972-03-24(美国)", "score": "9.3"&#125;&#123;"index": "6", "image": "https://p1.meituan.net/movie/0699ac97c82cf01638aa5023562d6134351277.jpg@160w_220h_1e_1c", "title": "泰坦尼克号", "actor": "莱昂纳多·迪卡普里奥,凯特·温丝莱特,比利·赞恩", "time": "1998-04-03", "score": "9.5"&#125;&#123;"index": "7", "image": "https://p0.meituan.net/movie/da64660f82b98cdc1b8a3804e69609e041108.jpg@160w_220h_1e_1c", "title": "唐伯虎点秋香", "actor": "周星驰,巩俐,郑佩佩", "time": "1993-07-01(中国香港)", "score": "9.2"&#125;&#123;"index": "8", "image": "https://p0.meituan.net/movie/b076ce63e9860ecf1ee9839badee5228329384.jpg@160w_220h_1e_1c", "title": "千与千寻", "actor": "柊瑠美,入野自由,夏木真理", "time": "2001-07-20(日本)", "score": "9.3"&#125;&#123;"index": "9", "image": "https://p0.meituan.net/movie/46c29a8b8d8424bdda7715e6fd779c66235684.jpg@160w_220h_1e_1c", "title": "魂断蓝桥", "actor": "费雯·丽,罗伯特·泰勒,露塞尔·沃特森", "time": "1940-05-17(美国)", "score": "9.2"&#125;&#123;"index": "10", "image": "https://p0.meituan.net/movie/230e71d398e0c54730d58dc4bb6e4cca51662.jpg@160w_220h_1e_1c", "title": "乱世佳人", "actor": "费雯·丽,克拉克·盖博,奥利维娅·德哈维兰", "time": "1939-12-15(美国)", "score": "9.1"&#125;&#123;"index": "1", "image": "https://p1.meituan.net/movie/20803f59291c47e1e116c11963ce019e68711.jpg@160w_220h_1e_1c", "title": "霸王别姬", "actor": "张国荣,张丰毅,巩俐", "time": "1993-01-01", "score": "9.6"&#125;&#123;"index": "2", "image": "https://p0.meituan.net/movie/283292171619cdfd5b240c8fd093f1eb255670.jpg@160w_220h_1e_1c", "title": "肖申克的救赎", "actor": "蒂姆·罗宾斯,摩根·弗里曼,鲍勃·冈顿", "time": "1994-10-14(美国)", "score": "9.5"&#125;&#123;"index": "3", "image": "https://p0.meituan.net/movie/54617769d96807e4d81804284ffe2a27239007.jpg@160w_220h_1e_1c", "title": "罗马假日", "actor": "格利高里·派克,奥黛丽·赫本,埃迪·艾伯特", "time": "1953-09-02(美国)", "score": "9.1"&#125;&#123;"index": "4", "image": "https://p0.meituan.net/movie/e55ec5d18ccc83ba7db68caae54f165f95924.jpg@160w_220h_1e_1c", "title": "这个杀手不太冷", "actor": "让·雷诺,加里·奥德曼,娜塔莉·波特曼", "time": "1994-09-14(法国)", "score": "9.5"&#125;&#123;"index": "5", "image": "https://p1.meituan.net/movie/f5a924f362f050881f2b8f82e852747c118515.jpg@160w_220h_1e_1c", "title": "教父", "actor": "马龙·白兰度,阿尔·帕西诺,詹姆斯·肯恩", "time": "1972-03-24(美国)", "score": "9.3"&#125;&#123;"index": "6", "image": "https://p1.meituan.net/movie/0699ac97c82cf01638aa5023562d6134351277.jpg@160w_220h_1e_1c", "title": "泰坦尼克号", "actor": "莱昂纳多·迪卡普里奥,凯特·温丝莱特,比利·赞恩", "time": "1998-04-03", "score": "9.5"&#125;&#123;"index": "7", "image": "https://p0.meituan.net/movie/da64660f82b98cdc1b8a3804e69609e041108.jpg@160w_220h_1e_1c", "title": "唐伯虎点秋香", "actor": "周星驰,巩俐,郑佩佩", "time": "1993-07-01(中国香港)", "score": "9.2"&#125;&#123;"index": "8", "image": "https://p0.meituan.net/movie/b076ce63e9860ecf1ee9839badee5228329384.jpg@160w_220h_1e_1c", "title": "千与千寻", "actor": "柊瑠美,入野自由,夏木真理", "time": "2001-07-20(日本)", "score": "9.3"&#125;&#123;"index": "9", "image": "https://p0.meituan.net/movie/46c29a8b8d8424bdda7715e6fd779c66235684.jpg@160w_220h_1e_1c", "title": "魂断蓝桥", "actor": "费雯·丽,罗伯特·泰勒,露塞尔·沃特森", "time": "1940-05-17(美国)", "score": "9.2"&#125;&#123;"index": "10", "image": "https://p0.meituan.net/movie/230e71d398e0c54730d58dc4bb6e4cca51662.jpg@160w_220h_1e_1c", "title": "乱世佳人", "actor": "费雯·丽,克拉克·盖博,奥利维娅·德哈维兰", "time": "1939-12-15(美国)", "score": "9.1"&#125;&#123;"index": "11", "image": "https://p1.meituan.net/movie/ba1ed511668402605ed369350ab779d6319397.jpg@160w_220h_1e_1c", "title": "天空之城", "actor": "寺田农,鹫尾真知子,龟山助清", "time": "1992", "score": "9.1"&#125;&#123;"index": "12", "image": "https://p1.meituan.net/movie/18e3191039d5e71562477659301f04aa61905.jpg@160w_220h_1e_1c", "title": "喜剧之王", "actor": "周星驰,莫文蔚,张柏芝", "time": "1999-02-13(中国香港)", "score": "9.2"&#125;&#123;"index": "13", "image": "https://p1.meituan.net/movie/39ed7a0941a3604bba78d299b11a18ce119679.jpg@160w_220h_1e_1c", "title": "辛德勒的名单", "actor": "连姆·尼森,拉尔夫·费因斯,本·金斯利", "time": "1993-12-15(美国)", "score": "9.2"&#125;&#123;"index": "14", "image": "https://p1.meituan.net/movie/14a7b337e8063e3ce05a5993ed80176b74208.jpg@160w_220h_1e_1c", "title": "大闹天宫", "actor": "邱岳峰,毕克,富润生", "time": "1965-12-31", "score": "9.0"&#125;&#123;"index": "15", "image": "https://p1.meituan.net/movie/6bc004d57358ee6875faa5e9a1239140128550.jpg@160w_220h_1e_1c", "title": "音乐之声", "actor": "朱莉·安德鲁斯,克里斯托弗·普卢默,埃琳诺·帕克", "time": "1965-03-02(美国)", "score": "9.0"&#125;&#123;"index": "16", "image": "https://p1.meituan.net/movie/0e91ffcfa7e53449216cc29ee8af513a75791.jpg@160w_220h_1e_1c", "title": "剪刀手爱德华", "actor": "约翰尼·德普,薇诺娜·瑞德,黛安·韦斯特", "time": "1990-12-06(美国)", "score": "8.8"&#125;&#123;"index": "17", "image": "https://p0.meituan.net/movie/ae7245920d95c03765fe1615f3a1fe3865785.jpg@160w_220h_1e_1c", "title": "春光乍泄", "actor": "张国荣,梁朝伟,张震", "time": "1997-05-30(中国香港)", "score": "9.2"&#125;&#123;"index": "18", "image": "https://p0.meituan.net/movie/43d259ecbcd53e8bbe902632772281d6327525.jpg@160w_220h_1e_1c", "title": "美丽人生", "actor": "罗伯托·贝尼尼,尼可莱塔·布拉斯基,乔治·坎塔里尼", "time": "1997-12-20(意大利)", "score": "9.3"&#125;&#123;"index": "19", "image": "https://p1.meituan.net/movie/c15b7623cce2f51c75562a3baefe507b68290.jpg@160w_220h_1e_1c", "title": "海上钢琴师", "actor": "蒂姆·罗斯,普路特·泰勒·文斯,比尔·努恩", "time": "1998-10-28(意大利)", "score": "9.2"&#125;&#123;"index": "20", "image": "https://p1.meituan.net/movie/d981a12f59d3cc92ff666094404ad8f0211220.jpg@160w_220h_1e_1c", "title": "黑客帝国", "actor": "基努·里维斯,凯瑞-安·莫斯,劳伦斯·菲什伯恩", "time": "2000-01-14", "score": "9.0"&#125;&#123;"index": "21", "image": "https://p1.meituan.net/movie/aacb9ed2a6601bfe515ef0970add1715623792.jpg@160w_220h_1e_1c", "title": "哈利·波特与魔法石", "actor": "丹尼尔·雷德克里夫,鲁伯特·格林特,艾玛·沃特森", "time": "2002-01-26", "score": "9.1"&#125;&#123;"index": "22", "image": "https://p1.meituan.net/movie/b449893ebc63d5c54eb4a5b60341f334383831.jpg@160w_220h_1e_1c", "title": "加勒比海盗", "actor": "约翰尼·德普,凯拉·奈特莉,奥兰多·布鲁姆", "time": "2003-11-21", "score": "8.9"&#125;&#123;"index": "23", "image": "https://p0.meituan.net/movie/932bdfbef5be3543e6b136246aeb99b8123736.jpg@160w_220h_1e_1c", "title": "指环王3：王者无敌", "actor": "伊莱贾·伍德,伊恩·麦克莱恩,丽芙·泰勒", "time": "2004-03-15", "score": "9.2"&#125;&#123;"index": "24", "image": "https://p1.meituan.net/movie/0d93b5b585ce29c6688e43f3989fb41f86421.jpg@160w_220h_1e_1c", "title": "无间道", "actor": "刘德华,梁朝伟,黄秋生", "time": "2003-09-05", "score": "9.1"&#125;&#123;"index": "25", "image": "https://p1.meituan.net/movie/53b6f0b66882a53b08896c92076515a8236400.jpg@160w_220h_1e_1c", "title": "射雕英雄传之东成西就", "actor": "张国荣,梁朝伟,张学友", "time": "1993-02-05(中国香港)", "score": "8.9"&#125;&#123;"index": "26", "image": "https://p0.meituan.net/movie/8959888ee0c399b0fe53a714bc8a5a17460048.jpg@160w_220h_1e_1c", "title": "楚门的世界", "actor": "金·凯瑞,劳拉·琳妮,诺亚·艾默里奇", "time": "1998-06-01(美国)", "score": "8.9"&#125;&#123;"index": "27", "image": "https://p0.meituan.net/movie/d12a1c198ad9ffac72b5db57feacb449294699.jpg@160w_220h_1e_1c", "title": "蝙蝠侠：黑暗骑士", "actor": "克里斯蒂安·贝尔,希斯·莱杰,阿伦·伊克哈特", "time": "2008-07-18(美国)", "score": "9.3"&#125;&#123;"index": "28", "image": "https://p1.meituan.net/movie/7bac8bfa6739c18620065132ce9c64fa85110.jpg@160w_220h_1e_1c", "title": "教父2", "actor": "阿尔·帕西诺,罗伯特·德尼罗,黛安·基顿", "time": "1974-12-12(美国)", "score": "9.0"&#125;&#123;"index": "29", "image": "https://p0.meituan.net/movie/5cfa597a98b35ee4ee598695942641ba287922.jpg@160w_220h_1e_1c", "title": "指环王2：双塔奇兵", "actor": "伊莱贾·伍德,伊恩·麦克莱恩,丽芙·泰勒", "time": "2003-04-25", "score": "9.1"&#125;&#123;"index": "30", "image": "https://p1.meituan.net/movie/4592eef6b6dffcd1d950f55f41ab098f239816.jpg@160w_220h_1e_1c", "title": "机器人总动员", "actor": "本·贝尔特,艾丽莎·奈特,杰夫·格尔林", "time": "2008-06-27(美国)", "score": "9.3"&#125;&#123;"index": "31", "image": "https://p1.meituan.net/movie/618e57ddb3173de6bbf2e278946b11f279679.jpg@160w_220h_1e_1c", "title": "天堂电影院", "actor": "菲利浦·诺瓦雷,赛尔乔·卡斯特利托,蒂兹亚娜·罗达托", "time": "1988-11-17(意大利)", "score": "9.2"&#125;&#123;"index": "32", "image": "https://p0.meituan.net/movie/4c41068ef7608c1d4fbfbe6016e589f7204391.jpg@160w_220h_1e_1c", "title": "活着", "actor": "葛优,巩俐,牛犇", "time": "1994-05-18(法国)", "score": "9.0"&#125;&#123;"index": "33", "image": "https://p1.meituan.net/movie/779bcc212a50a2526343362778f6b63c334618.jpg@160w_220h_1e_1c", "title": "拯救大兵瑞恩", "actor": "汤姆·汉克斯,马特·达蒙,汤姆·塞兹摩尔", "time": "1998-07-24(美国)", "score": "8.9"&#125;&#123;"index": "34", "image": "https://p0.meituan.net/movie/0127b451d5b8f0679c6f81c8ed414bb2432442.jpg@160w_220h_1e_1c", "title": "哈尔的移动城堡", "actor": "倍赏千惠子,木村拓哉,美轮明宏", "time": "2004-11-20(日本)", "score": "9.0"&#125;&#123;"index": "35", "image": "https://p1.meituan.net/movie/91f575ec93f019f428d1f33e3ceca7c5115495.jpg@160w_220h_1e_1c", "title": "阿凡达", "actor": "萨姆·沃辛顿,佐伊·索尔达娜,米歇尔·罗德里格兹", "time": "2010-01-04", "score": "9.1"&#125;&#123;"index": "36", "image": "https://p1.meituan.net/movie/2f344a9f9575edbcae9f0abe0578bc90339773.jpg@160w_220h_1e_1c", "title": "盗梦空间", "actor": "莱昂纳多·迪卡普里奥,渡边谦,约瑟夫·高登-莱维特", "time": "2010-09-01", "score": "9.2"&#125;&#123;"index": "37", "image": "https://p0.meituan.net/movie/7787c10ad5e95b03cf83ef9473500d8e282796.jpg@160w_220h_1e_1c", "title": "忠犬八公的故事", "actor": "Forest,理查·基尔,琼·艾伦", "time": "2010-03-12(英国)", "score": "9.3"&#125;&#123;"index": "38", "image": "https://p0.meituan.net/movie/6ab1882a217e848acceb240365043d53329196.jpg@160w_220h_1e_1c", "title": "幽灵公主", "actor": "松田洋治,石田百合子,田中裕子", "time": "1997-07-12(日本)", "score": "8.9"&#125;&#123;"index": "39", "image": "https://p1.meituan.net/movie/c5e76795bf7a78b12a2ffabb4a0c5c11112921.jpg@160w_220h_1e_1c", "title": "搏击俱乐部", "actor": "爱德华·哈里森·诺顿,布拉德·皮特,海伦娜·伯翰·卡特", "time": "1999-10-15(美国)", "score": "8.8"&#125;&#123;"index": "40", "image": "https://p1.meituan.net/movie/7e471a9171a410ebc9413b2f1de67afc130067.jpg@160w_220h_1e_1c", "title": "东邪西毒", "actor": "张国荣,梁朝伟,刘嘉玲", "time": "1994-09-17", "score": "8.8"&#125;&#123;"index": "41", "image": "https://p0.meituan.net/movie/4f9638ba234c3fb673f23a09968db875371576.jpg@160w_220h_1e_1c", "title": "风之谷", "actor": "岛本须美,永井一郎,坂本千夏", "time": "1992", "score": "8.9"&#125;&#123;"index": "42", "image": "https://p1.meituan.net/movie/d5e5e53ef9bbd98223e83df261b51b84103223.jpg@160w_220h_1e_1c", "title": "疯狂原始人", "actor": "尼古拉斯·凯奇,艾玛·斯通,瑞安·雷诺兹", "time": "2013-04-20", "score": "9.5"&#125;&#123;"index": "43", "image": "https://p1.meituan.net/movie/5896de3c1474277730e321c9b1db04a9205644.jpg@160w_220h_1e_1c", "title": "当幸福来敲门", "actor": "威尔·史密斯,贾登·史密斯,坦迪·牛顿", "time": "2008-01-17", "score": "8.9"&#125;&#123;"index": "44", "image": "https://p1.meituan.net/movie/4a4c84aa103ab47202f1aa907c5542a4128882.jpg@160w_220h_1e_1c", "title": "V字仇杀队", "actor": "娜塔莉·波特曼,雨果·维文,斯蒂芬·瑞", "time": "2006-03-17(美国)", "score": "8.8"&#125;&#123;"index": "45", "image": "https://p0.meituan.net/movie/df15efd261060d3094a73ef679888d4f238149.jpg@160w_220h_1e_1c", "title": "十二怒汉", "actor": "亨利·方达,李·科布,马丁·鲍尔萨姆", "time": "1957-04-13(美国)", "score": "9.1"&#125;&#123;"index": "46", "image": "https://p0.meituan.net/movie/7cd18fcf0b4f9180500124711e81492994030.jpg@160w_220h_1e_1c", "title": "放牛班的春天", "actor": "热拉尔·朱尼奥,让-巴蒂斯特·莫尼耶,玛丽·布奈尔", "time": "2004-10-16", "score": "8.8"&#125;&#123;"index": "47", "image": "https://p0.meituan.net/movie/4bb144bc0a674ba6908349018fd092e6330929.jpg@160w_220h_1e_1c", "title": "三傻大闹宝莱坞", "actor": "阿米尔·汗,黄渤,卡琳娜·卡普", "time": "2011-12-08", "score": "9.1"&#125;&#123;"index": "48", "image": "https://p1.meituan.net/movie/f8e9d5a90224746d15dfdbd53d4fae3d209420.jpg@160w_220h_1e_1c", "title": "勇敢的心", "actor": "梅尔·吉布森,苏菲·玛索,帕特里克·麦高汉", "time": "1995-05-24(美国)", "score": "8.8"&#125;&#123;"index": "49", "image": "https://p1.meituan.net/movie/5ca6ffcbb994a51cd6215e7c4fff2d9b71039.jpg@160w_220h_1e_1c", "title": "黑客帝国3：矩阵革命", "actor": "基努·里维斯,雨果·维文,凯瑞-安·莫斯", "time": "2003-11-05", "score": "8.8"&#125;&#123;"index": "50", "image": "https://p1.meituan.net/movie/1d0fa86bcf7a44484b9c16ac6af5be68191952.jpg@160w_220h_1e_1c", "title": "速度与激情5", "actor": "范·迪塞尔,保罗·沃克,道恩·强森", "time": "2011-05-12", "score": "9.2"&#125;&#123;"index": "51", "image": "https://p1.meituan.net/movie/8194ae885ed9419aadf35c196af86ba4239039.jpg@160w_220h_1e_1c", "title": "驯龙高手", "actor": "杰伊·巴鲁切尔,杰拉德·巴特勒,亚美莉卡·费雷拉", "time": "2010-05-14", "score": "9.0"&#125;&#123;"index": "52", "image": "https://p0.meituan.net/movie/85c2bfba6025bfbfb53291ae5924c215308805.jpg@160w_220h_1e_1c", "title": "神偷奶爸", "actor": "史蒂夫·卡瑞尔,杰森·席格尔,拉塞尔·布兰德", "time": "2010-07-09(美国)", "score": "9.0"&#125;&#123;"index": "53", "image": "https://p0.meituan.net/movie/34998e31c6d07475f1add6b8b16fd21d192579.jpg@160w_220h_1e_1c", "title": "少年派的奇幻漂流", "actor": "苏拉·沙玛,伊尔凡·可汗,塔布", "time": "2012-11-22", "score": "9.1"&#125;&#123;"index": "54", "image": "https://p0.meituan.net/movie/7cb7965469cb7ff95613714389f1ea3d87743.jpg@160w_220h_1e_1c", "title": "闻香识女人", "actor": "阿尔·帕西诺,克里斯·奥唐纳,加布里埃尔·安瓦尔", "time": "1992-12-23(美国)", "score": "8.8"&#125;&#123;"index": "55", "image": "https://p0.meituan.net/movie/e71affe126eeb4f8bfcc738cbddeebc8288766.jpg@160w_220h_1e_1c", "title": "断背山", "actor": "希斯·莱杰,杰克·吉伦哈尔,米歇尔·威廉姆斯", "time": "2006-01-13(美国)", "score": "9.0"&#125;&#123;"index": "56", "image": "https://p0.meituan.net/movie/47dd790e19dad72b50580641de5608c5199014.jpg@160w_220h_1e_1c", "title": "飞屋环游记", "actor": "爱德华·阿斯纳,乔丹·长井,鲍勃·彼德森", "time": "2009-08-04", "score": "8.9"&#125;&#123;"index": "57", "image": "https://p0.meituan.net/movie/92eb862c42c49f8e41e459c369c4512b226610.jpg@160w_220h_1e_1c", "title": "大话西游之月光宝盒", "actor": "周星驰,莫文蔚,吴孟达", "time": "2014-10-24", "score": "9.6"&#125;&#123;"index": "58", "image": "https://p1.meituan.net/movie/4dddd98730274c3b1464ff0a0ad195e5233381.jpg@160w_220h_1e_1c", "title": "飞越疯人院", "actor": "杰克·尼科尔森,路易丝·弗莱彻,威尔·萨姆森", "time": "1975-11-19(美国)", "score": "8.8"&#125;&#123;"index": "59", "image": "https://p0.meituan.net/movie/457a35fda360cb72090fa6dcbd1db3c1275333.jpg@160w_220h_1e_1c", "title": "怦然心动", "actor": "玛德琳·卡罗尔,卡兰·麦克奥利菲,艾丹·奎因", "time": "2010-08-06(美国)", "score": "8.9"&#125;&#123;"index": "60", "image": "https://p1.meituan.net/movie/92198a6fc8c3f5d13aa1bdf203572c0f99438.jpg@160w_220h_1e_1c", "title": "美国往事", "actor": "罗伯特·德尼罗,詹姆斯·伍兹,伊丽莎白·麦戈文", "time": "1984-02-17(美国)", "score": "9.1"&#125;&#123;"index": "61", "image": "https://p1.meituan.net/movie/75c0d3eb584be030a01f2e26741a8f41251454.jpg@160w_220h_1e_1c", "title": "致命魔术", "actor": "休·杰克曼,克里斯蒂安·贝尔,迈克尔·凯恩", "time": "2006-10-20(美国)", "score": "8.8"&#125;&#123;"index": "62", "image": "https://p1.meituan.net/movie/0b507aa44c4dfbbcc91949b69b1b39a168922.jpg@160w_220h_1e_1c", "title": "鬼子来了", "actor": "姜文,姜宏波,陈强", "time": "2000-05-12(法国戛纳)", "score": "8.9"&#125;&#123;"index": "63", "image": "https://p0.meituan.net/movie/fcc17667b8343131101eeb4c67d90bf9150883.jpg@160w_220h_1e_1c", "title": "无敌破坏王", "actor": "约翰·C·赖利,萨拉·西尔弗曼,简·林奇", "time": "2012-11-06", "score": "9.1"&#125;&#123;"index": "64", "image": "https://p0.meituan.net/movie/7b7d1f8aa36d7a15463ce6942708a1a7265296.jpg@160w_220h_1e_1c", "title": "美丽心灵", "actor": "罗素·克洛,詹妮弗·康纳利,艾德·哈里斯", "time": "2001-12-21(美国)", "score": "8.8"&#125;&#123;"index": "65", "image": "https://p1.meituan.net/movie/96bb58f3e9d213fb0438987d16d27561379209.jpg@160w_220h_1e_1c", "title": "蝙蝠侠：黑暗骑士崛起", "actor": "克里斯蒂安·贝尔,迈克尔·凯恩,加里·奥德曼", "time": "2012-08-27", "score": "8.9"&#125;&#123;"index": "66", "image": "https://p0.meituan.net/movie/7ec873ba943f13e3c63789d899bd0e23256871.jpg@160w_220h_1e_1c", "title": "夜访吸血鬼", "actor": "汤姆·克鲁斯,布拉德·皮特,克尔斯滕·邓斯特", "time": "1994-11-11(美国)", "score": "8.8"&#125;&#123;"index": "67", "image": "https://p1.meituan.net/movie/6d0510f326bf145dcf49a901fb949b77278838.jpg@160w_220h_1e_1c", "title": "倩女幽魂", "actor": "张国荣,王祖贤,午马", "time": "2011-04-30", "score": "9.2"&#125;&#123;"index": "68", "image": "https://p1.meituan.net/movie/68fa7db99e958c47d7aa07d015845a6f335154.jpg@160w_220h_1e_1c", "title": "哈利·波特与死亡圣器（下）", "actor": "丹尼尔·雷德克里夫,鲁伯特·格林特,艾玛·沃特森", "time": "2011-08-04", "score": "9.0"&#125;&#123;"index": "69", "image": "https://p0.meituan.net/movie/2526f77c650bf7cf3d5ee2dccdeac332244951.jpg@160w_220h_1e_1c", "title": "本杰明·巴顿奇事", "actor": "布拉德·皮特,凯特·布兰切特,塔拉吉·P·汉森", "time": "2008-12-25(美国)", "score": "8.8"&#125;&#123;"index": "70", "image": "https://p1.meituan.net/movie/484171372de45945e8bbbcc97db57e09136701.jpg@160w_220h_1e_1c", "title": "钢琴家", "actor": "艾德里安·布洛迪,艾米莉娅·福克斯,米哈乌·热布罗夫斯基", "time": "2002-09-25(法国)", "score": "8.8"&#125;&#123;"index": "71", "image": "https://p0.meituan.net/movie/7874ba1378033b0b491df0cc56c43d25221208.jpg@160w_220h_1e_1c", "title": "触不可及", "actor": "弗朗索瓦·克鲁塞,奥玛·希,安娜·勒尼", "time": "2011-11-02(法国)", "score": "9.1"&#125;&#123;"index": "72", "image": "https://p1.meituan.net/movie/4ad513be2e9419ec7d7d63ba8cc2b6cc134065.jpg@160w_220h_1e_1c", "title": "熔炉", "actor": "孔刘,郑有美,金智英", "time": "2011-09-22(韩国)", "score": "8.8"&#125;&#123;"index": "73", "image": "https://p1.meituan.net/movie/7ed07b8ea8c0e0d0c7b685d20e3ec64e232004.jpg@160w_220h_1e_1c", "title": "初恋这件小事", "actor": "马里奥·毛瑞尔,平采娜·乐维瑟派布恩,阿查拉那·阿瑞亚卫考", "time": "2012-06-05", "score": "8.8"&#125;&#123;"index": "74", "image": "https://p1.meituan.net/movie/dc2246233a6f5ac1e34c7176b602c8ca174557.jpg@160w_220h_1e_1c", "title": "大话西游之大圣娶亲", "actor": "周星驰,朱茵,莫文蔚", "time": "2014-10-24", "score": "8.8"&#125;&#123;"index": "75", "image": "https://p0.meituan.net/movie/9e9f12cfc1f54c973dda6c85bd3a139d334520.jpg@160w_220h_1e_1c", "title": "新龙门客栈", "actor": "张曼玉,梁家辉,甄子丹", "time": "2012-02-24", "score": "8.8"&#125;&#123;"index": "76", "image": "https://p1.meituan.net/movie/8ad5a0f521fb15637dfdf9cab38d414453783.jpg@160w_220h_1e_1c", "title": "甜蜜蜜", "actor": "黎明,张曼玉,曾志伟", "time": "2015-02-13", "score": "9.2"&#125;&#123;"index": "77", "image": "https://p1.meituan.net/movie/bc7b6ababa54e11577d45c05e84a33af54072.jpg@160w_220h_1e_1c", "title": "小鞋子", "actor": "默罕默德·阿米尔·纳吉,Kamal Mirkarimi,Behzad Rafi", "time": "1999-01-22(美国)", "score": "9.1"&#125;&#123;"index": "78", "image": "https://p0.meituan.net/movie/4cc4c55c29b77b090485ce9943bf6f87274708.jpg@160w_220h_1e_1c", "title": "素媛", "actor": "李来,薛耿求,严志媛", "time": "2013-10-02(韩国)", "score": "9.1"&#125;&#123;"index": "79", "image": "https://p0.meituan.net/movie/5420be40e3b755ffe04779b9b199e935256906.jpg@160w_220h_1e_1c", "title": "萤火之森", "actor": "内山昂辉,佐仓绫音,后藤弘树", "time": "2011-09-17(日本)", "score": "9.0"&#125;&#123;"index": "80", "image": "https://p0.meituan.net/movie/4abc8c932cfacfc0089e2883765d02d1295222.jpg@160w_220h_1e_1c", "title": "时空恋旅人", "actor": "瑞秋·麦克亚当斯,多姆纳尔·格里森,比尔·奈伊", "time": "2013-09-04(英国)", "score": "8.9"&#125;&#123;"index": "81", "image": "https://p1.meituan.net/movie/a0e0426a4390f5ecb49d25770a184dc0150779.jpg@160w_220h_1e_1c", "title": "穿条纹睡衣的男孩", "actor": "阿沙·巴特菲尔德,维拉·法梅加,大卫·休里斯", "time": "2008-09-12(英国)", "score": "9.0"&#125;&#123;"index": "82", "image": "https://p0.meituan.net/movie/3985eaf3858bea0f2a3d966bf7ee2103178217.jpg@160w_220h_1e_1c", "title": "窃听风暴", "actor": "乌尔里希·穆埃,塞巴斯蒂安·科赫,马蒂娜·格德克", "time": "2006-03-23(德国)", "score": "9.0"&#125;&#123;"index": "83", "image": "https://p1.meituan.net/movie/6a6e74b2c289f9fa4433dd2dc04a7741331638.jpg@160w_220h_1e_1c", "title": "7号房的礼物", "actor": "柳承龙,郑镇荣,朴信惠", "time": "2013-01-23(韩国)", "score": "8.9"&#125;&#123;"index": "84", "image": "https://p0.meituan.net/movie/ce262f261f69fc3d679020402336a4af270365.jpg@160w_220h_1e_1c", "title": "借东西的小人阿莉埃蒂", "actor": "志田未来,神木隆之介,大竹忍", "time": "2010-07-17(日本)", "score": "8.8"&#125;&#123;"index": "85", "image": "https://p0.meituan.net/movie/b5ff0216e689b3fcc065590c48cd5105255305.jpg@160w_220h_1e_1c", "title": "恐怖直播", "actor": "河正宇,李璟荣,李大为", "time": "2013-07-31(韩国)", "score": "8.8"&#125;&#123;"index": "86", "image": "https://p0.meituan.net/movie/7373dbba07b50ce6f24336edb96b2ea4271536.jpg@160w_220h_1e_1c", "title": "海豚湾", "actor": "里克·奥巴瑞,路易·西霍尤斯,哈迪·琼斯", "time": "2009-07-31(美国)", "score": "8.9"&#125;&#123;"index": "87", "image": "https://p1.meituan.net/movie/c835b3588d0061ed3b992388a0a96f15160913.jpg@160w_220h_1e_1c", "title": "忠犬八公物语", "actor": "仲代达矢,春川真澄,井川比佐志", "time": "1987-08-01(日本)", "score": "9.0"&#125;&#123;"index": "88", "image": "https://p1.meituan.net/movie/b553d13f30100db731ab6cf45668e52d94703.jpg@160w_220h_1e_1c", "title": "上帝之城", "actor": "亚历桑德雷·罗德里格斯,艾莉丝·布拉加,莱安德鲁·菲尔米诺", "time": "2002-08-30(巴西)", "score": "8.9"&#125;&#123;"index": "89", "image": "https://p0.meituan.net/movie/8fabf3894b7d12d3d2f6e66404813670265761.jpg@160w_220h_1e_1c", "title": "辩护人", "actor": "宋康昊,郭度沅,吴达洙", "time": "2013-12-18(韩国)", "score": "8.8"&#125;&#123;"index": "90", "image": "https://p1.meituan.net/movie/73349facab53529ab9e079c6c8c7c059281729.jpg@160w_220h_1e_1c", "title": "七武士", "actor": "三船敏郎,志村乔,千秋实", "time": "1954-04-26(日本)", "score": "9.1"&#125;&#123;"index": "91", "image": "https://p0.meituan.net/movie/3e5f5f3aa4b7e5576521e26c2c7c894d253975.jpg@160w_220h_1e_1c", "title": "英雄本色", "actor": "狄龙,张国荣,周润发", "time": "2017-11-17", "score": "9.2"&#125;&#123;"index": "92", "image": "https://p1.meituan.net/movie/2c0a5fedf4b43d142121b91c6ccabe1b59051.jpg@160w_220h_1e_1c", "title": "一一", "actor": "吴念真,金燕玲,李凯莉", "time": "2000-09-20(法国)", "score": "8.9"&#125;&#123;"index": "93", "image": "https://p1.meituan.net/movie/30310858fdab34c7a17cfd7ec8ad8bfc112201.jpg@160w_220h_1e_1c", "title": "完美的世界", "actor": "凯文·科斯特纳,克林特·伊斯特伍德,T·J·劳瑟", "time": "1993-11-24(美国)", "score": "8.9"&#125;&#123;"index": "94", "image": "https://p0.meituan.net/movie/0018b57299d0d4540330a31244c880a9112971.jpg@160w_220h_1e_1c", "title": "海洋", "actor": "雅克·贝汉,姜文,兰斯洛特·佩林", "time": "2011-08-12", "score": "9.0"&#125;&#123;"index": "95", "image": "https://p1.meituan.net/movie/36a893c53a13f9bb934071b86ae3b5c492427.jpg@160w_220h_1e_1c", "title": "爱·回家", "actor": "俞承豪,金艺芬,童孝熙", "time": "2002-04-05(韩国)", "score": "9.0"&#125;&#123;"index": "96", "image": "https://p1.meituan.net/movie/9bff56ed3ea38bb1825daa1d354bc92352781.jpg@160w_220h_1e_1c", "title": "黄金三镖客", "actor": "克林特·伊斯特伍德,李·范·克里夫,埃里·瓦拉赫", "time": "1966-12-23(意大利)", "score": "8.9"&#125;&#123;"index": "97", "image": "https://p1.meituan.net/movie/ed50b58bf636d207c56989872a91f4cf305138.jpg@160w_220h_1e_1c", "title": "我爱你", "actor": "宋在浩,李顺才,尹秀晶", "time": "2011-02-17(韩国)", "score": "9.0"&#125;&#123;"index": "98", "image": "https://p1.meituan.net/movie/a1634f4e49c8517ae0a3e4adcac6b0dc43994.jpg@160w_220h_1e_1c", "title": "迁徙的鸟", "actor": "雅克·贝汉,Philippe Labro", "time": "2001-12-12(法国)", "score": "9.1"&#125;&#123;"index": "99", "image": "https://p0.meituan.net/movie/885fc379c614a2b4175587b95ac98eb95045650.jpg@160w_220h_1e_1c", "title": "阿飞正传", "actor": "张国荣,张曼玉,刘德华", "time": "2018-06-25", "score": "8.8"&#125;&#123;"index": "100", "image": "https://p0.meituan.net/movie/c304c687e287c7c2f9e22cf78257872d277201.jpg@160w_220h_1e_1c", "title": "龙猫", "actor": "帕特·卡洛尔,蒂姆·达利,丽娅·萨隆加", "time": "2018-12-14", "score": "9.2"&#125;]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python入门指南]]></title>
    <url>%2F2019%2F02%2F02%2Fpy1%2F</url>
    <content type="text"><![CDATA[环境：Python 3.7库的安装和使用1pip install *** 使用这种方法安装库的前提是，python的路径已经安装在了环境变量里。python的所有第三方库都在安装目录的Lib文件夹内有的时候使用pip安装会出现各种环境错误，这个时候使用离线库文件.whl安装第三方python库：点击进入下载对应的库后，安装方法 12cd /存放whl文件的目录pip install ***.whl 导入安装好的库 1234import PyQt5 #导入这个类from PyQt5.Qwidget import QApp #从库中导入一个类from PyQt5 import* #从库中导入全部初始类# 第三句仅仅是导入在PyQt5下面init的所有类，不包括其他的类 模块的相互调用自定义一个模块后，怎么在其他的类中使用 例如：定义了一个son.py 1from son import son 习惯操作我们定义一个main（）函数作为程序的入口，在有调用关系的时候，如果只是想测试当前的模块，常常使用惯例写法 1if __name__=="__main__" 命名python模块解释器默认从当前文件夹开始寻找是否有在模块中调用的库，如果你的package命名和内置的库名称一致，就会优先调用用户定义的库，这个时候就会出错 定义根目录自带的根目录是src，如果你在下面还建立了多个package，在引入第三方的库时会有错误提示但是运行不会出问题，使用pycharm在当前的package下mark directory as source即可 文件相对路径如果在运行代码的目录下放置图片资源1.jpg，调用的时候使用 1（‘1.jpg') 如果在src下的例如img目录下 1（’src/img/1.png') 中文乱码Pycharm跟据操作系统默认的编码是GBK，进入settings，找到code encoding，设置为UTF-8]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[画一只小猪佩琪]]></title>
    <url>%2F2019%2F02%2F01%2Fpeppa-pig%2F</url>
    <content type="text"><![CDATA[祝大家猪年快乐，佩琪给你拜年了！ 贴出源代码，使用Python3 项目源地址：佩琪佩琪画板程序下载：点我画佩琪 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335'''猪头佩琪的画法'''import timeimport turtle as tclass peipi(): # def __init__(self): # #画笔的初始化 # print('peipi pig') def nose(self,x,y): #鼻子 t.penup() t.goto(x,y) t.pendown() t.setheading(-30) t.begin_fill() a=0.4 for i in range(120): if 0&lt;=i&lt;30 or 60&lt;=i&lt;90: a=a+0.08 t.left(3) t.forward(a) else: a=a-0.08 t.left(3) t.forward(a) t.end_fill() t.penup() t.setheading(90) t.forward(25) t.setheading(0) t.pendown() t.pencolor(255,155,192) t.setheading(10) t.begin_fill() t.circle(5) t.color(160,82,45) t.end_fill() t.penup() t.setheading(0) t.forward(20) t.pendown() t.pencolor(255,155,192) t.setheading(10) t.begin_fill() t.circle(5) t.color(160, 82, 45) t.end_fill() def eyes(self,x,y): #眼睛 t.color((255, 155, 192), "white") t.penup() t.goto(x, y) t.setheading(90) t.forward(-20) t.setheading(0) t.forward(-95) t.pendown() t.begin_fill() t.circle(15) t.end_fill() t.color("black") t.penup() t.setheading(90) t.forward(12) t.setheading(0) t.forward(-3) t.pendown() t.begin_fill() t.circle(3) t.end_fill() t.color((255, 155, 192), "white") t.penup() t.seth(90) t.forward(-25) t.seth(0) t.forward(40) t.pendown() t.begin_fill() t.circle(15) t.end_fill() t.color("black") t.penup() t.setheading(90) t.forward(12) t.setheading(0) t.forward(-3) t.pendown() t.begin_fill() t.circle(3) t.end_fill() def head(self,x,y): #头 t.color((255, 155, 192), "pink") t.penup() t.goto(x, y) t.setheading(0) t.pendown() t.begin_fill() t.setheading(180) t.circle(300, -30) t.circle(100, -60) t.circle(80, -100) t.circle(150, -20) t.circle(60, -95) t.setheading(161) t.circle(-300, 15) t.penup() t.goto(-100, 100) t.pendown() t.setheading(-30) a = 0.4 for i in range(60): if 0 &lt;= i &lt; 30 or 60 &lt;= i &lt; 90: a = a + 0.08 t.lt(3) # 向左转3度 t.fd(a) # 向前走a的步长 else: a = a - 0.08 t.lt(3) t.fd(a) t.end_fill() def ears(self,x,y): #耳朵 t.color((255, 155, 192), "pink") t.penup() t.goto(x, y) t.pendown() t.begin_fill() t.setheading(100) t.circle(-50, 50) t.circle(-10, 120) t.circle(-50, 54) t.end_fill() t.penup() t.setheading(90) t.forward(-12) t.setheading(0) t.forward(30) t.pendown() t.begin_fill() t.setheading(100) t.circle(-50, 50) t.circle(-10, 120) t.circle(-50, 56) t.end_fill() def face(self,x,y): #脸 t.color((255, 155, 192)) t.penup() t.goto(x, y) t.pendown() t.setheading(0) t.begin_fill() t.circle(30) t.end_fill() def mouth(self,x,y): #嘴巴 t.color(239, 69, 19) t.penup() t.goto(x, y) t.pendown() t.setheading(-80) t.circle(30, 40) t.circle(40, 80) def body(self,x,y): #身体 t.color("red", (255, 99, 71)) t.penup() t.goto(x, y) t.pendown() t.begin_fill() t.setheading(-130) t.circle(100, 10) t.circle(300, 30) t.setheading(0) t.forward(230) t.setheading(90) t.circle(300, 30) t.circle(100, 3) t.color((255, 155, 192), (255, 100, 100)) t.setheading(-135) t.circle(-80, 63) t.circle(-150, 24) t.end_fill() def hands(self,x,y): #手 t.color((255, 155, 192)) t.penup() t.goto(x, y) t.pendown() t.setheading(-160) t.circle(300, 15) t.penup() t.setheading(90) t.forward(15) t.setheading(0) t.forward(0) t.pendown() t.setheading(-10) t.circle(-20, 90) t.penup() t.setheading(90) t.forward(30) t.setheading(0) t.forward(237) t.pendown() t.setheading(-20) t.circle(-300, 15) t.penup() t.setheading(90) t.forward(20) t.setheading(0) t.forward(0) t.pendown() t.setheading(-170) t.circle(20, 90) def feet(self,x,y): #脚 t.pensize(10) t.color((240, 128, 128)) t.penup() t.goto(x, y) t.pendown() t.setheading(-90) t.forward(40) t.setheading(-180) t.color("black") t.pensize(15) t.fd(20) t.pensize(10) t.color((240, 128, 128)) t.penup() t.setheading(90) t.forward(40) t.setheading(0) t.forward(90) t.pendown() t.setheading(-90) t.forward(40) t.setheading(-180) t.color("black") t.pensize(15) t.fd(20) def tail(self,x,y): #尾巴 t.pensize(4) t.color((255, 155, 192)) t.penup() t.goto(x, y) t.pendown() t.seth(0) t.circle(70, 20) t.circle(10, 330) t.circle(70, 30) def toyturn(self): t.begin_fill() t.forward(45) t.left(45) t.forward(20) t.left(135) t.forward(45) t.left(45) t.forward(20) t.end_fill() def toy(self,x,y): #风车 t.pensize(2) t.color('red') t.penup() t.goto(x,y) t.pendown() t.seth(0) self.toyturn() # t.color('blue') t.seth(90) self.toyturn() # t.color('yellow') t.seth(180) self.toyturn() # t.color('green') t.seth(270) self.toyturn() # t.color('black') t.seth(270) t.forward(80) def setting(self): #画笔的设置 t.pensize(4) t.speed(10) t.hideturtle() # 使画笔隐藏 t.colormode(255) t.color((255, 155, 192), "pink") t.setup(1200, 500) def write(self,x,y): #祝福语 t.pencolor('red') t.penup() t.goto(x,y) t.write('老猪祝各位新年快乐',font=('微软雅黑',30,'normal')) def main(self): self.setting() # 画布、画笔设置 self.nose(-100, 100) # 鼻子 self.head(-69, 167) # 头 self.ears(0, 160) # 耳朵 self.eyes(60, 140) # 眼睛 self.face(80, 10) # 腮 self.mouth(-20, 30) # 嘴 self.body(-32, -8) # 身体 self.hands(-56, -45) # 手 self.feet(2, -177) # 脚 self.toy(190,0) # 风车 self.tail(148, -155) # 尾巴 self.write(-450, -20) # 祝福语 t.mainloop()if __name__=='__main__': pig=peipi() pig.main()]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>佩琪</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pymysql安装使用]]></title>
    <url>%2F2019%2F02%2F01%2Fpymysql-learn%2F</url>
    <content type="text"><![CDATA[Mysql的安装使用官方提供的mysql installer进行安装，如果只是想使用数据库那么就只安装mysql server 常见的安装mysql错误，错误码1405在使用cmd的时候使用net start mysql会提示mysql服务无法启动，分析原因： 之前安装过mysql数据库，之前的注册表没有完全删除，导致多个mysql服务同时在运行造成冲突 正在运行的软件占用了3306端口，比如ssr使用的本地端口 my.ini配置出错，建议再次检查一遍 另外一件事，几乎所有的服务器例如apache，wampserver在搭建本地web的时候默认使用的都是localhost的80端口，这个端口很容易被QQ强占，所以建议不要调试的时候打开QQ 解决方法：使用everything搜索mysql删除相关的所有文件和注册表，重新安装 PyMysql的使用安装pymysql使用pycharm的插件管理或者直接使用pip进行安装，我使用的python版本3.7.1 安装mysql在官网下载mysql安装包进行安装，记住安装的文件夹，我的安装目录是：C:\Program Files\MySQL\MySQL Server 5.7，记住mysql和mysql installer不一样后者是数据库的安装程序 安装完成后：进入cmd，进入到安装的目录 cd C:\Program Files\MySQL\MySQL Server 5.7\bin在这里创建一个my.ini文件使用notepad++进行编辑，将下面的代码拷贝进去 12345678910111213141516[mysql]# 设置mysql客户端默认字符集default-character-set=utf8 [mysqld]#设置3306端口port = 3306 # 设置mysql的安装目录basedir=C:\Program Files\MySQL\MySQL Server 5.7# 设置mysql数据库的数据的存放目录datadir=C:\Program Files\MySQL\MySQL Server 5.7/data# 允许最大连接数max_connections=200# 服务端使用的字符集默认为8比特编码的latin1字符集character-set-server=utf8# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB 数据库的存放目录，在安装路径下并不存在，我们需要新建一个data文件夹 进入cmd安装数据库执行初始化mysqld –initialize-insecure执行mysqld install(如果提示数据库已经存在则使用sc delete mysql或者mysql-remove)启动服务net start mysql （或者进入电脑的管理，服务下自行启动mysql服务）当遇到错误193的时候，进入bin文件夹下删除mysqld的0kb文件即可添加密码mysqladmin -u root password**进入数据库mysql -u root -p输入刚才的密码（如果提示错误，就是在安装mysql的时候已经配置过密码，输入那时的密码即可）打开成功就会出现以下提示]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>mysql</tag>
        <tag>pymysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 搭建静态页面的心得]]></title>
    <url>%2F2019%2F02%2F01%2Fhexo-study%2F</url>
    <content type="text"><![CDATA[Hexo+Github安装环境node.js github账户 第一步：使用npm安装hexo 12$ npm install -g hexo-cli $ npm install hexo-server --save 第二步：在硬盘新建文件夹blog ，进入，安装hexo 12345$ npm install hexo-cli -g$ hexo init blog$ cd blog$ npm install$ hexo server 第三步：测试 在浏览器中输入localhost:4000查看生成的网页 如果出现访问错误，检查是否使用hexo s的命令，server一定要是处于开启的状态 如果还有错误，检查电脑的4000端口是否被占用，根据网上反馈，安装有foxit阅读器的用户，需要关闭它的服务，或者使用下面的命令改变端口 1hexo s -p 5000 运行正常即可在本地查看网页 第四步：远程发布至github 新建一个仓库，命名规则：用户名.github.io 每一个用户只能建立一个这样的仓库，然后进入仓库复制自己的ssh地址 在本地的博客目录下找到_config.yml文件，翻到最下面，如下填写 1234deploy: type: git repo: https://github.com/你的用户名/你的用户名.github.io.git branch: master 配置完成后使用如下命令发布到github 123hexo cleanhexo ghexo d 或者使用hexo d -g 上传文章出现warning：CRLF问题 1git config –-global core.autocrlf false]]></content>
      <tags>
        <tag>-经验</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[抽象类]]></title>
    <url>%2F2018%2F07%2F28%2Fe6-8a-bd-e8-b1-a1-e7-b1-bb%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031package lrj_demo;/* * 2018.7.28 * 抽象类 */public class demo1&#123; public static void main(String []args)&#123; System.out.println("nobody"); //Master m=new slave(); //m.call();&#125;&#125;abstract class Master&#123; //i am nobody //我是个什么？ //抽象类可以没有抽象方法 //抽象类的不确定性，对方法不能实例化，也就是后面不能加&#123;&#125; abstract public void call();&#125;//子类的继承//java要求我们把父类里的所有的抽象方法都实现class slave extends Master &#123; //对父类的方法的重载 //我是一个锤子 public void call()&#123; System.out.println("i am a hammer"); &#125;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java学习笔记8-多态]]></title>
    <url>%2F2018%2F07%2F26%2Fjava-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b08-e5-a4-9a-e6-80-81%2F</url>
    <content type="text"><![CDATA[一个引用在不同情况下的多种状态 java允许父类的引用变量引用子类的实例对象 Animal a=new Cat(); 这种转换是自动完成的 12345678910111213141516171819202122232425262728package com.xiaoqiang;//打包命令，把生成的字节码放在该包下public class xiaoqiang &#123; /** * @param args */ public static void main(String[] args) &#123; // TODO Auto-generated method stub Dog dog1=new Dog(); &#125;&#125;class Dog&#123; public int a; protected String name; String color; private float price; public void main() &#123; System.out.println(a); &#125;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java学习笔记7 继承]]></title>
    <url>%2F2018%2F07%2F26%2Fjava-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b07-e7-bb-a7-e6-89-bf%2F</url>
    <content type="text"><![CDATA[并不是所有的属性都可以继承 成员方法也可以继承 /*继承练习2.18.7.25*/ public class demo9{ public static void main(String []args) { } } //小学生class little{ private int age; private String name; private float fee; //交费 public void pay(float fee) { this fee=fee; } } // 大学生 class big{ private int age; private String name; private float fee; //交费 public void pay(float fee) { this fee=fee*0.8f; }}//很明显有代码复用的问题 class Stu { //需要继承的不能定义为private public int age; public String name; public float fee; public void go()//可以被继承的方法 { } } ​12345678910111213141516171819202122/*继承练习22.18.7.25*/public class demo9&#123; public static void main(String []args) &#123; &#125;&#125;//将学生的共有的属性提取出来作为父类class Stu&#123; //需要继承的不能定义为private public int age; public String name; public float fee; public void go() &#123; &#125; &#125; ​123456789101112131415161718//小学生class little extends Stu&#123; //交费 public void pay(float fee) &#123; this fee=fee; &#125;&#125;// 大学生class big extends Stu&#123; public void pay(float fee) &#123; this fee=fee*0.8f; &#125;&#125;//很明显有代码复用的问题 四种属性修饰符 public protected private 默认 除了private都可以被继承 如果不希望子类继承某个属性或者方法，就声明为私有的 特点： 子类最多继承一个父类 java的所有的类都是object的子类 方法重载 对于同一种方法，当其中的变量属性不一样时就会重载 注意：只是改变方法的修饰符，或者改变方法的返回值的数据类型（return float）都不会引起重载 方法覆盖 子类有一个方法和父类的方法，返回类型，参数一样，否则编译出错 注意修饰符最好一致，子类的方法不能缩小父类方法的访问权限，可以放大 方法的覆盖就是，继承父类里的方法时，在子类里面重新定义该方法，从而完成覆盖 1234567891011class father&#123; public void call() &#123; System.out.print("father"); &#123;&#125;class son extends father&#123; public void call() &#123; System.out.print("son"); &#125;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java学习笔记6-封装]]></title>
    <url>%2F2018%2F07%2F26%2Fjava-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b06-e5-b0-81-e8-a3-85%2F</url>
    <content type="text"><![CDATA[封装是把抽象的数据和对数据的操作封装在一起，这样数据就被保护了起来，只有得到授权的操作（类方法）才能去访问 包的必要性：什么是包？ com.xiaoming中.代表分层 当定义的类的名字相同时用包来区分 *打包命令一般放在文件开始的地方 *包的命名规范，全部小写 引入包：import 例如引入HashMap包，import java.util.*; 用包来控制访问的级别 12345678910111213141516171819202122232425262728package com.xiaoqiang;//打包命令，把生成的字节码放在该包下public class xiaoqiang &#123; /** * @param args */ public static void main(String[] args) &#123; // TODO Auto-generated method stub Dog dog1=new Dog(); &#125;&#125;class Dog&#123; public int a; protected String name; String color; private float price; public void main() &#123; System.out.println(a); &#125;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java学习笔记5-类方法]]></title>
    <url>%2F2018%2F07%2F26%2Fjava-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b05-e7-b1-bb-e6-96-b9-e6-b3-95%2F</url>
    <content type="text"><![CDATA[类方法（又为静态方法） //java里的规则类变量原则上用类方法去访问 //类方法中不能访问非类变量，比如静态的方法只能访问静态的变量，普通方法却可以访问其他的变量 123456789101112131415161718192021222324252627/*2018.7.25静态变量的理解*/public class demo7&#123; /*static int i=1; static &#123; //这个静态区域块只被执行一次 i++; &#125; public demo7() &#123; i++; &#125;*/ public static void main(String []args) &#123; /*demo7 d1=new demo7(); System.out.println(d1.i); demo7 d2=new demo7(); System.out.println(d2.i);*/ Stu s1=new Stu(19,"mark1",9999); Stu s2=new Stu(20,"mark2",8978); System.out.println(Stu.Gettotal()); &#125;&#125; ​123456789101112131415161718192021222324class Stu&#123; //定义一个学生的类 int age; String name; int fee;//学费 static int totalfee;//定义一个静态变量为总的学费 public Stu(int age,String name,int fee) &#123; this.age=age; this.name=name; totalfee+=fee; &#125; //返回总学费 //这里是一个类方法，静态方法，把gettotal的值变成对象公共可以访问的 //java里的规则类变量原则上用类方法去访问 //类方法中不能访问非类变量 public static int Gettotal() &#123; return totalfee; &#125; &#125; 什么时候使用类变量 定义学生类，或者钱的总数；用类变量属于公共的属性 类方法是和类相关的类的公共方法]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java学习笔记4-this类]]></title>
    <url>%2F2018%2F07%2F26%2Fjava-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b04-this-e7-b1-bb%2F</url>
    <content type="text"><![CDATA[this.age=age; this在java中表示当前的对象，它只能在类的方法中使用而不能在类定义的外部使用 12345678910111213141516171819202122232425/*休伯利安号*/public class demo5&#123; public static void main(String []args) &#123; Weapon weapon1=new Weapon("索尔之锤"); Weapon weapon2=new Weapon("3rd圣遗物"); Weapon weapon3=new Weapon("血犹大"); Weapon weapon4=new Weapon("永暮双狼"); Godess p1=new Godess(71,"卡莲 第六夜想曲"); Godess p2=new Godess(71,"八重樱 逆神巫女"); Godess p3=new Godess(70,"誓约 德丽莎.阿波卡利斯"); Godess p4=new Godess(71,"白夜执事 符华"); System.out.println("舰长：巧夺天工王大锤"); System.out.println("UID:16884025"); System.out.println(""); p1.showInfo(); weapon1.showInfo(); p2.showInfo(); weapon2.showInfo(); p3.showInfo(); weapon3.showInfo(); p4.showInfo(); weapon4.showInfo(); ​1234567891011121314151617181920212223242526272829303132333435 &#125;&#125;class Godess&#123; //每一个this都是直接对它所对应的对象的 int level; String name; Weapon weapon;//引用类型 public Godess(int level,String name) &#123; //可读性不好 this.level=level; this.name=name; this.weapon=weapon; &#125; public void showInfo() &#123; System.out.println("女武神名字："+this.name); System.out.println("女武神等级:"+this.level); &#125;&#125;class Weapon&#123; String name; public Weapon(String name) &#123; this.name=name; &#125; public void showInfo() &#123; System.out.println("武器："+this.name); &#125;&#125; 、例子1： 123456789101112131415161718192021222324252627282930313233/*有一堆小睿智在玩堆雪人，不时有新的加入，请问如何知道此时有几个小睿智面向对象的封装思想*/public class demo6&#123; public static void main(String []args) &#123; int total=0; Child ch1=new Child(3,"pi1"); ch1.join(); Child ch2=new Child(5,"pi2"); ch2.join(); //total++; System.out.println("睿智total are:"+ch1.total); //这里读取ch1或者ch2的total值应该是一样的 &#125;&#125;class Child&#123; int age; String name; static int total=0;//静态变量 public Child(int age,String name) &#123; this.age=age; this.name=name; &#125; public void join() &#123; total++; System.out.println("有一个小睿智加入了群聊"); &#125;&#125; 这里引入了静态变量static，直接在成员方法中定义，可以作为公共量被访问]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java学习笔记3-类和对象]]></title>
    <url>%2F2018%2F07%2F21%2Fjava-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b03-e7-b1-bb-e5-92-8c-e5-af-b9-e8-b1-a1%2F</url>
    <content type="text"><![CDATA[学习java的类和对象 类的名称最好用首字母大写的命名方式，而成员方法则最好使用小写的命名方式 在一个public的公共入口里面只能有一个类class 否则会出错 第一个test，建一个类为test 1234567891011121314public class test&#123; int age; String name; public static void main(String []args) &#123; test t=new test(); t.age=10; t.name="pipi"; System.out.println("age is"+t.age); System.out.println("name is"+t.name); &#125;&#125; 输出定义好的名字和年龄 第二个练习出现了许多的问题 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061//java关于类和对象的练习//2018.7.20public class demo3&#123; public static void main(String []args) &#123; Person p1=new Person(); p1.age=10; p1.name="王pig"; p1.speak(); p1.jisuan(); p1.jisuan(100); p1.add(12,10); System.out.println("age "+p1.age); System.out.println("name "+p1.name); //运行到这里跳出主函数，运行完毕 &#125;&#125;//定义一个类为人类，确定他的属性 class Person//类名首写字母大写 &#123; int age; int hight; String name; //定义成员方法 public void speak()//定义方法可以说话 &#123; System.out.print(" 我是你的父亲"); &#125; public void jisuan()//定义方法可以进行运算 &#123; int result=0; int i; for(i=0;i&lt;1000;i++) &#123; result+=i; &#125; System.out.println("计算结果"+result); &#125; //带参数的成员方法 public void jisuan(int n) &#123; int result=0; for(int i=0;i&lt;n;i++) &#123; result+=i; &#125; System.out.println("result="+result); &#125; public void add(int num1,int num2) &#123; int result=0; result=num1+num2; System.out.println("add is "+result); &#125; &#125; 出现问题 第一个在定义的add成员方法后面不小心加了=出错 第二个在public下只能有一个类，第一次在public class demo3的后面又加入了class person所以出了错误 建议成员变量用首字母大写的命名方式 成员方法用首字母小写]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java学习笔记2-流程控制 Demo]]></title>
    <url>%2F2018%2F07%2F17%2Fe6-b5-81-e7-a8-8b-e6-8e-a7-e5-88-b6-demo%2F</url>
    <content type="text"><![CDATA[/* 利用for循环实现9*9的乘法表 */ ​12345678910111213public class for99&#123; public static void main(String []args) &#123; for (int i=1;i&lt;10;i++) &#123; for (int j=1;j&lt;10;j++) &#123; if (j&lt;=i) &#123; System.out.print(i+"*"+j+"="+(i*j)+" "); &#125; &#125; System.out.println(" "); &#125; &#125;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java学习笔记1]]></title>
    <url>%2F2018%2F07%2F07%2Fjava-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b01%2F</url>
    <content type="text"><![CDATA[定义的java程序的时候的类名字必须和文件的名称保持一致否则后面会出现编译的错误 在第一次的hello world编译中书写的代码如下 12345678910//2018.7.7//无敌的皮皮//java学习的第一个程序helloworldpublic class Hello&#123; //程序的入口 public static void main(String args[]) &#123; System.out.println("hello world"); &#125;&#125; 第一次我使用的是notapad++的编译器，然而默认的是UTF8的编码字符，在使用命令javac Hello.java的时候出现了编译的错误 因为教学使用的是记事本，记事本默认的编码是ansi，在改变了编码后，把错误的编码删除后再次利用命令行编译程序后成功编译 因为教学使用的是记事本，记事本默认的编码是ansi，在改变了编码后，把错误的编码删除后再次利用命令行编译程序后成功编译]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[信号与系统——状态分析教材]]></title>
    <url>%2F2018%2F06%2F21%2Fe4-bf-a1-e5-8f-b7-e4-b8-8e-e7-b3-bb-e7-bb-9f-e7-8a-b6-e6-80-81-e5-88-86-e6-9e-90-e6-95-99-e6-9d-90%2F</url>
    <content type="text"><![CDATA[[google-drive-embed url=”https://drive.google.com/file/d/1lB9W1qGZTGtbJeQRhV-LIm1kmAtPMVyP/preview?usp=drivesdk&quot; title=”Binder.pdf” icon=”https://drive-thirdparty.googleusercontent.com/16/type/application/pdf&quot; width=”110%” height=”400” style=”embed”]]]></content>
      <categories>
        <category>资源下载</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[基于最小系统——AD&DA转换]]></title>
    <url>%2F2018%2F06%2F21%2Fe5-9f-ba-e4-ba-8e-e6-9c-80-e5-b0-8f-e7-b3-bb-e7-bb-9f-adda-e8-bd-ac-e6-8d-a2%2F</url>
    <content type="text"><![CDATA[AD1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556/* * AD.c * * Created on: 2018-5-31 * Author: 郭 */#include "xparameters.h"#include "xspi.h"#include "xintc.h"#include "xil_exception.h"#define BUFFER_SIZE 2void SpiIntrandler(void *CallBackRef,u32 Statusevent,u32 Bytecount);static XIntc IntcInstance;static XSpi SpiInstance;volatile int TransferInProgress;int Error;u8 ReadBuffer[BUFFER_SIZE];u8 WriteBuffer[BUFFER_SIZE];int main(void)&#123;int Status;Status=XSpi_Initialize(&amp;SpiInstance,XPAR_SPI_0_DEVICE_ID);Status=XIntc_Initialize(&amp;IntcInstance,XPAR_INTC_0_DEVICE_ID);Status=XIntc_Connect(&amp;IntcInstance,XPAR_INTC_0_SPI_0_VEC_ID,(XInterruptHandler) XSpi_InterruptHandler,(void *)&amp;SpiInstance);Status=XIntc_Start(&amp;IntcInstance,XIN_REAL_MODE);XIntc_Enable(&amp;IntcInstance,XPAR_INTC_0_SPI_0_VEC_ID);microblaze_register_handler((XInterruptHandler)XIntc_InterruptHandler,&amp;IntcInstance);microblaze_enable_interrupts();XSpi_SetStatusHandler(&amp;SpiInstance,&amp;SpiInstance,(XSpi_StatusHandler)SpiIntrandler);Status = XSpi_SetOptions(&amp;SpiInstance,XSP_MASTER_OPTION |XSP_CLK_PHASE_1_OPTION);Status = XSpi_SetSlaveSelect(&amp;SpiInstance,1);XSpi_Start(&amp;SpiInstance);while(1)&#123;TransferInProgress = TRUE;XSpi_Transfer(&amp;SpiInstance,WriteBuffer,ReadBuffer,2);while(TransferInProgress);u16 temp;temp = ReadBuffer[1] &lt;&lt; 8;temp += ReadBuffer[0];xil_printf("adc = %d\n\r", temp);int i;for(i = 0; i &lt; 5000000; i++);&#125;return XST_SUCCESS;&#125;void SpiIntrandler(void *CallBackRef, u32 StatusEvent, u32 ByteCount)&#123; TransferInProgress = FALSE; if (StatusEvent != XSP_SR_RX_EMPTY_MASK)&#123; Error++;&#125; &#125; ​​​ DA12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include "xparameters.h"#include "xspi.h"#include "xintc.h"#include "xil_exception.h"#define BUFFER_SIZE 2void SpiIntrandler(void *CallBackRef,u32 Statusevent,u32 Bytecount);static XIntc IntcInstance;static XSpi SpiInstance;volatile int TransferInProgress;int Error;u8 ReadBuffer[BUFFER_SIZE];u8 WriteBuffer[BUFFER_SIZE];int main(void)&#123;int Status,Count;Status=XSpi_Initialize(&amp;SpiInstance,XPAR_SPI_0_DEVICE_ID);Status=XIntc_Initialize(&amp;IntcInstance,XPAR_INTC_0_DEVICE_ID);Status=XIntc_Connect(&amp;IntcInstance,XPAR_INTC_0_SPI_0_VEC_ID,(XInterruptHandler) XSpi_InterruptHandler,(void *)&amp;SpiInstance);Status=XIntc_Start(&amp;IntcInstance,XIN_REAL_MODE);XIntc_Enable(&amp;IntcInstance,XPAR_INTC_0_SPI_0_VEC_ID);microblaze_register_handler((XInterruptHandler)XIntc_InterruptHandler,&amp;IntcInstance);microblaze_enable_interrupts();XSpi_SetStatusHandler(&amp;SpiInstance,&amp;SpiInstance,(XSpi_StatusHandler)SpiIntrandler);Status = XSpi_SetOptions(&amp;SpiInstance,XSP_MASTER_OPTION |XSP_CLK_PHASE_1_OPTION);Status = XSpi_SetSlaveSelect(&amp;SpiInstance,1);XSpi_Start(&amp;SpiInstance);while(1)&#123;WriteBuffer[0]=(u8)(Count);WriteBuffer[1]=(u8)(Count&gt;&gt;8)&amp;0x0f;Count=Count+43;if(Count==4096) Count=0;TransferInProgress = TRUE;XSpi_Transfer(&amp;SpiInstance,WriteBuffer,(void*)0,2);while(TransferInProgress);&#125;return XST_SUCCESS;&#125;void SpiIntrandler(void *CallBackRef, u32 StatusEvent, u32 ByteCount)&#123; TransferInProgress = FALSE; if (StatusEvent != XST_SPI_TRANSFER_DONE)&#123; Error++;&#125; &#125; ​​​ 感谢GJL大佬的分享]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>最小系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最小系统建立——文档索引]]></title>
    <url>%2F2018%2F06%2F21%2Fe6-9c-80-e5-b0-8f-e7-b3-bb-e7-bb-9f-e5-bb-ba-e7-ab-8b-e6-96-87-e6-a1-a3-e7-b4-a2-e5-bc-95%2F</url>
    <content type="text"><![CDATA[七段数码管平移 UART串口 16位按键开关 16位led流水灯 贪吃蛇 AD&amp;DA]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>最小系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安卓程序反编译测试——夸克浏览器（持续更新）]]></title>
    <url>%2F2018%2F06%2F18%2Fe5-ae-89-e5-8d-93-e7-a8-8b-e5-ba-8f-e5-8f-8d-e7-bc-96-e8-af-91-e6-b5-8b-e8-af-95-e5-a4-b8-e5-85-8b-e6-b5-8f-e8-a7-88-e5-99-a8-ef-bc-88-e6-8c-81-e7-bb-ad-e6-9b-b4-e6-96-b0-ef-bc-89%2F</url>
    <content type="text"><![CDATA[基于java环境对安卓版的夸克浏览器进行反编译测试 初步涉及反编译的工作，面对成山的解包源代码文件不知从何找起，这个时候搜索就给我提供了很大的方便，如果开发者足够的良心尽责，那么所有的常用的变量的名称都是用正常的英文编写的，这样在查找的时候就比较方便。 最开始的简单编译我主要从如下的xml文档中找到源代码相关的信息进行修改这里用到的源代码文档为dimens（尺寸规定），login_page(登陆页），strings（文本翻译对应的文档） 1.对dimens的编辑 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;resources&gt;&lt;string name="abc_action_bar_home_description"&gt;Navigate home&lt;/string&gt;&lt;string name="abc_action_bar_home_description_format"&gt;%1$s, %2$s&lt;/string&gt;&lt;string name="abc_action_bar_home_subtitle_description_format"&gt;%1$s, %2$s, %3$s&lt;/string&gt;&lt;string name="abc_action_bar_up_description"&gt;Navigate up&lt;/string&gt;&lt;string name="abc_action_menu_overflow_description"&gt;More options&lt;/string&gt;&lt;string name="abc_action_mode_done"&gt;Done&lt;/string&gt;&lt;string name="abc_activity_chooser_view_see_all"&gt;See all&lt;/string&gt;&lt;string name="abc_activitychooserview_choose_application"&gt;Choose an app&lt;/string&gt;&lt;string name="abc_capital_off"&gt;OFF&lt;/string&gt;&lt;string name="abc_capital_on"&gt;ON&lt;/string&gt;&lt;string name="abc_search_hint"&gt;Search…&lt;/string&gt;&lt;string name="abc_searchview_description_clear"&gt;Clear query&lt;/string&gt;&lt;string name="abc_searchview_description_query"&gt;Search query&lt;/string&gt;&lt;string name="abc_searchview_description_search"&gt;Search&lt;/string&gt;&lt;string name="abc_searchview_description_submit"&gt;Submit query&lt;/string&gt;&lt;string name="abc_searchview_description_voice"&gt;Voice search&lt;/string&gt;&lt;string name="abc_shareactionprovider_share_with"&gt;Share with&lt;/string&gt;&lt;string name="abc_shareactionprovider_share_with_application"&gt;Share with %s&lt;/string&gt;&lt;string name="abc_toolbar_collapse_description"&gt;Collapse&lt;/string&gt;&lt;string name="status_bar_notification_info_overflow"&gt;999+&lt;/string&gt;&lt;string name="about_setting_view_forum"&gt;(｢･ω･)｢&lt;/string&gt;&lt;string name="about_setting_view_privacy_agreement"&gt;基于夸克修改&lt;/string&gt;&lt;string name="about_setting_view_uc"&gt;皮皮温情出品&lt;/string&gt;&lt;string name="about_setting_view_useragreement"&gt;皮皮&lt;/string&gt;&lt;string name="about_setting_view_webcore_info"&gt;河汉清且浅 相去复几许&lt;/string&gt;&lt;string name="about_setting_window_function"&gt;功能介绍&lt;/string&gt;&lt;string name="about_setting_window_share"&gt;分享给好友&lt;/string&gt;&lt;string name="about_setting_window_title"&gt;关于&lt;/string&gt;&lt;string name="about_setting_window_upgrade"&gt;_(:з」∠)_&lt;/string&gt;&lt;string name="about_version_prefix" /&gt;&lt;string name="account_invalid_st"&gt;请重新登录&lt;/string&gt;&lt;string name="ad_block_block_mannual_switcher"&gt;广告标记&lt;/string&gt;&lt;string name="ad_block_rule_empty_view_text"&gt;没有已标识的广告&lt;/string&gt;&lt;string name="ad_block_rule_title_view_text"&gt;已添加的广告规则&lt;/string&gt;&lt;string name="ad_block_rule_view_delete_text"&gt;删除&lt;/string&gt;&lt;string name="ad_block_rule_window_title"&gt;广告过滤&lt;/string&gt;&lt;string name="add_favorite"&gt;收藏到夸克&lt;/string&gt;&lt;string name="allinnavi"&gt;精选站点&lt;/string&gt;&lt;string name="app_name"&gt;夸克&lt;/string&gt;&lt;string name="app_name_in_launcher"&gt;夸克&lt;/string&gt; 对部分的xml中的注释进行修改达到修改全局内文字翻译的效果 2.login界面修改 123456789101112131415161718192021222324252627&lt;?xml version="1.0" encoding="utf-8" ?&gt;&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:orientation="vertical" android:layout_width="0.0dip" android:layout_height="0.0dip"&gt; &lt;LinearLayout android:gravity="center_vertical" android:orientation="horizontal" android:layout_width="0.0dip" android:layout_height="0.0dip" android:layout_marginTop="0.0dip" android:layout_marginBottom="0.0dip"&gt; &lt;ImageView android:id="@id/personal_login_image" android:layout_width="0.0dip" android:layout_height="0.0dip" android:layout_marginLeft="0.0dip" /&gt; &lt;LinearLayout android:orientation="vertical" android:layout_width="0.0dip" android:layout_height="0.0dip" android:layout_marginLeft="0.0dip"&gt; &lt;TextView android:textSize="0.0dip" android:id="@id/personal_login_title" android:layout_width="0.0dip" android:layout_height="0.0dip" android:text="@string/personal_login_page_title" /&gt; &lt;TextView android:textSize="0.0dip" android:id="@id/personal_login_subtitle" android:layout_width="0.0dip" android:layout_height="0.0dip" android:layout_marginTop="0.0dip" android:text="@string/personal_login_page_subtitle" /&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:orientation="vertical" android:id="@id/personal_login_phone_container" android:layout_width="0.0dip" android:layout_height="0.0dip" android:layout_marginLeft="0.0dip" android:layout_marginRight="0.0dip"&gt; &lt;com.ucweb.materialedittext.MaterialEditText android:textSize="0.0dip" android:id="@id/personal_login_phone_edit" android:layout_width="0.0dip" android:layout_height="0.0dip" /&gt; &lt;TextView android:textSize="0.0dip" android:layout_gravity="right" android:id="@id/personal_login_get_idcode_btn" android:paddingTop="0.0dip" android:paddingBottom="0.0dip" android:layout_width="0.0dip" android:layout_height="0.0dip" android:text="@string/cloud_sync_get_verif_code" android:singleLine="true" /&gt; &lt;/LinearLayout&gt; &lt;FrameLayout android:id="@id/personal_login_idcode_container" android:visibility="gone" android:layout_width="0.0dip" android:layout_height="0.0dip" android:layout_marginLeft="0.0dip" android:layout_marginRight="0.0dip"&gt; &lt;LinearLayout android:orientation="vertical" android:layout_width="0.0dip" android:layout_height="0.0dip"&gt; &lt;com.ucweb.materialedittext.MaterialEditText android:textSize="0.0dip" android:id="@id/personal_login_idcode_edit" android:layout_width="0.0dip" android:layout_height="0.0dip" /&gt; &lt;TextView android:textSize="0.0dip" android:layout_gravity="right" android:id="@id/personal_login_retrieve_idcode_btn" android:paddingTop="0.0dip" android:paddingBottom="0.0dip" android:layout_width="0.0dip" android:layout_height="0.0dip" android:text="@string/cloud_sync_again_verif_code" android:singleLine="true" /&gt; &lt;/LinearLayout&gt; &lt;TextView android:textSize="0.0dip" android:gravity="center" android:layout_gravity="right" android:id="@id/personal_login_send_tip" android:paddingLeft="0.0dip" android:paddingRight="0.0dip" android:layout_width="0.0dip" android:layout_height="0.0dip" android:layout_marginTop="0.0dip" android:text="已发送到18920787888" /&gt; &lt;/FrameLayout&gt; &lt;View android:layout_width="0.0dip" android:layout_height="0.0dip" android:layout_weight="1.0" /&gt; &lt;LinearLayout android:layout_gravity="center_horizontal" android:orientation="horizontal" android:layout_width="0.0dip" android:layout_height="0.0dip" android:layout_marginBottom="16.0dip"&gt; &lt;ImageView android:id="@id/personal_login_weibo" android:padding="0.0dip" android:layout_width="0.0dip" android:layout_height="0.0dip" android:layout_marginRight="0.0dip" /&gt; &lt;ImageView android:id="@id/personal_login_weixin" android:padding="0.0dip" android:layout_width="0.0dip" android:layout_height="0.0dip" android:layout_marginRight="0.0dip" /&gt; &lt;ImageView android:id="@id/personal_login_qq" android:padding="0.0dip" android:layout_width="0.0dip" android:layout_height="0.0dip" /&gt; &lt;/LinearLayout&gt;&lt;/LinearLayout&gt; 这里把所有关于登陆的窗口全部设置为0尺寸达到去掉登陆界面的目的 3.dimens修改 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;dimen name="dicover_page_bookmark_item_arrow_marginright"&gt;2.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_bookmark_item_height"&gt;50.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_bookmark_item_icon_marginleft"&gt;24.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_bookmark_item_icon_size"&gt;22.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_bookmark_item_inner_icon_size"&gt;16.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_bookmark_item_title_marginleft"&gt;18.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_bookmark_item_title_marginright"&gt;16.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_bookmark_item_title_size"&gt;14.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_close_btn_width"&gt;22.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_close_container_width"&gt;100.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_gridview_column_width"&gt;66.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_lightapp_item_extend_add_margin_right"&gt;4.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_lightapp_item_extend_add_width"&gt;30.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_lightapp_item_extend_category_margin_bottom"&gt;3.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_lightapp_item_extend_category_textsize"&gt;10.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_lightapp_item_extend_height"&gt;66.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_lightapp_item_extend_icon_margin_left"&gt;12.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_lightapp_item_extend_icon_margin_right"&gt;16.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_lightapp_item_extend_icon_width"&gt;40.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_lightapp_item_extend_space"&gt;12.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_lightapp_item_extend_title_width"&gt;52.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_lightapp_item_icon_margin_bottom"&gt;10.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_lightapp_item_icon_width"&gt;56.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_lightapp_item_textsize"&gt;12.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_lightapp_item_title_margin_bottom"&gt;26.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_padding_left"&gt;24.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_plugin_container_margin_bottom"&gt;10.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_plugin_item_btn_height"&gt;30.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_plugin_item_btn_width"&gt;30.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_plugin_item_height"&gt;70.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_plugin_item_image_height"&gt;70.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_plugin_item_image_width"&gt;150.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_plugin_item_margin_bottom"&gt;10.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_plugin_item_margin_right"&gt;12.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_plugin_item_padding"&gt;4.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_plugin_item_width"&gt;150.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_pullup_enter_delta_slop"&gt;50.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_tab_height"&gt;60.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_title_margin_top"&gt;16.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_title_textsize"&gt;14.0dip&lt;/dimen&gt;&lt;dimen name="dicover_page_toolbar_height"&gt;50.0dip&lt;/dimen&gt; 第一部分，查找关键字dicover和main找到发现页相关的尺寸调整，修改发现页的字体大小和图标大小。 1234567891011121314&lt;dimen name="launcher_widget_delete_button_offset"&gt;3.0dip&lt;/dimen&gt;&lt;dimen name="launcher_widget_height_portrait"&gt;76.0dip&lt;/dimen&gt;&lt;dimen name="launcher_widget_icon_margin_top_portrait"&gt;10.0dip&lt;/dimen&gt;&lt;dimen name="launcher_widget_iconview_height_portrait"&gt;40.0dip&lt;/dimen&gt;&lt;dimen name="launcher_widget_iconview_width_portrait"&gt;40.0dip&lt;/dimen&gt;&lt;dimen name="launcher_widget_paddingbottom"&gt;0.0dip&lt;/dimen&gt;&lt;dimen name="launcher_widget_paddingleft"&gt;0.0dip&lt;/dimen&gt;&lt;dimen name="launcher_widget_paddingright"&gt;0.0dip&lt;/dimen&gt;&lt;dimen name="launcher_widget_paddingtop"&gt;0.0dip&lt;/dimen&gt;&lt;dimen name="launcher_widget_title_margin_bottom_portrait"&gt;0.0dip&lt;/dimen&gt;&lt;dimen name="launcher_widget_title_margin_top_portrait"&gt;7.0dip&lt;/dimen&gt;&lt;dimen name="launcher_widget_title_padding_x"&gt;4.0dip&lt;/dimen&gt;&lt;dimen name="launcher_widget_title_textsize_portrait"&gt;11.0dip&lt;/dimen&gt;&lt;dimen name="launcher_widget_width_portrait"&gt;56.599976dip&lt;/dimen&gt; 第二部分，查找关于插件的相关代码，修改插件的尺寸和图标大小 12345678910111213141516171819&lt;dimen name="main_menu_guide_tip_arrow_margin_top"&gt;9.0dip&lt;/dimen&gt;&lt;dimen name="main_setting_dot_size_margin_left"&gt;4.0dip&lt;/dimen&gt;&lt;dimen name="main_setting_view_item_height"&gt;60.0dip&lt;/dimen&gt;&lt;dimen name="mainmenu_bg_radius"&gt;20.0dip&lt;/dimen&gt;&lt;dimen name="mainmenu_content_height"&gt;258.0dip&lt;/dimen&gt;&lt;dimen name="mainmenu_content_padding"&gt;14.0dip&lt;/dimen&gt;&lt;dimen name="mainmenu_firstrow_margin_top"&gt;90.0dip&lt;/dimen&gt;&lt;dimen name="mainmenu_item_icon_size"&gt;30.0dip&lt;/dimen&gt;&lt;dimen name="mainmenu_item_icon_tips_size"&gt;5.0dip&lt;/dimen&gt;&lt;dimen name="mainmenu_item_text_margin_top"&gt;8.0dip&lt;/dimen&gt;&lt;dimen name="mainmenu_item_text_size"&gt;10.0dip&lt;/dimen&gt;&lt;dimen name="mainmenu_left_image_width"&gt;40.0dip&lt;/dimen&gt;&lt;dimen name="mainmenu_left_lable_maxwidth"&gt;200.0dip&lt;/dimen&gt;&lt;dimen name="mainmenu_leftview_margin_right"&gt;15.0dip&lt;/dimen&gt;&lt;dimen name="mainmenu_leftview_margin_top"&gt;30.0dip&lt;/dimen&gt;&lt;dimen name="mainmenu_margin_bottom"&gt;10.0dip&lt;/dimen&gt;&lt;dimen name="mainmenu_margin_x"&gt;10.0dip&lt;/dimen&gt;&lt;dimen name="mainmenu_row_height"&gt;74.0dip&lt;/dimen&gt;&lt;dimen name="media_menu_bottom_margin"&gt;2.0dip&lt;/dimen&gt; 第三部分，查找菜单的相关代码，修改main里的menu菜单的尺寸，找到与登陆相关的代码修改为负值，找到上下菜单边距的缺省值和填充值进行自定义 123456789&lt;dimen name="user_feedback_bbs_tip_textsize"&gt;13.0dip&lt;/dimen&gt;&lt;dimen name="user_feedback_contact_input_box_height"&gt;33.0dip&lt;/dimen&gt;&lt;dimen name="user_feedback_content_input_box_height"&gt;150.0dip&lt;/dimen&gt;&lt;dimen name="user_feedback_content_input_box_margin_bottom"&gt;16.0dip&lt;/dimen&gt;&lt;dimen name="user_feedback_content_input_box_margin_top"&gt;20.0dip&lt;/dimen&gt;&lt;dimen name="user_feedback_content_input_box_margin_x"&gt;30.0dip&lt;/dimen&gt;&lt;dimen name="user_feedback_content_input_box_padding_x"&gt;14.0dip&lt;/dimen&gt;&lt;dimen name="user_feedback_content_input_box_padding_y"&gt;12.0dip&lt;/dimen&gt;&lt;dimen name="user_feedback_content_textsize"&gt;16.0dip&lt;/dimen&gt; 第四部分，修改feedback的相关文字和尺寸 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;dimen name="clound_sync_allow_tip_margin_top"&gt;80.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_allow_tip_textsize"&gt;10.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_center_login_item_icon_margin_bottom"&gt;16.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_center_login_item_name_textsize"&gt;12.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_center_qq_login_margin_right"&gt;54.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_content_icon_padding"&gt;6.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_edit_under_line_height"&gt;1.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_edit_under_line_select_height"&gt;1.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_edittext_text_size"&gt;16.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_edittext_width"&gt;230.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_exit_account_margin_right"&gt;10.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_exit_container_margin_bottom"&gt;24.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_exit_container_margin_top"&gt;20.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_import_btn_height"&gt;30.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_import_btn_width"&gt;187.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_item_arrow_margin_right"&gt;16.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_item_arrow_size"&gt;22.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_item_desc_text_size"&gt;14.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_item_import_padding_bottom"&gt;14.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_item_import_padding_top"&gt;14.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_item_import_text_size"&gt;12.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_item_margin_inner_right"&gt;10.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_item_margin_left"&gt;24.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_item_padding_bottom"&gt;23.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_item_padding_top"&gt;23.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_item_text_size"&gt;14.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_login_btn_height"&gt;50.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_login_btn_text_size"&gt;14.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_login_btn_width"&gt;156.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_login_shape_radius"&gt;25.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_logo_height"&gt;87.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_logo_margin_top"&gt;88.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_logo_width"&gt;138.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_margin_logo_top"&gt;88.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_margin_logo_top_min"&gt;60.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_now_text_size"&gt;14.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_other_way_line_height"&gt;1.0px&lt;/dimen&gt;&lt;dimen name="clound_sync_other_way_line_width"&gt;48.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_other_way_margin"&gt;62.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_other_way_phone_margin"&gt;42.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_other_way_text_margin_bottom"&gt;32.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_other_way_text_margin_left"&gt;32.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_other_way_text_margin_right"&gt;32.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_other_way_text_margin_top"&gt;24.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_other_way_text_size"&gt;10.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_phone_number_margin_left"&gt;60.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_phone_number_margin_right"&gt;60.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_recent_text_size"&gt;10.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_sync_btn_container_margin_top"&gt;34.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_sync_btn_height"&gt;50.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_sync_btn_width"&gt;152.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_verif_code_stroke"&gt;1.0px&lt;/dimen&gt;&lt;dimen name="clound_sync_verif_code_text_height"&gt;30.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_verif_code_text_size"&gt;14.0dip&lt;/dimen&gt;&lt;dimen name="clound_sync_verif_code_text_width"&gt;110.0dip&lt;/dimen&gt; 第五部分，找到云同步相关的代码，修改文字和云同步的界面，我直接选择去掉了同步界面 3.进阶修改class文件 打开反编译后文件夹里的class.dex文件使用dex查看器打开，修改里面的升级更新相关代码]]></content>
      <categories>
        <category>网络技术</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>破解</tag>
        <tag>安卓开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于最小系统—UART串口设计]]></title>
    <url>%2F2018%2F06%2F18%2Fe5-9f-ba-e4-ba-8e-e6-9c-80-e5-b0-8f-e7-b3-bb-e7-bb-9f-uart-e4-b8-b2-e5-8f-a3-e8-ae-be-e8-ae-a1%2F</url>
    <content type="text"><![CDATA[基于最小系统的UART实验，要求实现双板之间的串口信息通信 使用Xilinx的NEXY4板 提供两种程序代码 1.使用attribute的io函数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include "xparameters.h"#include"xintc.h"#include"xil_io.h"#include"xil_types.h"#include"mb_interface.h"#include"stdio.h"#define dip_data 0x00#define dip_tri 0x04#define dip_isr 0x0120#define led_data 0x00#define led_tri 0x04#define led_isr 0x0120#define intc_isr 0x00#define intc_ier 0x08#define intc_iar 0x0c#define intc_mer 0x1c#define uart_rx 0x00#define uart_tx 0x04#define uart_stat 0x08#define uart_ctl 0x0c#define gpio_base 0x40000000//gpio ,uart address#define led 0x40040000#define intc_base 0x41200000#define uart_base 0x40640000void My_ISR(void)__attribute__((interrupt_handler));void Initialize();void Uarthandler();void delay_50ms();short Rx_flag;unsigned char rxData;int txtime;int main(void)&#123; xil_printf("\r\n running test\r\n"); Initialize(); while(1) &#123; if(Rx_flag) &#123; xil_printf("the rx data is0x%x\r\n",rxData); Rx_flag=0; &#125; delay_50ms(); txtime=txtime+1; if(txtime==10000) txtime=0x00; int uart_flag; uart_flag=Xil_In32(uart_base+uart_stat); if(uart_flag&amp;0x04) &#123; if(txtime%2) &#123; int txdata; txdata=Xil_In32(gpio_base+dip_data); Xil_Out32(uart_base+uart_tx,txdata); &#125; &#125;&#125;return 0;&#125;void Initialize() &#123; Rx_flag=0x00; rxData=0x00; txtime=0x00; Xil_Out8(gpio_base+dip_tri,0xff); Xil_Out8(led+led_tri,0x00); Xil_Out8(led+led_data,0x5a); Xil_Out32(uart_base+uart_ctl,0x13); Xil_Out32(intc_base+intc_iar,0xffffffff); Xil_Out32(intc_base+intc_ier,0x80000003); Xil_Out32(intc_base+intc_mer,0x03); microblaze_enable_interrupts(); ​123456789101112131415161718192021222324252627282930313233 &#125;void My_ISR(void)&#123; int status; status=Xil_In32(intc_base+intc_isr); if(status&amp;0x01) &#123; Uarthandler(); &#125; Xil_Out32(intc_base+intc_iar,status);&#125;void Uarthandler()&#123; int uart_flag; uart_flag=Xil_In32(uart_base+uart_stat); if(uart_flag&amp;0x01) &#123; Rx_flag=1; rxData=Xil_In32(uart_base+uart_rx); Xil_Out8(led+led_data,rxData); &#125; Xil_Out32(uart_base+uart_ctl,0x13);&#125;void delay_50ms()&#123; int i; for(i=0;i&lt;5000000;i++);&#125; 2.采用api函数 12345678#include "xparameters.h"#include "xintc.h"#include "xil_io.h"#include "xil_types.h"#include "mb_interface.h"#include "xgpio.h"#include "xuartlite.h"#include "xuartlite_l.h" ​1234567891011121314void Initialize();void SwitchHandler(void *CallBackRef);void RecvHandler();void SendHandler();void Delay(int n);XGpio Dips,Leds;XUartLite uart;XIntc intCtrl;u8 rxBuffer[2];u8 txBuffer[2];u16 rxData;u16 txData; ​123456789101112131415161718192021222324252627282930int main()&#123; xil_printf("\r\nRunning UART Test !\r\n"); Initialize(); while(1); return 0;&#125;void Initialize()&#123; rxBuffer[0]=rxBuffer[1]=txBuffer[0]=txBuffer[1]=0; XGpio_Initialize(&amp;Dips,XPAR_DIP_DEVICE_ID); XGpio_SetDataDirection(&amp;Dips,1,0x0ff); XGpio_Initialize(&amp;Leds,XPAR_LED_DEVICE_ID); XGpio_SetDataDirection(&amp;Leds,1,0x0); XUartLite_Initialize (&amp;uart,XPAR_AXI_UARTLITE_0_DEVICE_ID); XUartLite_SelfTest(&amp;uart); XIntc_Initialize(&amp;intCtrl,XPAR_AXI_INTC_0_DEVICE_ID); XUartLite_ResetFifos(&amp;uart); XGpio_InterruptEnable(&amp;Dips,1); XGpio_InterruptGlobalEnable(&amp;Dips); XUartLite_EnableInterrupt(&amp;uart); XIntc_Enable(&amp;intCtrl,XPAR_AXI_INTC_0_DIP_IP2INTC_IRPT_INTR); XIntc_Enable(&amp;intCtrl,XPAR_AXI_INTC_0_AXI_UARTLITE_0_INTERRUPT_INTR); XIntc_Start(&amp;intCtrl,XIN_REAL_MODE); microblaze_enable_interrupts(); ​ 12345678910111213141516171819202122232425262728293031323334353637 XIntc_Connect(&amp;intCtrl,XPAR_AXI_INTC_0_DIP_IP2INTC_IRPT_INTR,(XInterruptHandler)SwitchHandler,(void*)0); XIntc_Connect(&amp;intCtrl,XPAR_AXI_INTC_0_AXI_UARTLITE_0_INTERRUPT_INTR,(XInterruptHandler)XUartLite_InterruptHandler,&amp;uart); XUartLite_SetRecvHandler (&amp;uart,RecvHandler,&amp;uart); XUartLite_SetSendHandler(&amp;uart, SendHandler, &amp;uart); microblaze_register_handler((XInterruptHandler)XIntc_InterruptHandler,(void*)&amp;intCtrl);&#125;void RecvHandler()&#123; Delay(5); XUartLite_Recv (&amp;uart,rxBuffer,2); rxData=rxBuffer[0]+(rxBuffer[1]&lt;&lt;8); XGpio_DiscreteSet (&amp;Leds,1,rxData); xil_printf("UART receives data ! 0x%x\r\n",rxData);&#125;void SwitchHandler(void *CallBackRef) &#123; txData=XGpio_DiscreteRead(&amp;Dips,1); XGpio_InterruptClear(&amp;Dips,1); txBuffer[0]=(u8)txData; txBuffer[1]=(u8)(txData&gt;&gt;8); Delay(5); XUartLite_Send(&amp;uart,txBuffer,2); &#125;void SendHandler()&#123; xil_printf("UART sends data ! 0x%x\r\n",txData);&#125;void Delay(int n)&#123; int i; for(i=0;i&lt;n*100000;i++);&#125; ​​​ 注意使用io函数写需要弄清楚每个设备接口的基地址 在使用pc端查看terminal端口的打印结果时，选择的板间通信接口应该是标准rs232接口，否则在界面上看不到输出的结果]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>技术</tag>
        <tag>最小系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[华中科技大学——智能小车设计实验]]></title>
    <url>%2F2018%2F06%2F18%2Fe5-8d-8e-e4-b8-ad-e7-a7-91-e6-8a-80-e5-a4-a7-e5-ad-a6-e6-99-ba-e8-83-bd-e5-b0-8f-e8-bd-a6-e8-ae-be-e8-ae-a1-e5-ae-9e-e9-aa-8c%2F</url>
    <content type="text"><![CDATA[利用所给的具有蓝牙模块的智能小车设计，具备自动循迹，红外感应，蓝牙操作的智能小车。 利用灰度传感器实现自动寻迹 利用红外传感器实现红外遥感启动 使用蓝牙串口助手连接小车实现蓝牙操控 实现代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081int L_state=0; void setup()&#123; Serial.begin(9600); pinMode( 18, INPUT); pinMode( 14, INPUT); pinMode( 17, INPUT); pinMode( 16, INPUT); pinMode( 10, OUTPUT); pinMode( 6, OUTPUT); pinMode( 5, OUTPUT); pinMode( 9, OUTPUT); analogWrite(5 , 0); analogWrite(6 , 0); analogWrite(9 , 0); analogWrite(10 , 0);&#125;void loop()&#123; char gets = Serial.read(); if (gets=='l') &#123; analogWrite(5 , 0); analogWrite(6 , 100); analogWrite(9 , 0); analogWrite(10 , 0); L_state=0; &#125; else if (gets=='r') &#123; analogWrite(5 , 0); analogWrite(6 , 0); analogWrite(9 , 0); analogWrite(10 , 100); L_state=0; &#125; else if (gets=='f') &#123; analogWrite(5 , 0); analogWrite(6 , 180); analogWrite(9 , 0); analogWrite(10 , 130); L_state=0; &#125; else if( gets=='s') &#123; analogWrite(5 , 0); analogWrite(6 , 0); analogWrite(9 , 0); analogWrite(10 , 0); L_state=0; &#125; else if( gets=='b') &#123; analogWrite(5 , 180); analogWrite(6 , 0); analogWrite(9 , 130); analogWrite(10 , 0); L_state=0; &#125; else if( gets=='k') L_state=1; //设置红外追踪状态标志 else if( gets=='e') L_state=2; //红外追踪 if(L_state==1) track(); //自动寻迹 else if(L_state==2) trace();&#125; ​12345678910111213141516171819202122232425262728293031323334353637void track()&#123; if (( !( digitalRead(14) ) &amp;&amp; digitalRead(18) )) &#123; analogWrite(5 , 0); analogWrite(6 , 255); analogWrite(9 , 0); analogWrite(10 , 0); &#125; else &#123; if (( !( digitalRead(18) ) &amp;&amp; digitalRead(14) )) &#123; analogWrite(5 , 0); analogWrite(6 , 0); analogWrite(9 , 0); analogWrite(10 , 230); &#125; else &#123; if (( !( digitalRead(14) ) &amp;&amp; !( digitalRead(18) ) )) &#123; analogWrite(5 , 0); analogWrite(6 , 255); analogWrite(9 , 0); analogWrite(10 , 230); &#125; else &#123; analogWrite(5 , 0); analogWrite(6 , 0); analogWrite(9 , 0); analogWrite(10 , 0); &#125; &#125; &#125;&#125; ​​12345678910111213141516171819202122232425262728293031323334353637void trace()&#123; if (( !( digitalRead(16) ) &amp;&amp; digitalRead(17) )) &#123; analogWrite(5 , 0); analogWrite(6 , 220); analogWrite(9 , 0); analogWrite(10 , 0); &#125; else &#123; if (( !( digitalRead(17) ) &amp;&amp; digitalRead(16) )) &#123; analogWrite(5 , 0); analogWrite(6 , 0); analogWrite(9 , 0); analogWrite(10 , 220); &#125; else &#123; if (( digitalRead(16) &amp;&amp; digitalRead(17) )) &#123; analogWrite(5 , 0); analogWrite(6 , 180); analogWrite(9 , 0); analogWrite(10 , 150); &#125; else &#123; analogWrite(5 , 0); analogWrite(6 , 0); analogWrite(9 , 0); analogWrite(10 , 0); &#125; &#125; &#125;&#125; 因为使用的小车存在磨损，在试验的过程中小车的两个轮子的转速可能不同需要使用代码修改两车轮的转速。 灰度传感器的摆放影响了小车在弯道转弯时候的灵敏度，如果设置的速度过快会使小车冲出跑道]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>技术</tag>
        <tag>电工实习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于最小系统的SDK设计——贪吃蛇]]></title>
    <url>%2F2018%2F06%2F16%2Fe5-9f-ba-e4-ba-8e-e6-9c-80-e5-b0-8f-e7-b3-bb-e7-bb-9f-e7-9a-84sdk-e8-ae-be-e8-ae-a1-e8-b4-aa-e5-90-83-e8-9b-87%2F</url>
    <content type="text"><![CDATA[贪吃蛇需要使用VGA在屏幕上输出图像 需要在xps里添加tft的ip内核，并且在最开始的microblaze内核的bram内存大小选择时，尽量使用64k或者128k否则后面添加图形库的时候可能会内存溢出。 时间匆忙，最终实验成功后没有留下成功图，优点小遗憾。 基于NEXY4开发板 贪吃蛇实验代码参考 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include "xtft.h"#include "xparameters.h"#include "xgpio.h"#include "xintc.h"#include "gameover.h"#define TFT_DEVICE_ID XPAR_TFT_0_DEVICE_ID#define TFT_FRAME_ADDR0 XPAR_EMC_0_MEM0_HIGHADDR-0x001FFFFF //定义显示存储器的基地址#define FGCOLOR_grn 0x1c //绿色#define FGCOLOR_blu 0xff2593bf //蓝色#define FGCOLOR_red 0xe0 //红色#define COLOR_BLACK 0x00 //黑色#define COLOR_WRITE 0xff //白色static XTft TftInstance; //实例化tftXTft_Config *TftConfigPtr;XIntc intCtrl; //实例化中断控制器XGpio Btns,Dips; //实例化GPIO#define SCREEN_WIDTH 39 /*游戏屏幕宽度，和实际显示大小成比例*/#define SCREEN_LENGTH 29 /*游戏屏幕长度*/#define START_X 0 /*屏幕起始X坐标*/#define START_Y 0 /*屏幕起始y坐标*/#define ADD_NUM 16 //游戏画面和显示屏幕大小比，即为蛇身一块的大小，即16*16int count = 10; //作为随机数生成的初始种子void Initialize();void Delay();void PushBtnHandler(void *CallBackRef); //按键的中断控制函数void SwithHandler(void *CallBackRef);int pshBtn = 0; //按键有无按下的标志位int state1; //按键状态int state2; //开关状态/*----------------------------------硬件相关初始化及设置------------------------------------------*/void Initialize()&#123; //初始化Btns实例，并设定其为输入方式 XGpio_Initialize(&amp;Btns,XPAR_BUTTON_DEVICE_ID); XGpio_SetDataDirection(&amp;Btns,1,0xff); //初始化Dips实例，并设定其为输入方式 XGpio_Initialize(&amp;Dips,XPAR_DIP_DEVICE_ID); XGpio_SetDataDirection(&amp;Dips,1,0xff); //初始化IntCtrl实例 XIntc_Initialize(&amp;intCtrl,XPAR_AXI_INTC_0_DEVICE_ID); //GPIO中断使能 XGpio_InterruptEnable(&amp;Btns,1); XGpio_InterruptGlobalEnable(&amp;Btns); XGpio_InterruptEnable(&amp;Dips,1); XGpio_InterruptGlobalEnable(&amp;Dips); //对中断控制器进行中断源使能 XIntc_Enable(&amp;intCtrl,XPAR_AXI_INTC_0_BUTTON_IP2INTC_IRPT_INTR); XIntc_Enable(&amp;intCtrl,XPAR_AXI_INTC_0_DIP_IP2INTC_IRPT_INTR); //注册中断服务函数 XIntc_Connect(&amp;intCtrl,XPAR_AXI_INTC_0_BUTTON_IP2INTC_IRPT_INTR, (XInterruptHandler)PushBtnHandler,(void *)0); XIntc_Connect(&amp;intCtrl,XPAR_AXI_INTC_0_DIP_IP2INTC_IRPT_INTR, (XInterruptHandler)SwithHandler,(void *)1); microblaze_enable_interrupts(); //允许处理器处理中断 //注册中断控制器处理函数 microblaze_register_handler((XInterruptHandler)XIntc_InterruptHandler,(void *)&amp;intCtrl); XIntc_Start(&amp;intCtrl,XIN_REAL_MODE); //启动中断控制器 TftConfigPtr=XTft_LookupConfig(TFT_DEVICE_ID); XTft_CfgInitialize(&amp;TftInstance,TftConfigPtr,TftConfigPtr-&gt;BaseAddress); //初始化tft XTft_SetFrameBaseAddr(&amp;TftInstance,TFT_FRAME_ADDR0); //设置tft的存储基地址&#125;void Delay()&#123; int i; for(i=0;i&lt;30000;i++);&#125;void PushBtnHandler(void *CallBackRef)&#123; state1 = XGpio_DiscreteRead(&amp;Btns,1); //读取按键的状态值 pshBtn = 1; XGpio_InterruptDisable(&amp;Btns,1); //暂时禁止button中断 Delay(); //延时，忽略按键弹起再次触发的中断 XGpio_InterruptClear(&amp;Btns,1); //清除中断标志位 XGpio_InterruptEnable(&amp;Btns,1); //再次开放按键中断&#125;void SwithHandler(void *CallBackRef)&#123; state2 = XGpio_DiscreteRead(&amp;Dips,1); XGpio_InterruptClear(&amp;Dips,1);&#125;/*---------------------------------贪吃蛇的主要逻辑部分及显示相关------------------------------------*/enum direc&#123; up, down, left, right &#125;; /*蛇的运动方向*/typedef struct snake&#123; /*蛇身结构体，是蛇的某一部分*/ int x; //横坐标 int y; //纵坐标 struct snake *next; //队列的下一个 struct snake *pre; //队列的前一个 struct snake *end; //队列的尾端&#125;SNAKE;typedef struct&#123; /*食物*/ int x; int y;&#125;FOOD;int Random(int n) /*随机生成食物的位置*/&#123; srand(count++); return (rand() % n);&#125;void BuildSnk(SNAKE *head) /*画出蛇身*/&#123; SNAKE *p = head; while (p != NULL) &#123; XTft_FillScreen(&amp;TftInstance,(p-&gt;x)*ADD_NUM,(p-&gt;y)*ADD_NUM,(p-&gt;x + 1)*ADD_NUM - 1, (p-&gt;y + 1)*ADD_NUM - 1,FGCOLOR_blu); //通过队列索引画出蛇的组成一部分 p = p-&gt;next; &#125;&#125;void RemoveSnk(SNAKE *head) /*清除函数*/&#123; SNAKE *p = head; while (p != NULL) &#123; XTft_FillScreen(&amp;TftInstance,(p-&gt;x)*ADD_NUM,(p-&gt;y)*ADD_NUM,(p-&gt;x + 1)*ADD_NUM - 1, (p-&gt;y + 1)*ADD_NUM - 1,COLOR_BLACK ); //画出蛇的组成一部分 p = p-&gt;next; &#125;&#125;void DeleteSnack(SNAKE *head)&#123; SNAKE *p = head -&gt; end; SNAKE *p_temp; while (p != NULL) &#123; p_temp = p -&gt; pre; free(p); //释放蛇的内存 p = p_temp; &#125;&#125;void Move(int *d) //对中断接受到的键值进行判断，1为上，8为下，2为左，4为右&#123; while (pshBtn) &#123; if (state1 == 1) &#123; if ((*d == left || *d == right) &amp;&amp; *d != down) *d = up; &#125; else if (state1 == 8) &#123; if ((*d == left || *d == right) &amp;&amp; *d != up) *d = down; &#125; else if (state1 == 2) &#123; if ((*d == up || *d == down) &amp;&amp; *d != right) *d = left; &#125; else if (state1 == 4) &#123; if ((*d == up || *d == down) &amp;&amp; *d != left) *d = right; &#125; pshBtn = 0; //标志位置0说明有键按下 &#125;&#125;void IniScreen(SNAKE *head) /*初始化屏幕*/&#123; int i; SNAKE *p1, *p2; /*--------------将蛇初始化，对链表进行一系列设置-------------------*/ head-&gt;x = START_X + SCREEN_WIDTH / 2; head-&gt;y = START_Y + SCREEN_LENGTH / 2; //初始位置为屏幕中间 head-&gt;pre = NULL; p1 = head; i = 0; while (++i &lt; 3) //通过循环建立三个snake数据结构并相连 &#123; p2 = p1; p1 = (SNAKE *)malloc(sizeof(SNAKE)); p1-&gt;x = START_X + SCREEN_WIDTH / 2; p1-&gt;y = START_Y + SCREEN_LENGTH / 2 + i; p1-&gt;end = NULL; p2-&gt;next = p1; p1-&gt;pre = p2; &#125; p1-&gt;next = NULL; head-&gt;end = p1; BuildSnk(head); //显示蛇身&#125;void CreatFood(FOOD *fd, SNAKE *snk) /*生成食物，并且让食物不与蛇体冲突*/&#123; SNAKE *p = snk; int clash = 0; /*标记食物位置是否和蛇发生冲突*/ while (1) &#123; clash = 0; fd-&gt;x = START_X + 1 + Random(SCREEN_WIDTH); /* x控制在边宽内 */ fd-&gt;y = START_Y + 1 + Random(SCREEN_LENGTH); /* y控制在变长内 */ for (; p != NULL; p = p-&gt;next) if (fd-&gt;x == p-&gt;x &amp;&amp; fd-&gt;y == p-&gt;y) &#123; clash = 1; break; &#125; if (clash == 0) break; &#125; XTft_FillScreen(&amp;TftInstance,(fd-&gt;x)*ADD_NUM,(fd-&gt;y)*ADD_NUM,(fd-&gt;x + 1)*ADD_NUM - 1, (fd-&gt;y + 1)*ADD_NUM - 1,FGCOLOR_red); //显示食物&#125;int Eated(SNAKE *head, FOOD *fd) /*有没有吃到食物*/&#123; if (head-&gt;x == fd-&gt;x &amp;&amp; head-&gt;y == fd-&gt;y) ​12345678910111213 return 1; return 0;&#125;int GameOver(SNAKE *head) /*判断游戏结束了没.*/&#123; SNAKE *p; for (p = head-&gt;next; p != NULL; p = p-&gt;next) &#123; if (head-&gt;x == p-&gt;x &amp;&amp; head-&gt;y == p-&gt;y) return 1; ​123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104 &#125; //XTft_Write(&amp;TftInstance,score); return 0;&#125;void GameOver_Show()&#123; int i,j; //XTft_DisableDisplay(&amp;TftInstance); for (j=120;j&lt;232;j++) &#123; for(i=220;i&lt;315;i++) &#123; XTft_SetPixel(&amp;TftInstance,i,j,gImage_gameover[(j-120)*112+i-220]); &#125; &#125; //XTft_EnableDisplay(&amp;TftInstance);&#125;void gaming() /*游戏过程*/&#123; int eat = 0; int direct = up; /* 初始方向为向上 */ FOOD *fd; SNAKE *head, *ptemp; /*最少3个蛇身 + 1个蛇头的时候才会挂*/ head = (SNAKE *)malloc(sizeof(SNAKE)); fd = (FOOD *)malloc(sizeof(FOOD)); while (!pshBtn); //接受按键开始游戏 pshBtn = 0; XTft_ClearScreen(&amp;TftInstance); IniScreen(head); CreatFood(fd, head); while (1) &#123; if(state2!=0b00000000) /*控制暂停*/ &#123; RemoveSnk(head); ptemp = (SNAKE *)malloc(sizeof(SNAKE)); Move(&amp;direct); /*....接受用户选择蛇的运动方向*/ switch (direct) &#123; case up: ptemp-&gt;x = head-&gt;x; ptemp-&gt;y = head-&gt;y - 1; break; case down: ptemp-&gt;x = head-&gt;x; ptemp-&gt;y = head-&gt;y + 1; break; case left: ptemp-&gt;x = head-&gt;x - 1; ptemp-&gt;y = head-&gt;y; break; case right: ptemp-&gt;x = head-&gt;x + 1; ptemp-&gt;y = head-&gt;y; break; &#125; if (!eat) /*如果没吃到，那自然增加蛇的长度*/ &#123; ptemp-&gt;end = head-&gt;end-&gt;pre; //将蛇的尾端位置改变，变为倒数第二个 head-&gt;end-&gt;pre-&gt;next = NULL; //再连接下 free(head-&gt;end); head-&gt;end = NULL; &#125; else &#123; ptemp-&gt;end = head-&gt;end;/*吃到了。。在原有的基础上换一个头，这样就多了一节*/ &#125; head-&gt;pre = ptemp; //链表连接 ptemp-&gt;next = head; ptemp-&gt;pre = NULL; head = ptemp; if (eat = Eated(head, fd)) &#123; CreatFood(fd, head); &#125; if (GameOver(head) || (head-&gt;x == START_X) || (head-&gt;x == START_X + SCREEN_WIDTH ) || (head-&gt;y == START_Y) || (head-&gt;y == START_Y + SCREEN_LENGTH )) //游戏是否结束 &#123; BuildSnk(head); XTft_ClearScreen(&amp;TftInstance); DeleteSnack(head); //别忘了将内存释放掉 free(fd); GameOver_Show(); return; &#125; BuildSnk(head); int i, j; for (i = 0; i &lt; 3000-12*state2 ;i++) for (j = 0; j &lt; 1000; j++); //延时可控制蛇的速度 &#125; &#125;&#125;int main()&#123; Initialize(); GameOver_Show(); while (1) &#123; gaming(); &#125; return 0;&#125; 实现基本功能： 上下左右移动，随机产生食物，每次吃完食物后会加速，撞上边界死亡，出现gameover的图像 其中gameover.h就是定义的游戏结束图像，使用软件将图片转换为c语言的数组导入到sdk环境里即可]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>最小系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于最小系统—16位led流水灯]]></title>
    <url>%2F2018%2F05%2F25%2F8-e4-bd-8dled-e6-b5-81-e6-b0-b4-e7-81-af-e7-9a-84sdk-e7-a8-8b-e5-ba-8f%2F</url>
    <content type="text"><![CDATA[基于Xilinx平台仅提供实验代码和引脚约束实验代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include "xparameters.h"#include "xtmrctr.h"#include "xintc.h"#include "xil_exception.h"#define TMRCTR_DEVICE_ID XPAR_TMRCTR_0_DEVICE_ID#define INTC_DEVICE_ID XPAR_INTC_0_DEVICE_ID#define TMRCTR_INTERRUPT_ID XPAR_INTC_0_TMRCTR_0_VEC_ID#define TIMER_CNTR_0 0#define RESET_VALUE 0X5F5E100void TimerCounterHandler(void *CallBackRef,u8 TmrCtrNumber);XIntc InterruptController;XTmrCtr TimerCounterInst;u32 LedBits;int main(void)&#123; int Status; LedBits=0; Xil_Out32(XPAR_LED_16BITS_BASEADDR+0X4,0X0); Status=XTmrCtr_Initialize(&amp;TimerCounterInst,XPAR_TMRCTR_0_DEVICE_ID); if(Status !=XST_SUCCESS)&#123; return XST_FAILURE; &#125; Status=XIntc_Initialize(&amp;InterruptController,INTC_DEVICE_ID); if(Status !=XST_SUCCESS)&#123; return XST_FAILURE; &#125; Status=XIntc_Connect(&amp;InterruptController,TMRCTR_INTERRUPT_ID, (XInterruptHandler)XTmrCtr_InterruptHandler, (void *)&amp;TimerCounterInst); if(Status !=XST_SUCCESS)&#123; return XST_FAILURE; &#125; Status=XIntc_Start(&amp;InterruptController, XIN_REAL_MODE); if(Status !=XST_SUCCESS)&#123; return XST_FAILURE; &#125; XIntc_Enable(&amp;InterruptController,TMRCTR_INTERRUPT_ID); microblaze_register_handler((XInterruptHandler)XIntc_InterruptHandler,&amp;InterruptController); microblaze_enable_interrupts(); XTmrCtr_SetHandler(&amp;TimerCounterInst,TimerCounterHandler, &amp;TimerCounterInst); XTmrCtr_SetOptions(&amp;TimerCounterInst,TIMER_CNTR_0, XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION | XTC_DOWN_COUNT_OPTION); XTmrCtr_SetResetValue(&amp;TimerCounterInst,TIMER_CNTR_0,RESET_VALUE); XTmrCtr_Start(&amp;TimerCounterInst,TIMER_CNTR_0); while(1); return XST_SUCCESS;&#125;void TimerCounterHandler(void *CallBackRef,u8 TmrCtrNumber)&#123; Xil_Out32(XPAR_LED_16BITS_BASEADDR,1&lt;&lt;LedBits); LedBits++; if(LedBits==16) LedBits=0;&#125; ​ 引脚约束 12345678910111213141516NET "LED_16Bits_GPIO_IO_O_pin&lt;0&gt;" LOC = "T8" | IOSTANDARD="LVCMOS33";NET "LED_16Bits_GPIO_IO_O_pin&lt;1&gt;" LOC = "V9" | IOSTANDARD="LVCMOS33";NET "LED_16Bits_GPIO_IO_O_pin&lt;2&gt;" LOC = "R8" | IOSTANDARD="LVCMOS33";NET "LED_16Bits_GPIO_IO_O_pin&lt;3&gt;" LOC = "T6" | IOSTANDARD="LVCMOS33";NET "LED_16Bits_GPIO_IO_O_pin&lt;4&gt;" LOC = "T5" | IOSTANDARD="LVCMOS33";NET "LED_16Bits_GPIO_IO_O_pin&lt;5&gt;" LOC = "T4" | IOSTANDARD="LVCMOS33";NET "LED_16Bits_GPIO_IO_O_pin&lt;6&gt;" LOC = "U7" | IOSTANDARD="LVCMOS33";NET "LED_16Bits_GPIO_IO_O_pin&lt;7&gt;" LOC = "U6" | IOSTANDARD="LVCMOS33";NET "LED_16Bits_GPIO_IO_O_pin&lt;8&gt;" LOC = "V4" | IOSTANDARD="LVCMOS33";NET "LED_16Bits_GPIO_IO_O_pin&lt;9&gt;" LOC = "U3" | IOSTANDARD="LVCMOS33";NET "LED_16Bits_GPIO_IO_O_pin&lt;10&gt;" LOC = "V1" | IOSTANDARD="LVCMOS33";NET "LED_16Bits_GPIO_IO_O_pin&lt;11&gt;" LOC = "R1" | IOSTANDARD="LVCMOS33";NET "LED_16Bits_GPIO_IO_O_pin&lt;12&gt;" LOC = "P5" | IOSTANDARD="LVCMOS33";NET "LED_16Bits_GPIO_IO_O_pin&lt;13&gt;" LOC = "U1" | IOSTANDARD="LVCMOS33";NET "LED_16Bits_GPIO_IO_O_pin&lt;14&gt;" LOC = "R2" | IOSTANDARD="LVCMOS33";NET "LED_16Bits_GPIO_IO_O_pin&lt;15&gt;" LOC = "P2" | IOSTANDARD="LVCMOS33"; 感谢wzx大佬的贡献]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[华中科技大学电工实习-双重互锁正反转电机]]></title>
    <url>%2F2018%2F05%2F25%2Fe5-8d-8e-e4-b8-ad-e7-a7-91-e6-8a-80-e5-a4-a7-e5-ad-a6-e7-94-b5-e5-b7-a5-e5-ae-9e-e4-b9-a0-e5-8f-8c-e9-87-8d-e4-ba-92-e9-94-81-e6-ad-a3-e5-8f-8d-e8-bd-ac-e7-94-b5-e6-9c-ba%2F</url>
    <content type="text"><![CDATA[设计电路实现双重互锁的正反转电机原理图原理图解析 布线]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>电工实习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于最小系统—16位按键开关拨动输出]]></title>
    <url>%2F2018%2F05%2F22%2Fsdk16-e4-bd-8d-e6-8c-89-e9-94-ae-e5-bc-80-e5-85-b3-e6-ba-90-e4-bb-a3-e7-a0-81%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include "xparameters.h"#include "xgpio.h"#include "xintc.h"#include "stdio.h"void Initialize();void Delay_50ms();void PushBtnHandler(void *CallBackRef);void SwitchHandler(void *CallBackRef);XGpio Btns,Dips;XIntc intCtrl;int pshBtn,pshDip;int state1,state2;int main()&#123; Initialize(); xil_printf("\r\nRunning GpioInterrupt!\r\n"); while(1) &#123; if(pshBtn) &#123; xil_printf("ButtonInterrupt! 0x%x\n\r",state1); pshBtn=0; &#125; if(pshDip) &#123; if(state2&gt;=0x8000) xil_printf("SwitchInterrupt! 1111\n\r"); else if(state2&gt;=0x4000) xil_printf("SwitchInterrupt! 1110\n\r"); else if(state2&gt;=0x2000) xil_printf("SwitchInterrupt! 1101\n\r"); else if(state2&gt;=0x1000) xil_printf("SwitchInterrupt! 1100\n\r"); else if(state2&gt;=0x0800) xil_printf("SwitchInterrupt! 1011\n\r"); else if(state2&gt;=0x0400) xil_printf("SwitchInterrupt! 1010\n\r"); else if(state2&gt;=0x0200) xil_printf("SwitchInterrupt! 1001\n\r"); else if(state2&gt;=0x0100) xil_printf("SwitchInterrupt! 1000\n\r"); else if(state2&gt;=0x0080) xil_printf("SwitchInterrupt! 0111\n\r"); else if(state2&gt;=0x0040) xil_printf("SwitchInterrupt! 0110\n\r"); else if(state2&gt;=0x0020) xil_printf("SwitchInterrupt! 0101\n\r"); else if(state2&gt;=0x0010) xil_printf("SwitchInterrupt! 0100\n\r"); else if(state2&gt;=0x0008) xil_printf("SwitchInterrupt! 0011\n\r"); else if(state2&gt;=0x0004) xil_printf("SwitchInterrupt! 0010\n\r"); else if(state2&gt;=0x0002) xil_printf("SwitchInterrupt! 0001\n\r"); else if(state2&gt;=0x0001) xil_printf("SwitchInterrupt! 0000\n\r"); pshDip=0; &#125; &#125; return 0;&#125;//初始化void Initialize()&#123; //初始化dips，并将其设置为输入 XGpio_Initialize(&amp;Dips,XPAR_DIP_DEVICE_ID); XGpio_SetDataDirection(&amp;Dips,1,0xff); //初始化btns，并将其设置为输入 XGpio_Initialize(&amp;Btns,XPAR_BUTTON_DEVICE_ID); XGpio_SetDataDirection(&amp;Btns,1,0xff); //初始化intctrl XIntc_Initialize(&amp;intCtrl,XPAR_AXI_INTC_0_DEVICE_ID); //GPIO中断使能 XGpio_InterruptEnable(&amp;Btns,1); XGpio_InterruptGlobalEnable(&amp;Btns); XGpio_InterruptEnable(&amp;Dips,1); XGpio_InterruptGlobalEnable(&amp;Dips); //中断控制器进行中断源使能 XIntc_Enable(&amp;intCtrl,XPAR_AXI_INTC_0_BUTTON_IP2INTC_IRPT_INTR); XIntc_Enable(&amp;intCtrl,XPAR_AXI_INTC_0_DIP_IP2INTC_IRPT_INTR); //注册中断服务函数 XIntc_Connect(&amp;intCtrl,XPAR_AXI_INTC_0_BUTTON_IP2INTC_IRPT_INTR,(XInterruptHandler)PushBtnHandler,(void*)0); XIntc_Connect(&amp;intCtrl,XPAR_AXI_INTC_0_DIP_IP2INTC_IRPT_INTR,(XInterruptHandler)SwitchHandler,(void*)0); //允许中断处理器处理中断 microblaze_enable_interrupts(); //注册中断控制器处理函数 microblaze_register_handler((XInterruptHandler)XIntc_InterruptHandler,(void*)&amp;intCtrl); //启动中断控制器 XIntc_Start(&amp;intCtrl,XIN_REAL_MODE);&#125;//延时控制void Delay_50ms()&#123; int i; for(i=0;i&lt;5000000;i++);&#125;//按键中断服务程序void PushBtnHandler(void *CallBackRef)&#123; state1=XGpio_DiscreteRead(&amp;Btns,1);//读取按键状态 pshBtn=1; XGpio_InterruptDisable(&amp;Btns,1);//暂时禁止button中断 Delay_50ms();//延时50ms去抖动 XGpio_InterruptClear(&amp;Btns,1);//清除中断标志位 XGpio_InterruptEnable(&amp;Btns,1);//再次开放按键中断&#125;//开关中断服务程序void SwitchHandler(void *CallBackRef)&#123; state2=XGpio_DiscreteRead(&amp;Dips,1);//读取开关状态 pshDip=1; XGpio_InterruptClear(&amp;Dips,1);//清除中断标志位&#125; 感谢wxk大佬的无私提供]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于最小系统—八位7段数码管平移程序]]></title>
    <url>%2F2018%2F05%2F18%2F7-e6-ae-b5-e6-95-b0-e7-a0-81-e7-ae-a1-e7-9a-84sdk-e7-a8-8b-e5-ba-8f-e5-bc-80-e5-8f-91-e5-ae-9e-e7-8e-b0%2F</url>
    <content type="text"><![CDATA[基于我们建立的最小系统，设计7段数码管的显示程序 创建工程，建立一个工程的文件夹命名为seg_7 启动XPS，打开system.xmp文件 添加GPIO的ip内核 GPIO内核的创建步骤 在界面的下方找到system assemly view窗口在左下角的ip catalog中找到GPIO模块，添加一个外设如图 然后双击AXI General Purpose I/O，点击yes 选择上面的选项，将时钟与端口连接 在port里找到我们刚才建立的gpio接口，将名字命名为seg_7 接下来双击seg_7进行配置 默认不使用中断采取延时的方式进行动态扫描 如下为管脚约束（因为只是使用4位数码管，所以对应的gpio也是4位输出） 1234567891011121314151617181920212223NET "CLK" TNM_NET = sys_clk_pin;TIMESPEC TS_sys_clk_pin = PERIOD sys_clk_pin 100000 kHz;NET"CLK" LOC="E3"|IOSTANDARD ="LVCMOS33";NET"RESET" LOC="E16"|IOSTANDARD ="LVCMOS33";NET"RsRx" LOC="C4"|IOSTANDARD ="LVCMOS33";NET"RsTx" LOC="D4"|IOSTANDARD ="LVCMOS33";NET"seg_7_GPIO2_IO_pin&lt;0&gt;" LOC="L3"|IOSTANDARD ="LVCMOS33";NET"seg_7_GPIO2_IO_pin&lt;1&gt;" LOC="N1"|IOSTANDARD ="LVCMOS33";NET"seg_7_GPIO2_IO_pin&lt;2&gt;" LOC="L5"|IOSTANDARD ="LVCMOS33";NET"seg_7_GPIO2_IO_pin&lt;3&gt;" LOC="L4"|IOSTANDARD ="LVCMOS33";NET"seg_7_GPIO2_IO_pin&lt;4&gt;" LOC="K3"|IOSTANDARD ="LVCMOS33";NET"seg_7_GPIO2_IO_pin&lt;5&gt;" LOC="M2"|IOSTANDARD ="LVCMOS33";NET"seg_7_GPIO2_IO_pin&lt;6&gt;" LOC="L6"|IOSTANDARD ="LVCMOS33";NET"seg_7_GPIO2_IO_pin&lt;7&gt;" LOC="M4"|IOSTANDARD ="LVCMOS33";NET"seg_7_GPIO_IO_pin&lt;0&gt;" LOC="N6"|IOSTANDARD ="LVCMOS33";NET"seg_7_GPIO_IO_pin&lt;1&gt;" LOC="M6"|IOSTANDARD ="LVCMOS33";NET"seg_7_GPIO_IO_pin&lt;2&gt;" LOC="M3"|IOSTANDARD ="LVCMOS33";NET"seg_7_GPIO_IO_pin&lt;3&gt;" LOC="N5"|IOSTANDARD ="LVCMOS33";NET"seg_7_GPIO_IO_pin&lt;4&gt;" LOC="N2"|IOSTANDARD ="LVCMOS33";NET"seg_7_GPIO_IO_pin&lt;5&gt;" LOC="N4"|IOSTANDARD ="LVCMOS33";NET"seg_7_GPIO_IO_pin&lt;6&gt;" LOC="L1"|IOSTANDARD ="LVCMOS33";NET"seg_7_GPIO_IO_pin&lt;7&gt;" LOC="M1"|IOSTANDARD ="LVCMOS33"; 接下来生成bit流文件后点击输出到sdk即可进行c代码的编写 SDK的使用详细见教科书 提供c语言代码 123456789101112131415161718192021222324252627282930/* * gpio.c * * Created on: 2018-5-20 * Author: Landers 皮 */#include"xparameters.h"#include "xil_io.h"int main()&#123; char segcode[8]=&#123;0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x92&#125;; int i,j; int pos=0x7f;//初始位码 Xil_Out8(XPAR_SEG_7_BASEADDR+0x4,0x0);//gpio输出 Xil_Out8(XPAR_SEG_7_BASEADDR+0xc,0x0);//gpio2 output while(1) &#123; for(i=0;i&lt;8;i++) &#123; Xil_Out8(XPAR_SEG_7_BASEADDR,pos);//输出位码 Xil_Out8(XPAR_SEG_7_BASEADDR+0x8,segcode[i]);//输出段码 for(j=0;j&lt;0xa5e10;j++);//delay pos=pos&gt;&gt;1; &#125; pos=0x7f;&#125; /* code */ return 0;&#125; 功能实现四位数码管动态显示数码，已经初始化定义输出为s，默认时间为100mhz太长，已经修改加快。 实验的验收要求使用调用api函数使用中断的方式实现数码管的位移 此时需要添加timer的ip内核和intc中断的ip内核 程序代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include "xparameters.h"#include "xtmrctr.h"#include "xintc.h"#include "xil_exception.h"#define TMRCTR_DEVICE_ID XPAR_TMRCTR_0_DEVICE_ID#define TMRCTR_INTERRUPT_ID XPAR_INTC_0_TMRCTR_0_VEC_ID#define INTC_DEVICE_ID XPAR_INTC_0_DEVICE_ID#define TIMER_CNTR_0 0#define RESET_VALUE 0X5F5E100void TimerCounterHandler(void *CallBackRef, u8 TmrCtrNumber);XIntc InterruptController;XTmrCtr TimerCounterInst;u8 seg_7;int main(void) &#123; int Status; seg_7 = 0x7f; int i=0; Xil_Out8(0x40000004,0x0); Xil_Out8(0x4000000c,0x0); Status = XTmrCtr_Initialize(&amp;TimerCounterInst, TMRCTR_DEVICE_ID); XIntc_Initialize(&amp;InterruptController, INTC_DEVICE_ID); XIntc_Connect(&amp;InterruptController,INTC_DEVICE_ID, (XInterruptHandler)XTmrCtr_InterruptHandler, (void *)&amp;TimerCounterInst);//注册中断服务程序 XIntc_Start(&amp;InterruptController, XIN_REAL_MODE); XIntc_Enable(&amp;InterruptController, TMRCTR_INTERRUPT_ID); microblaze_register_handler((XInterruptHandler)XIntc_InterruptHandler, &amp;InterruptController);// microblaze_enable_interrupts(); XTmrCtr_SetHandler(&amp;TimerCounterInst, TimerCounterHandler, &amp;TimerCounterInst);//注册定时器中断服务程序 XTmrCtr_SetOptions(&amp;TimerCounterInst, TIMER_CNTR_0, XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION | XTC_DOWN_COUNT_OPTION); XTmrCtr_SetResetValue(&amp;TimerCounterInst, TIMER_CNTR_0, RESET_VALUE); XTmrCtr_Start(&amp;TimerCounterInst, TIMER_CNTR_0); while(1); return XST_SUCCESS;&#125;void TimerCounterHandler(void *CallBackRef, u8 TmrCtrNumber) &#123; Xil_Out8(0x40000000, seg_7 ); Xil_Out8(0x40000008,0xf9); seg_7=seg_7&gt;&gt;1; seg_7=seg_7+0x80; int i=0; i++; if(i==8|seg_7==0xff)&#123; seg_7=0x7f; i=0; &#125;&#125; 特别注意 在数码管的向右位移时为整段位移所以上一位数码管的值不会清零，此时在循环语句中添加位码+0x80的语句实现首位的数值进位清零来实现。 例如初始位码为0x7f即01111111，此时第一个数码管亮其余的熄灭，当右移1位时变为00111111（右移时前一位补0参考微机原理），所以此时的灯显示为左边两个都亮。我们要使每次只有一位灯亮即每次位码里只有一个0其他全部是1。 所以我们在右移的语句后面添加位码+0x80的操作，即+10000000.此时每次右移后的0会被改为1，整体平移时会跟随移动。这样01111111的下一次右移就是10111111，满足只有一个灯亮。 在最后的判断语句里当位码为0xff即11111111时应该为所有的灯都熄灭时，此时做循环判定，回到初始位码重新循环。 这里的最终循环判断语句中，使用i=8或位码为0xff来实现。 ![CW2pxf.jpg](https://s1.ax1x.com/2018/05/24/CW2pxf.jpg) 硬件和软件的实现原理分析 1.程序中我们一共有三个handler程序，其中用到的定时器作为产生中断请求的中断源，所以定时器注册的中断服务程序是我们自己需要编写的程序。 2.当中断请求发送给中断控制器，中断控制器会响应中断请求，并且由系统生成一个中断控制器的中断服务程序我们称为控制器服务程序。这个程序里会自动添加产生中断的设备的地址，并且根据系统自己生成的程序查询外部此设备是否产生中断。 3.接着中断控制器会将中断请求信号传送给microblaze的cpu处理，当cpu接收到中断，会根据系统事先生成的中断服务程序（我们称为cpu中断服务）来查询中断的地址，即此程序可以查询中断控制器的中断服务程序，再由中断控制器的服务程序查找到中断源（即timer）的中断请求，并且最终实现定时器中断服务程序]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用ISE平台建立最小系统]]></title>
    <url>%2F2018%2F05%2F17%2Fise-e5-b9-b3-e5-8f-b0-e5-bb-ba-e7-ab-8b-e6-9c-80-e5-b0-8f-e7-b3-bb-e7-bb-9f%2F</url>
    <content type="text"><![CDATA[使用Xilinx ISE平台在平台的tools文件夹下找到xilinx platform studio打开 在本地建立一个文件夹将生成的xmp文件放在指定的文件夹内 本次开发使用nexy4板，选择参数为artix7，speed grade为-1其余的数值均不改变 类别选择单处理器系统然后点击next 如下界面 设置参数，选择32kb的内存空间，然后点击add device从i\o串口类型下选择UART类型，设备名称为RS232，然后点击ok 此时进入主界面，在这里的ports块下可以看见我们建立的接口 因为我们只需要单一的时钟源而nexy4提供的是两个方向相反的时钟源所以需要对时钟进行修改。 在port选项卡中的External port下找到CLK_N,CLK_P右键delete 在下面找到clock_generator_0中的CLKIN，右键选中选择make external 然后我们回到之前的External port里面，找到RS232的I接口，前面的名字修改为RsRx RS232的O接口，前面的名字修改为RsTx 注意i和o的顺序不要搞反，不然后面的管脚约束会出问题 修改后为如下 现在我们建立引脚的约束 在左下角找到project进入 找到ucf文件点击修改 添加约束代码 NET &quot;CLK&quot; TNM_NET = sys_clk_pin; TIMESPEC TS_sys_clk_pin = PERIOD sys_clk_pin 100000 kHz; NET&quot;CLK&quot; LOC=&quot;E3&quot;|IOSTANDARD =&quot;LVCMOS33&quot;; NET&quot;RESET&quot; LOC=&quot;E16&quot;|IOSTANDARD =&quot;LVCMOS33&quot;; NET&quot;RsRx&quot; LOC=&quot;C4&quot;|IOSTANDARD =&quot;LVCMOS33&quot;; NET&quot;RsTx&quot; LOC=&quot;D4&quot;|IOSTANDARD =&quot;LVCMOS33&quot;; 保存 接下来使用SDK设计程序输出最小系统到程序在xps的主界面选择project&gt;export hardware design to SDK，选择export&amp;launch按钮 在工程文件夹中建立一个用来放SDK的文件夹，选择该路径然后点击ok 在主界面file下选择new，xilinx board support package并设置参数 选择standalone后点击finish 接下来弹出窗口，选择ok 进入创建窗口，依次点击file下的new，application project选项 在Board support package项选择Using existing language选择c语言然后点击next，选择hello world作为模板，点击finish 到这里实现了建立最小系统，接下来需要在SDK里写入c语言程序然后在我们的系统里运行。]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大卫戈尔的一生影评]]></title>
    <url>%2F2018%2F05%2F13%2Fe5-a4-a7-e5-8d-ab-e6-88-88-e5-b0-94-e7-9a-84-e4-b8-80-e7-94-9f-e5-bd-b1-e8-af-84%2F</url>
    <content type="text"><![CDATA[大卫戈尔的一生影评 影片名为大卫戈尔的一生，英文译为The Life of David Gale。是一部2003年上映的剧情犯罪类型的电影。 该片由艾伦·帕克导演，查尔斯.伦道夫编剧，凯特·温斯莱特，凯文·斯贝西，劳拉·琳妮主演，由美国环球影业发布。该电影获得了2003年的德国梅林电影节的金熊奖的提名。电影讲述的是一个即将被处死的强奸犯在被审讯的时候被律师发现身上有许多疑点在其生命的最后一段时间里帮他找回清白的故事。导演在故事剧情的安排上别出心裁，一开始让观众觉得大卫罪不可赦，后来让人们开始同情他，最终达到剧情的高潮当作为上帝视角的我们看到了最终导演想要表达的东西后恍然大悟。同时也激起了我们更加深沉的思考，是不是每一部法案的修改都必须要在经过了惨痛的教训后才会吸取经验。影片采用独特的技巧，侧面切入了但是美国的法律不严谨的条例，在当时引起了巨大的反响，让人们对死刑法，自我牺牲和信仰的问题有了更多的思考。 故事线分为两条，一条是女记者贝西被大卫指名接受采访，在现实的世界里调查大卫强奸杀人的真相；另一条线是大卫在监狱里的回忆。 影片开头就交代了大卫为何指名女主角贝西的原因：贝西刚刚做了一个青少年卖淫的报道，然而为了保护的消息来源而坐牢一周，这就表明了女记者是一个正直、善良、负责，并且有良好的职业操守，聪明的人。在监狱里大卫只剩下四天的时间就要被执行死刑了，留给他的时间已经不多了，贝西第一次和助理来到监狱采访，见到了传说中的强奸犯大卫，这里进入倒叙，主人公大卫，曾经是大学哲学系的主任，他坚信生命的意义就是尊重别人的生命，这正是大卫的信仰，所以他不赞同本州的死刑，所以一直倡导废除死刑。原本他要与州长在电视真人秀节目里辩论死刑的意义，这次辩论开始大卫是一直占据上风的，然而妻子的出轨让他心情颓废，导致后来的辩论中大卫失去了理智开始言行不当被州长的一句话问住了无言以对。州长严厉地质问他让他找出一件因为错误判断的死刑案件使得大卫哑口无言。再加上宴会上已经被学校开除的女学生波林诱惑他和他发生了一夜情，女学生却告他强奸，然后又撤销案件。这件事虽然让大卫免除了牢狱之灾但是没有人肯相信他是无辜的，他被原来的大学开除，没有一家公司愿意聘用他，大众都认为这只是因为他有一个好律师，这让大卫的生活几乎崩溃。 第一次的探监访谈至此结束，回到现实里，女记者一开始并不相信大卫一定是无辜的，两人来到康斯坦斯家中的案发现场，通过助理的视角，发现了被害者被杀害的残酷录影带：被害者被手铐铐住，吞下钥匙，头上戴着塑料头套无法呼吸致死。从录像带上面可以看出凶手十分的残忍杀害了助手。当大卫第二次进入回忆，大卫被陷害之后，妻子要跟他离婚，拿走抚养权，卖掉了房子，他被大学开除了，成了一个一无所有的人。接下来他四处求职遇挫，曾经的熟人都不再信任他，亲爱的儿子被前妻带走，他的生命彻底陷入了绝望中。而他唯一信任的好朋友也就是和他抱有相同志愿想要废除死刑的女同事康斯坦斯在被他刺激之后住院，这时大卫才得知康斯坦斯得了白血病所以她剩下的时日不多了，回忆到此嘎然而止。 在记者的调查逐步深入后，贝西和助理在宾馆里得到了一卷录像带，上面的画面足以证明大卫是无辜的，贝西据此推理出那是右派的政治阴谋，右派只是想借此证明死刑是必须存在的。而这时他们发现了一个重要的嫌疑人牛仔，每一次在他们的调查现场时牛仔都会出现在他们的附近貌似在监视他们。于是贝西开始留意到他，让助理暗中监视他的行踪。当记者第三次来到监狱，问大卫那个牛仔的身份，才得知牛仔是康斯坦斯也就是女同事的朋友，在大卫的回忆里，康斯坦斯死的前一天夜里，他和康斯坦斯聊天，康斯坦斯表示自己就快要死了，然而一生只睡过四个男人，于是大卫和康斯坦斯发生了关系，这段床戏导演安排的十分巧妙让观众以为，凶手就是那个牛仔出于对康斯坦斯因爱成恨的心理，牛仔才要陷害大卫。此时大卫也对贝西敞开心扉，他并不害怕死亡，对他来说，死亡只是时间的早晚问题而已，他只是不甘心就这样死去，背着一个强奸犯杀人犯的名号，他不希望在儿子心中自己是这样的人，希望贝西能够还他清白。 在一个不平凡的晚上贝西在旅馆中醒来，因为一条不合逻辑的毛巾，突然反复明白了什么开始怀疑康斯坦斯死亡的真相。于是贝西自己带上手铐和头套亲自做实验，让助理在旁边帮助自己，证明了当人快要窒息的时候一定会挣扎，而录像带里的康斯坦斯自始至终都没有挣扎，怀疑康斯坦斯只是自杀。和大卫一样，同是废除死刑的狂热分子的她，已经是白血病晚期，如果自己反正都要死了，何不去做一些更有意义的事情？然而问题又来了，如果她是自杀，那么她为何处心积虑陷害自己最好的朋友呢？故事到这里开始揭露主题，真相慢慢地浮出了水面，贝西怀疑这些都是牛仔干的，那卷能够证明大卫清白的录像带肯定是被他藏起来，他这么做不过是为了让大卫被处死，之后拿出录像带证明死刑是有可能害死一个无辜的人。此时作为上帝视角的观众我似乎已经明白了剧情所讲的，一个将死之人牺牲了自己为了制造一个假的犯罪现场，让大卫背上杀人犯的罪名，然后被处死，如果这样那么之前州长所说的因为法律被误判死刑的例子就有了，就可以推动废除死刑了。这样看来大卫的确是被冤枉的，他只是这些计划中的一个棋子而牛仔只不过是想要在宣判他死刑完后在放出那段证明他清白的视频，看来牛仔才是幕后想要陷害大卫的人。推理至此，贝西想方设法潜入牛仔家里，找到了录像带，证明康斯坦斯真的是自杀。而这时牛仔却躲在一旁没有阻止贝西找到了录像的记者准备驾车赶去法院将证据交给法官来证明大卫无罪，然而中途汽车抛锚只能狂奔到法院，当记者赶到的时候大卫已经被处死。看到这里我不禁为大卫无辜的死感到同情。 录像带被公开了，大卫是无辜枉死的真相宣之于众，州长在电视上仍然铁血的说死刑不该被废除，然而这件事情的出现让民众有很大的反响，民意大逆转，大家纷纷支持废除死刑。电影到此看似到了高潮，无辜的人献出了自己的生命换取来了死刑的废除。片尾牛仔却突然给女记者寄去了一个包裹，并且写着不能泄露秘密。在包裹里面是一个从未被看过的录像带，里面记载了在助手自杀的现场还有一个人那就是大卫。原来，从头至尾，这一切都是牛仔和大卫共同设下的一局，在女助手知道自己的生命快要到了尽头的时候想到了自杀，而大卫阴差阳错地发现了女助手的死并且自愿加入导演了这样一出杀人案，因为大卫知道如果自己最后关头没有被处死那么最后事情的影响力不会太大，所以他愿意献出自己的生命为了自己一直追寻的事业。 牛仔给了记者属于她的自由钥匙让她不会因为最后大卫的死而愧疚，可是一个法律制度的健全真的需要两条无辜的生命的牺牲吗？只有血淋淋的教训才会唤起人们的意识吗？ 看完了电影，整片给我一种扑面而来的压抑感，导演的安排十分的巧妙，在影片的很多部分都埋下了伏笔，为我们设置一个悬念。我认为本片有两个高潮，一个是在影片的最后女记者狂奔着去法院想要拿出证明大卫无罪的证据却在赶到的那一刻得知了大卫已经被处死的噩耗后的绝望。另外一个是在影片的最后当记者收到牛仔助手的绝密的录像带得知到事情的真相后，内心的愧疚荡然无存同时这里也为观众打开了一扇门，引发了我们更深的思考。 影片的核心一直在讨论着关于死刑法[\[1\]](#_ftn1)的问题,根据电影中的介绍在当时的美国的各州还存在着死刑的法案而本片的主人公正是一位想要废除掉死刑法的哲学教授，他的心中坚信必须要废除掉死刑法案因为它可能会造成无辜的人被误判而使得正义不得伸张。也正是在这样的背景下发生了一系列的事件让他陷入了被判死刑的风波中。影片的一切都安排的很巧妙，从故事一开头看到不幸的人被强奸杀害，一切的错误都指向了主人公大卫戈尔，看到这里我的心中并没有太大的波动开头给我的感受就是杀害了他人的人应该血债血偿，当时的我巴不得这个人赶快从这个世界上消失。然而接下来发生的事情让我感觉到这个事情并没有那么简单。大卫选择了新闻界最具有名声的记者来采访自己，又为自己请了律师为自己辩护不禁让我怀疑他也许真的没有杀人而是有人陷害了他。随着剧情的进展，记者发现事情越来越蹊跷，随着调查的深入真相又仿佛浮出了水面一般让我感到大卫真的是被冤枉的而那位无辜的助手真的只是自杀。随后到来的剧情高潮扯出了整个事件重要的证据-录像带，此刻整个事情似乎都晴朗了。大卫并没有罪只是被陷害了而最让人震惊的地方到了，记者拿着证据的录像带准备交给警方来证明大卫的无罪时法院宣布了他的死亡——一个整片都被蒙在鼓里的可怜人就这样被法律判处了死刑。看上去确实死刑是一个有着争议的地方，所以主角才费尽心思想要废除它。 然而事情到这里还没有结束，当最后的录像带被记者打开她得知了助手身患重病即将被病魔带走选择了自杀，她自导自演了这样的一幕又恰巧被大卫发现最终成就了这样一个被法律误判死刑的悲剧。不得不说大卫和助手是两个勇敢的人，他们是死刑废除的提倡者，却又在废除死刑的道路上进展不顺利，助手在生命最后一刻的无私和大卫愿意为废除法案的决心才最终推动了美国死刑法案的废除。 在历史上死刑的施行一直都是一个有着争议的问题，根据记载美国目前有31个州和联邦政府及军队有死刑法律，其余的州、海外领地和首都華盛頓特區没有死刑。\[1\]在这些没有死刑的地区，绝大多数的最高刑罚是“终身监禁、不得假释”。另外，美国对于死刑是分开审理的（各州規定不一）——也就是说，如果控方希望被告被判死刑，必须事先提出，且只能在死刑与非死刑之间抉择（不能审理过程中改判有期徒刑）。再加上，在美国罪犯有权利选择陪审团制度，而陪审团制度又要求100％通过，因此流审率极高：除了罪恶滔天的罪犯（比如连環杀手、恐怖分子）以外，難以判處死刑。就算能够判處死刑，又因为美国的审判周期极长，一般拖延至十几年乃至数十年才被执行死刑都是正常範疇；而且州和聯邦兩方的上訴程序每多曠日持久、且費用不菲，以致超過執行終身監禁的成本兩、三倍。[\[2\]](#_ftn2)在1970年左右美国针对死刑法律做出过许多的改变，增加了程序的审定和时间，并且对被执行死刑的犯罪类型做了规定。2009年美国新墨西哥州州长理查森签署立法，在该州废除死刑。理查森星期三签署了这项立法，几天前，新墨西哥州参议院以24票比18票批准了这项法案。新墨西哥州众议院已经批准了这项法案。理查森州长签署立法后发表声明说，这对他来说标志着一次“漫长个人之旅”的终结。理查森说，州刑事司法系统很不完善，无法确保无辜民众不会被误判死刑。根据这项立法，新墨西哥州被判处极刑的人将该为终身监禁，而不处决。[\[3\]](#_ftn3) 对于社会的公正而言，杀人偿命在有些人的眼中似乎已经成了常态，那些穷凶恶极的罪犯手上沾染了无数的生命的确应该受到应有的制裁。可是法律最怕的就是漏洞，电影中的主人公就是遇到了漏洞，尽管种种证据都指向了大卫让他身背杀人的罪名离开人世。足以看出不健全的法律制度不仅不能保护人民反而还会伤害他们。Frink认为死刑都不能够停止，至少在某些方面它是惩罚被告和对原告最好的解释[\[4\]](#_ftn4)。无疑只有法律健全的时候才是我们最好的武器，这样就不需要片中的大卫和助手一样用自己的生命换取一个法律制度的健全，在现实的生活中这样的例子存在太多。我们大多数的时候都是后知后觉的，例如当初共享单车爆发的时候缺乏管理，未成年人随意开锁而发生了意外死亡，不论是厂商还是社会公民在这些事情上面都有着疑问就是因为相关的法律还没有健全；最近的网络上反响很大的滴滴司机奸杀了空姐后自杀的事件更是把网约车推向了风口浪尖，无辜的人搭乘顺风车被杀害，而司机也随之自杀刑事事件最终变成了简单的民事诉讼，让管理者重新加强在顺风车行业的监管。 我认为我们不能总是被动地等待事情发生才认识到背后的漏洞，不能总是让每一个制度的背后都是无辜者的教训，只有先知先觉不断地反省自己，上下一同努力才能够有一个完整的制度，才会有一个和谐的社会 [1] 美国死刑制度 参考维基百科https://www.wikiwand.com/zh/%E7%BE%8E%E5%9B%BD%E6%AD%BB%E5%88%91%E5%88%B6%E5%BA%A6 _David Masci. _5 facts about the death penalty_. Pew Research Center. 2017-04-24 [2018-01-04]. _ [2] 维基百科 美国死刑法律 https://www.wikiwand.com/zh/%E7%BE%8E%E5%9B%BD%E6%AD%BB%E5%88%91%E5%88%B6%E5%BA%A6 [3] 美国之声 VOA https://www.voachinese.com/a/a-21-n2009-03-19-voa26-61332047/1024443.html [4] Frink 《Killing Time : Dead Men Waiting on Oregon’s Death Row]]></content>
      <categories>
        <category>奇怪的东西</category>
      </categories>
      <tags>
        <tag>影评</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随机过程编程实验（C++）]]></title>
    <url>%2F2018%2F05%2F11%2Fe9-9a-8f-e6-9c-ba-e8-bf-87-e7-a8-8b-e7-bc-96-e7-a8-8b-e5-ae-9e-e9-aa-8c-ef-bc-88c-ef-bc-89%2F</url>
    <content type="text"><![CDATA[随机模拟的基本方法又称为蒙特卡罗（Monte Carlo）方法。是Velleman与Von Neumann等人在20世纪40年代为研制核武器提出来的，已大量地运用于计算机仿真试验。随机模拟的典型步骤： 1、根据问题构建模拟系统 2、仿真系统中各种分布的随机变量 3、运行模拟系统，进行统计测量 4、分析数据，输出结果 主要工具 基本工具：C、C++等编程模拟、matlab 网络模拟：OPNET Modeler、NS2：大型网络仿真 伪随机数 伪随机数的产生：用户只需给定一个初始的 随机数（种子值），调用该算法，即可按某个固定的公式计算出下一个“随机”数。随后，以新产生出来的“随机”数作为种子，再计算出新的“随机”数。重复调用该算法即可产生出一系列的“随机”数，以满足系统仿真的需要。 伪随机数本质上不是随机的。但只要计算公式选择得当，通过比较严格地统计检验，仍然可以产生出一系列近似于U(0,1)分布并且相对独立的随机数流，这种随机数流对于大多数仿真模型，是能满足需要的。因此，仍然是目前广泛应用的工程方法。 伪随机数产生方法 线性同余法 1）设置y0，即设置种子 2）yn=kyn-1(mod N)，un=yn/N 三组常见的参数 N=1010，k=7，周期≈5×107 （IBM随机数发生器）N=231，k=216+3，周期≈5×108 （ran0） N=231-1，k=75，周期≈2×109 泊松分布 正态分布 实验平台 实验平台介绍 实验平台包含的源文件 –StdAfx.cpp：VC工程自带文件，不能修改 –random.cpp和random.h：工程主文件，不能修改 –Scope.cpp和Scope.h ：画图程序，不能修改 –randomDlg.cpp和randomDlg.h：主界面程序，包括对各个按钮的动作的响应，还包括对各种随机变量的输入参数的设定 –MyRand.cpp和MyRand.h：各种分布的随机变量的产生程序，实验过程中主要完成MyRand.cpp中的函数即可 我们只需要修改myrand.cpp中的代码即可 原始代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445// MyRand.cpp: implementation of the CMyRand class.////////////////////////////////////////////////////////////////////////#include "stdafx.h"#include "random.h"#include "MyRand.h"#include "math.h"#ifdef _DEBUG#undef THIS_FILEstatic char THIS_FILE[]=__FILE__;#define new DEBUG_NEW#endif//////////////////////////////////////////////////////////////////////// Construction/Destruction//////////////////////////////////////////////////////////////////////CMyRand::CMyRand()&#123;&#125;CMyRand::~CMyRand()&#123;&#125;void CMyRand::MyRandInit(void)&#123; N = 0x7FFFFFFF; //2^31-1 K = 16807; //7^5 seed = 2;&#125;/*函数功能，采用线性同余法，根据输入的种子数产生一个伪随机数，如果种子不变， 则将可以重复调用产生一个伪随机序列 利用CMyRand类中定义的全局变量：S, K, N, Y。 其中K和N为算法参数，S用于保存种子数，Y为产生的随机数*/unsigned int CMyRand::MyRand(unsigned int seed)&#123; //添加伪随机数产生代码 ​123456789101112 return Y;&#125;/*函数功能，产生一个在min~max范围内精度为4位小数的平均分布的随机数*/double CMyRand::AverageRandom(double min,double max)&#123; double dResult; dResult = 0; //添加均匀分布随机变量产生代码 ​1234567891011121314 return dResult;&#125;/*函数功能，在min 到max 范围内产生正态分布的随机数miu,最大概率密度处的随机变量，即产生的随机数中,概率最大的那个sigma*/double CMyRand::NormalRandom(double miu, double sigma, double min, double max)&#123; double dResult; dResult = 0; //添加正态分布随机变量产生代码 ​12345678910 return dResult;&#125;/*函数功能，产生指数分布的随机数*/double CMyRand::ExpRandom(double lambda, double min, double max)&#123; double dResult = 0.0; //添加指数分布随机变量产生代码 ​12345678910111213 return dResult;&#125;/*函数功能，产生泊松分布的随机数*/unsigned int CMyRand::PoisonRandom(double lambda, double min, double max)&#123; unsigned int dResult = 0; //添加泊松分布随机变量产生代码 return dResult;&#125; ​1234567/*函数功能，计算任意分布的随机过程的均值*/double CMyRand::Ex(void)&#123; double Ex = 0; //添加均值计算代码 ​12345678910111213 return Ex;&#125;/*函数功能，计算随机过程的自相关序列*/double* CMyRand::Rx(double lambda, int points)&#123; int m,I; double *Rx = (double*)malloc((2*points+1)*sizeof(double)); //添加自相关序列产生代码 //产生的自相关序列存入Rx中，Rx可当作数组使用 //不要在本函数中释放该数组! ​12 return Rx;&#125; 修改后的代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253// MyRand.cpp: implementation of the CMyRand class.////////////////////////////////////////////////////////////////////////#include "stdafx.h"#include "random.h"#include "MyRand.h"#include "math.h"#ifdef _DEBUG#undef THIS_FILEstatic char THIS_FILE[]=__FILE__;#define new DEBUG_NEW#endif//////////////////////////////////////////////////////////////////////// Construction/Destruction//////////////////////////////////////////////////////////////////////CMyRand::CMyRand()&#123;&#125;CMyRand::~CMyRand()&#123;&#125;void CMyRand::MyRandInit(void)&#123; N = 0x7FFFFFFF; //2^31-1 K = 16807; //7^5 seed = 2;&#125;/*函数功能，采用线性同余法，根据输入的种子数产生一个伪随机数，如果种子不变， 则将可以重复调用产生一个伪随机序列 利用CMyRand类中定义的全局变量：S, K, N, Y。 其中K和N为算法参数，S用于保存种子数，Y为产生的随机数*/unsigned int CMyRand::MyRand(unsigned int seed)&#123; if(S==seed) Y=K*Y%N; else &#123; S=seed; Y=K*seed%N; &#125; //添加伪随机数产生代码 ​123456789101112 return Y;&#125;/*函数功能，产生一个在min~max范围内精度为4位小数的平均分布的随机数*/double CMyRand::AverageRandom(double min,double max)&#123; double dResult; dResult = 0; dResult=(double)MyRand(seed)/N; dResult=dResult*(max-min)+min; ​ //添加均匀分布随机变量产生代码 ​12345678910111213141516 return dResult;&#125;/*函数功能，在min 到max 范围内产生正态分布的随机数miu,最大概率密度处的随机变量，即产生的随机数中,概率最大的那个sigma*/double CMyRand::NormalRandom(double miu, double sigma, double min, double max)&#123; double dResult; dResult = 0; for(int i=0;i&lt;12;i++) dResult+=AverageRandom(min,max); dResult=(dResult-6)/(max-min); dResult=dResult*sigma+miu; ​ //添加正态分布随机变量产生代码 ​12345678910111213 return dResult;&#125;/*函数功能，产生指数分布的随机数*/double CMyRand::ExpRandom(double lambda, double min, double max)&#123; double dResult = 0.0; while(dResult&lt;0.01) &#123; dResult=AverageRandom(min,max); &#125; dResult=-1.0*log(dResult)/lambda; ​ //添加指数分布随机变量产生代码 ​123456789101112131415161718 return dResult;&#125;/*函数功能，产生泊松分布的随机数*/unsigned int CMyRand::PoisonRandom(double lambda, double min, double max)&#123; unsigned int dResult = 0; double u=AverageRandom(min,max); int i=0; double p=exp(-1*lambda); double F=p; while(u&gt;=F) &#123; p=lambda*p/(i+1); F+=p; i++; &#125; dResult=i; ​1234 //添加泊松分布随机变量产生代码 return dResult;&#125; ​123456789101112/*函数功能，计算任意分布的随机过程的均值*/double CMyRand::Ex(void)&#123; double Ex = 0; int m; double sum=0; for (m=0;m&lt;1000;m++) &#123; sum+=NormalRandom(0,1.4,0,1); &#125; Ex=sum/m; ​ //添加均值计算代码 ​12 return Ex;&#125; ​12345678910111213/*函数功能，计算随机过程的自相关序列*/double* CMyRand::Rx(double lambda, int points)&#123; int m,I=5; double *Rx = (double*)malloc((2*points+1)*sizeof(double)); //添加自相关序列产生代码 //产生的自相关序列存入Rx中，Rx可当作数组使用 //不要在本函数中释放该数组! for(m=-points;m&lt;points;m++) &#123; Rx[(m+points)]=I*I*exp(-2*lambda*abs(m)); &#125; ​1return Rx; 提供源代码和流程图 最终的代码随机模拟结果如图（上为随机数，下为分布曲线）]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>c++</tag>
        <tag>随机过程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[verilog语言将学号输入到ip内核中]]></title>
    <url>%2F2018%2F05%2F11%2Fverilog-e8-af-ad-e8-a8-80-e5-b0-86-e5-ad-a6-e5-8f-b7-e8-be-93-e5-85-a5-e5-88-b0ip-e5-86-85-e6-a0-b8-e4-b8-ad%2F</url>
    <content type="text"><![CDATA[使用mips语言将底层的汇编指令输入到cpu的内部mips代码示例（使用qtspim仿真） main: addi $2,$0,55 sw $2,0($3) addi $2,$0,48 sw $2,4($3) addi $2,$0,48 sw $2,8($3) addi $2,$0,48 sw $2,12($3) addi $2,$0,48 sw $2,16($3) addi $2,$0,48 sw $2,20($3) addi $2,$0,48 sw $2,24($3) addi $2,$0,48 sw $2,28($3) addi $2,$0,48 sw $2,32($3) addi $2,$0,48 sw $2,36($3) j main 利用addi指令和sw指令将学号的ascall码写入到存储中 放入到qtspim中生成机器码指令集 MEMORY_INITIALIZATION_RADIX=16; MEMORY_INITIALIZATION_VECTOR= 20020055, ac620000, 20020030, ac620004 , 20020030, ac620008, 20020030, ac62000c, 20020030, ac620010, 20020030, ac620014, 20020030, ac620018, 20020030, ac62001c, 20020030, ac620020, 20020030, ac620024, 08100000, 新建verilog项目，建立ip内核为rom和ram选择128位 32位rom内核 从生成的coe文件中导入指令集 代码示例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596module top( input clkin, input reset ); reg [31:0] pc,add4; wire choose4;//4位选择器 wire [31:0] expand2,mux2,mux3,mux4,mux5,address,jmpaddr,inst; wire [4:0]mux1;//选择器 //write for controller wire reg_dst,jmp,branch,memread,memwrite,memtoreg; wire [1:0] aluop; wire alu_src,regwrite; //write for alunit wire zero; wire [31:0] aluRes; //write for aluctr wire [3:0]aluCtr; //write for memory wire [31:0]memreaddata;//memory data //write for register wire [31:0]RsData,RtData;//regfile data //wireforext wire [31:0]expand; always @(negedge clkin) begin if(~reset) begin pc=mux5; add4=pc+4; end else begin pc=32'b0; add4=32'h4; end end ctr mainctr( .opcode(inst[31:26]), .regDst(reg_dst), .aluSrc(alu_src), .memToReg(memtoreg), .regWrite(regwrite), .memRead(memread), .memWrite(memwrite), .branch(branch), .aluop(aluop), .jmp(jmp)); alu alu(.input1(RsData), .input2(mux2), .aluCtr(aluCtr), .zero(zero), .aluRes(aluRes)); aluctr aluctr1(.ALUOp(aluop), .funct(inst[5:0]), .ALUCtr(aluCtr)); dram dmem( .a(aluRes[7:2]), .d(RtData), .clk(!clkin), .we(memwrite), .spo(memreaddata) ); irom imem( .a(pc[8:2]), .clk(clkin), .spo(inst)); regFile regfile( .RsAddr(inst[25:21]), .RtAddr(inst[20:16]), .clk(!clkin), .reset(reset), .regWriteAddr(mux1), .regWriteData(mux3), .regWriteEn(regwrite), .RsData(RsData), .RtData(RtData) ); signext signext(.inst(inst[15:0]),.data(expand)); assign mux1=reg_dst?inst[15:11]:inst[20:16]; assign mux2=alu_src?expand:RtData; assign mux3=memtoreg?memreaddata:aluRes; assign mux4=choose4?address:add4; assign mux5=jmp?jmpaddr:mux4; assign choose4=branch&amp;zero; assign expand2=expand&lt;&lt;2; assign jmpaddr=&#123;add4[31:28],inst[25:0],2'b00&#125;; assign address=pc+expand2; ​123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105endmodulemodule ctr( input [5:0] opcode, output regDst, output aluSrc, output memToReg, output regWrite, output memRead, output memWrite, output branch, output [1:0] aluop, output jmp ); reg regDst; reg aluSrc; reg memToReg; reg regWrite; reg memRead; reg memWrite; reg branch; reg [1:0] aluop; reg jmp; always @(opcode) begin case(opcode) //jmp 6'b000010: begin regDst=0; aluSrc=0; memToReg=0; regWrite=0; memRead=0; memWrite=0; branch=0; aluop=2'b00; jmp=1; end //add,sub,and,or,slt 6'b000000: begin regDst=1; aluSrc=0; memToReg=0; regWrite=1; memRead=0; memWrite=0; branch=0; aluop=2'b10; jmp=0; end //lw 6'b100011: begin regDst=0; aluSrc=1; memToReg=1; regWrite=1; memRead=1; memWrite=0; branch=0; aluop=2'b00; jmp=0; end //sw 6'b101011: begin regDst=0; //donnot care memToReg=0; //donnot care aluSrc=1; regWrite=0; memRead=0; memWrite=1; branch=0; aluop=2'b00; jmp=0; end //beq 6'b000100: begin regDst=0; //donnot care memToReg=0; //donnot care aluSrc=0; regWrite=0; memRead=0; memWrite=0; branch=1; aluop=2'b01; jmp=0; end //addi 6'b001000: begin regDst=0; //donnot care memRead=0; //donnot care memWrite=0; //donnot care aluSrc=1; memToReg=0; regWrite=1; branch=0; aluop=2'b00; jmp=0; end ​​​​​123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657 endcase endendmodulemodule alu( input [31:0] input1, input [31:0] input2, input [3:0] aluCtr, output [31:0] aluRes, output zero ); reg zero; reg [31:0] aluRes; always @(input1,input2,aluRes) begin zero=0; case(aluCtr) 4'b0110: begin aluRes=input1-input2; if(aluRes==0) zero=1; else zero=0; end 4'b0010: aluRes=input1+input2; 4'b0000: aluRes=input1&amp;input2; 4'b0001: aluRes=input1|input2; 4'b1100: aluRes=~(input1|input2); 4'b0111: begin if(input1&lt;input2) aluRes=1; end default: aluRes=0; endcase endendmodulemodule aluctr( input [1:0] ALUOp, input [5:0] funct, output [3:0] ALUCtr ); reg [3:0] ALUCtr; always @(ALUOp,funct) casex(&#123;ALUOp,funct&#125;) 8'b00xxxxxx:ALUCtr=4'b0010; 8'b01xxxxxx:ALUCtr=4'b0110; 8'b1xxx0000:ALUCtr=4'b0010; 8'b1xxx0010:ALUCtr=4'b0110; 8'b1xxx0100:ALUCtr=4'b0000; 8'b1xxx0101:ALUCtr=4'b0001; 8'b1xxx1010:ALUCtr=4'b0111; endcase ​​​12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152endmodulemodule regFile( input clk, input reset, input [31:0] regWriteData, input [4:0] regWriteAddr, input regWriteEn, output [31:0] RsData, output [31:0] RtData, input [4:0] RsAddr, input [4:0] RtAddr );reg [31:0] regs[0:31];assign RsData = (RsAddr==5'b0)?32'b0:regs[RsAddr];assign RtData = (RtAddr==5'b0)?32'b0:regs[RtAddr];integer i;always @(posedge clk) begin if(!reset) begin if(regWriteEn==1) regs[regWriteAddr]=regWriteData; end else begin for(i=0;i&lt;32;i=i+1) regs[i]=0; endend endmodulemodule signext( input [15:0] inst, output [31:0] data );assign data=inst[15:15]?&#123;16'hffff,inst&#125;:&#123;16'h0000,inst&#125;;endmoduleregfiled的test代码module regsim; // Inputs reg clk; reg reset; reg [31:0] regWriteData; reg [4:0] regWriteAddr; reg regWriteEn; reg [4:0] RsAddr; reg [4:0] RtAddr; ​123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960 // Outputs wire [31:0] RsData; wire [31:0] RtData; // Instantiate the Unit Under Test (UUT) regFile uut ( .clk(clk), .reset(reset), .regWriteData(regWriteData), .regWriteAddr(regWriteAddr), .regWriteEn(regWriteEn), .RsData(RsData), .RtData(RtData), .RsAddr(RsAddr), .RtAddr(RtAddr) );parameter PERIOD=20; always begin clk=0; #(PERIOD/2) clk=1; #(PERIOD/2); endinteger i; initial begin // Initialize Inputs clk = 0; reset = 0; regWriteData = 0; regWriteAddr = 0; regWriteEn = 0; RsAddr = 0; RtAddr = 0; ​​1234567891011121314151617 // Wait 100 ns for global reset to finish #100; // Add stimulus here regWriteData=32'h55aaaa55; regWriteEn=1; reset=1; #100; reset=0; end ​​12345678910111213 always begin for(i=31;i&gt;=1;i=i-1)begin regWriteAddr=i; RsAddr=i; #PERIOD; end end ​​1endmodule 最后仿真topsim，观察rom中的学号 按照步骤，选择top、utt文件中的imem观察spo信号将spo转换为ascll值 将时间域设置为1s使学号完全输出 最终的结果 对regfile模块的仿真 实验结果分析 spo是什么：spo为32位数值实际为输入的指令，在定义的mips指令里我们只添加了addi和sw指令 为什么学号的每位间有额外数字b，因为当we有效时为写入信号，将学号的每一位输入到存储里。当we无效时从寄存器2里读取数据，执行了addi指令，addi指令的32位中对应数字的那部分转化为ascll就是b]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>mips汇编学习</tag>
        <tag>verilog</tag>
        <tag>verilog学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[电工实习-设计声控led灯的pcb板]]></title>
    <url>%2F2018%2F05%2F09%2Fe7-94-b5-e5-b7-a5-e5-ae-9e-e4-b9-a0-e8-ae-be-e8-ae-a1-e5-a3-b0-e6-8e-a7led-e7-81-af-e7-9a-84pcb-e6-9d-bf%2F</url>
    <content type="text"><![CDATA[设计PCB板使用altium designer设计样图和板的结构 设计过程设计顶层的doc原理图文档 设计板结构(注意是单层板） 导入库文件，生成 cam文件导入到数控机床实现 成品展示]]></content>
      <categories>
        <category>奇怪的东西</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>电工实习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[win10配置Aria2下载GUI图形界面]]></title>
    <url>%2F2018%2F05%2F09%2Fwindows-e4-b8-8baria2-e5-ae-89-e8-a3-85-e6-95-99-e7-a8-8b%2F</url>
    <content type="text"><![CDATA[Aria2aria2是新一代的下载工具，最早出现在linux平台需要使用命令行进行操作，最大的特点就是支持.torrent和magnet协议的下载，所以后来被移植到windows和mac平台，作为替代迅雷和百度网盘的下载工具。 windows平台的配置稍显麻烦，并且好看的图形界面很少，mac傻瓜式的一键配置是真的好用啊! 在github上的开源aria2项目 https://github.com/itgoyo/Aria2 Aria2的打包下载这里是github源代码地址 https://codeload.github.com/itgoyo/Aria2/zip/master 谷歌云盘下载 https://drive.google.com/open?id=1YGO007DnTRRaKgBeu2kVEhih6YjFvf6f 图形化界面 http://kotlinandroid.net/Aria2-GUI http://ziahamza.github.io/webui-aria2/ http://binux.github.io/yaaw/demo/ 选择一个即可 使用方法打开aria2压缩包内部的文件，找到ariac.exe和start.bat文件 打开.bat文件start.bat并且一直保持后台 然后打开ariac.exe文件 打开web图形化界面 http://ziahamza.github.io/webui-aria2/ 建议使用chrome浏览器，因为接下来还可以用chrome插件实现aria2下载 界面如下 点击设置，连接设置，如下设置即可 添加任务即可下载，每次使用前务必打开start.bat文件和aria2.exe文件 github上http下载工具开源代码 https://github.com/monkeyWie/proxyee-down 配套迅雷链接转换插件和百度云直链提取脚本下载体验更佳]]></content>
      <categories>
        <category>网络技术</category>
        <category>资源下载</category>
      </categories>
      <tags>
        <tag>下载</tag>
        <tag>aria2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Telegram的博客频道开启]]></title>
    <url>%2F2018%2F05%2F03%2Ft-me-flyingpipi%2F</url>
    <content type="text"><![CDATA[tg博客同步更新频道 点击上方链接即可加入telegram通知频道接收博客最新动态]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的第一个java程序 hello word]]></title>
    <url>%2F2018%2F04%2F27%2Fe6-88-91-e7-9a-84-e7-ac-ac-e4-b8-80-e4-b8-aajava-e7-a8-8b-e5-ba-8f-hello-word%2F</url>
    <content type="text"><![CDATA[使用myeclipse作为java开发工具建立的第一个java程序 hello world你好世界]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[启 楔子]]></title>
    <url>%2F2018%2F04%2F25%2Fe5-b0-8f-e8-af-b4-e5-90-af-e6-a5-94-e5-ad-90%2F</url>
    <content type="text"><![CDATA[​ 人们永远都在想着，在那遥远的迷离的星空之外是什么？所以古往今来总有这各种各样的人仰望星空，想要从中得到答案。 这个故事发生在很遥远的时代，或者说就发生在刚才的一瞬间，因为这一切东西都不是由时间来主宰的，在星空之外没有时间的界限，只有一个个在救赎中忏悔的罪人。 世界观简介： 一个完全虚构的世界，却又无限地逼近现实，在这样的一个世界里，科技已经发展到了探索星空的地步，可是人类一直无法深入宇宙，总是有着一种力量冥冥中阻止着一切探究本源的发生。这个世界里面没有所谓的子宇宙，平行世界，多样化的空间以及多元宇宙，这里是一个全新的世界，并且在这样的一个世界里我们探索世界的本质，发现星空之外的秘密。 很早以前就想写一部科幻的（臆想）简单易懂阐述自己宇宙观的小说了，最近腾出点时间起笔，文笔不行请多关照。 原文链接：https://www.jianshu.com/p/c669e52a9681]]></content>
      <categories>
        <category>启 连载小说</category>
      </categories>
      <tags>
        <tag>小说</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[verilog语言设计一个60.00s的秒表]]></title>
    <url>%2F2018%2F04%2F22%2Fe8-ae-be-e8-ae-a160-00s-e7-9a-84-e7-a7-92-e8-a1-a8%2F</url>
    <content type="text"><![CDATA[一.实验目的1.掌握定时器的设计方法 2.掌握时序逻辑电路设计与功能测试方法。 3.熟悉时序电路（计数器）的波形测量方法。 4.各种常用MSI时序逻辑电路功能和使用方法；小型数字系统设计、组装与调试的方法 二.实验原件共阴极显示数码管*4，74ls00，74ls192，NE555，CD4511，74ls04，导线，面包板 三.预习要求1.复习书本信号发生器内容，使用ne555如何产生需要的信号频率。 2.了解共阴极的数码管显示原理。 3.查看书本附录，了解每种芯片的引脚功能 4.设计实验线路，画出状态图表和原理图 四.实验内容利用已有的原件设计一个60.00s的数字秒表，要求秒表的计时范围从0.01s-59.99s。可以通过两个按键实现秒表的暂停，继续功能，当清零信号无效时，按下按键开始计时，再按一下暂停计时，再按一下继续计时。 当计时到60.00s时自动暂停。 实验设计 1.由实验的要求知道要最低的计时信号为0.01s，则需要的频率为100hz的信号 2.555的方波发生器的设计： 根据555芯片的信号产生频率公式，f=1.43/（R1+2R2）C。可以的电阻，所以使用5k的电阻代替，最终在示波器上测试得到的方波频率为80hz，接近实验要求的100hz。 3.根据实验的电路图连接好电路板后，进行测试，分别测试其暂停和继续的功能，清零的功能，以及是否能在60.00s的时候暂停计数。 4.原理图 实验电路设计图 实验结果展示]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用workflow添加url scheme到桌面图标]]></title>
    <url>%2F2018%2F04%2F17%2Fios-e4-b8-8a-e5-88-a9-e7-94-a8workflow-e6-b7-bb-e5-8a-a0url-scheme-e5-88-b0-e6-a1-8c-e9-9d-a2%2F</url>
    <content type="text"><![CDATA[ios的系统局限性很强，所以不能自己在桌面上添加喜爱软件的快捷方式，于是跟随ios系统流行起来的url scheme派上了用场。 app的url scheme是一段链接地址用于指向app的特定功能模块，利用它可以快速打开软件的特定部分。提取出url scheme后在浏览器中转到就可以实现功能。 并非所有的软件都支持了url scheme但是常用的软件的url scheme在网络上比较容易查找。 今天尝试了下利用apple自带的workflow规则，可以自定义url的图标和名称。 workflow 苹果独占的效率神器 规则下载地址 ：https://workflow.is/workflows/ca278150fbb348419eb6e13808875e15 使用方法：点击运行前，在第一个text文本框输入你想要的名称 在第二个文本框中输入url scheme地址 然后点击运行，从相册选择一张喜欢的图标后自动跳转到safari 然后选择，添加到屏幕即可 效果展示请看微信公众号 链接地址：http://mp.weixin.qq.com/s/d5RdnIt_zIr0uM2K-_h8Ig]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信公众号同步推出]]></title>
    <url>%2F2018%2F04%2F17%2Fweixinqrcode%2F</url>
    <content type="text"><![CDATA[扫码关注 你的关注就是我的动力]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[verilog实现3-8译码]]></title>
    <url>%2F2018%2F04%2F15%2Fverilog-e5-ae-9e-e7-8e-b03-8-e8-af-91-e7-a0-81%2F</url>
    <content type="text"><![CDATA[1234567891011121314module yima38(A,en,Q );input [2:0]A;input en;output reg[7:0] Q;integer k;always@(A,en)beginQ=8'b1111_1111;for(k=0;k&lt;=7;k=k+1) if((en==1)&amp;&amp;A==k) Q[k]=0; else Q[k]=1;end ​ 1endmodule 3-8线译码器打包 https://drive.google.com/open?id=1MzxKVJcPlgS_2bPA37XZuT_gkzn3nrbZ]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[cpu运算对应mips汇编指令集生成]]></title>
    <url>%2F2018%2F04%2F14%2Fcpu-e8-bf-90-e7-ae-97-e5-af-b9-e5-ba-94mips-e6-b1-87-e7-bc-96-e6-8c-87-e4-bb-a4-e9-9b-86-e7-94-9f-e6-88-90%2F</url>
    <content type="text"><![CDATA[利用mips模拟器qtspim将集合10种运算的汇编代码转换为机器码指令后输出将最后语句的jump指令修改为对齐格式 最后放入文本文档修改后缀为coe文件 MEMORY_INITIALIZATION_RADIX=16; MEMORY_INITIALIZATION_VECTOR= 00432020, 8c440004, ac420008, 00831022, 00831025, 00831024, 0083102a, 10830002, 08100000, 8c620000, 08100000, 在ISE平台新建文件 新建源文件为ip核选择刚才生成的coe文件导入]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>mips汇编学习</tag>
        <tag>verilog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[verilog编写单周期32位cpu（实现9种逻辑运算）]]></title>
    <url>%2F2018%2F04%2F14%2Fe5-8d-95-e5-91-a8-e6-9c-9f-e7-9a-8432-e4-bd-8dcpu%2F</url>
    <content type="text"><![CDATA[利用verilog语言编写一个单周期的32位cpu处理简单的运算实现add，or ，and，jump等九种运算 顶层模块top123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104module top( input clkin, input reset );//wire for romwire[31:0] inst;//wire for controllerwire regdst,jump,branch,memread,memwrite,memtoreg;wire[3:0] aluop;wire alusrc,regwrite;//wire for aluunitwire zero;wire[31:0]alures;wire[31:0]alu_in2; //alu数据输入之前的多路器输出//wire for memorywire[31:0] indata;//wire for registerwire[31:0] rsdata,rtdata;wire[4:0]rdaddr;wire[31:0] wrdata;//wire for pcwire[31:0] paddr;//wire for extwire[31:0]sign;irom imem( .a(paddr[8:2]), .clk(clkin), //上升沿读指令 .spo(inst)); pc pcnt( .clkin(clkin),//下降沿改变pc .reset(reset), .instr(inst), .jump(jump), .branch(branch), .zero(zero), .paddr(paddr)); ctr mainctr( .instr(inst), .aluop(aluop), .regdst(regdst), .alusrc(alusrc), .memtoreg(memtoreg), .regwrite(regwrite), .memread(memread0, .memwrite(memwrite), .branch(branch), .jmp(jump)); alu alu( .input1(rsdata), .input2(alu_in2), .aluctr(aluop), .alures(alures), .zero(zero));//alu input2 数据多路器mux32 mux32_1( .in1(sign), .in2(rtdata), .out(alu_in2), .sel(alusrc)); dram drem( .a(alures[7:2]), .d(rtdata), .clk(!clkin),//下降沿写数据 .we(memwrite), .spo(indata)); //reg 写数据多路器mux32 mux32_2( .in1(indata), .in2(alures), .out(wrdata), .sel(memtoreg));regfile regfile( .rsaddr(inst[25:21]), .rtaddr(inst[20:16]), .clk(!clkin),//下降沿写reg .reset(reset), .regwriteaddr(rdaddr), .regwritedata(wrdata), .regwriteen(regwrite), .rsdata(radata), .rtdata(rtdata)); //reg 地址选择多路器mux5 mux5_1( .in1(inst[15:11]), .in2(inst[20:16]), .out(rdaddr), .sel(regdst));//sign extend扩展signext signext( .inst(inst[15:0]), .data(sign)); endmodule ​ 符号扩展1234567module signext( input [15:0] inst, output [31:0] data );//sign ectendassign data=inst[15:15]?&#123;16'hffff,inst&#125;:&#123;16'h0000,inst&#125;;endmodule 控制器123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123module control(//control input [31:0]instr, output regdst, output alusrc, output memtoreg, output regwrite, output memread, output memwrite, output branch, output [3:0] aluop, output jmp );wire [5:0]opcode;wire [5:0]funct;wire [11:0] ctr_varl;reg[3:0] aluop;reg regdst;reg alusrc;reg memtoreg;reg regwrite;reg memread;reg memwrite;reg branch;reg jmp;assign opcode=instr[31:26];assign funct=instr[5:0];assign ctr_varl=&#123;opcode,funct&#125;;always@(ctr_varl) begin casex(ctr_varl) 12'b000000xxxxxx: begin case(funct) 6'b1000000: //add aluop=4'b0001; 6'b100010://sub aluop=4'b0010; 6'b100100://and aluop=4'b0011; 6'b100101://or aluop=4'b0100; 6'b101010://slt aluop=4'b0101; default: aluop=4'b0000; endcase//r ins regdst=1; alusrc=0; memtoreg=0; regwrite=1; memread=0; memwrite=0; branch=0; jmp=0; end 12'b100011xxxxxx://lw begin aluop=4'b0001; regdst=0; alusrc=1; memtoreg=1; regwrite=1; memread=1; memwrite=0; branch=0; jmp=0; end 12'b101011xxxxxx://sw begin aluop=4'b0001; regdst=0; alusrc=1; memtoreg=0; regwrite=0; memread=0; memwrite=1; branch=0; jmp=0; end 6'b000100://beq begin aluop=4'b0010; regdst=0; jmp=0; branch=1; memtoreg=0; alusrc=0; regwrite=0; memwrite=0; memread=0; end 6'b000010://j begin aluop=4'b0101; regdst=0; jmp=1; branch=0; memtoreg=0; alusrc=0; regwrite=0; memwrite=0; memread=0; end default: begin aluop=4'b0000; regdst=0; alusrc=0; memtoreg=0; regwrite=0; memread=0; memwrite=0; branch=0; jmp=0; endendcaseend ​ 1endmodule 运算器alumodule alu( input [31:0] input1, input [31:0] input2, input [3:0] aluctr, input [31:0] alures, output zero ); reg zero; reg[31:0]alures; always@(input1 or input2 or aluctr) begin case(aluctr) 4&apos;b0001: alures=input1+input2; 4&apos;b0010: begin alures=input1-inpuit2; if(alures==0) zero=1; else zero=0; end 4&apos;b0011: alures=input1&amp;input2; 4&apos;b0100: alures=input1|input2; 4&apos;b0101: begin if(input1&lt;input2) alures=1; else alures=0; end default: alures=0; endcase end endmodule ​ 选择器32module mux32( input [31:0] in1, input [31:0] in2, input sel, input [31:0] out ); //sel=1:out=in1 //sel=0:out=in2 assign out=sel?in1;in2; endmodule 选择器5module mux5( input [4:0] in1, input [4:0] in2, input sel, input [4:0] out ); //sel=1:out=in1 //sel=0:out=in2 assign out=sel?in1:in2; endmodule 寄存器1234567891011121314151617181920212223242526272829303132333435module regfile( input clk, input reset, input [31:0] regwritedata, input [4:0] regwriteaddr, input regwriteen, output [31:0] rsdata, output [31:0] rtdata, input [4:0] rsaddr, input [4:0] rtaddr );reg[31:0] regs[31:0];assign rsdata=(rsaddr==5'b0)?32'b0:regs[rsaddr];assign rtdata=(rtaddr==5'b0)?32'b0:regs[rtaddr];integer i_reg;always@(posedge clk)begin if(!reset) begin for (i_reg=0;i_reg&lt;32;i_reg=i_reg+1) begin regs[i_reg]=i_reg; end i_reg=0; end else begin if(regwriteen==1) begin regs[regwriteaddr]=regwritedata; end endendendmodule 经过测试，部分代码有错，可以参考cpu输出学号的代码 https://www.liaorenjie.top/Landers/2018/628.html]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>verilog</tag>
        <tag>verilog学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[verilog实现数字钟]]></title>
    <url>%2F2018%2F03%2F31%2Fverilog-e8-af-ad-e8-a8-80-e7-bc-96-e5-86-99-e6-95-b0-e5-ad-97-e9-92-9f%2F</url>
    <content type="text"><![CDATA[verilog实现数字钟，要求功能实现12小时到24小时进制转换，校时校分功能，闹钟，整点报时功能 顶层模块 1234567891011121314151617181920212223242526272829303132333435module top( input clk,//50MHz默认时钟信号 input adj,//按键1，实现校时功能，2位宽，共控制4种循环状态（正常显示，闪烁校时，闪烁校分，显秒） input alarm,//按键2，实现闹钟功能，2位宽，共控制4种循环状态（正常显示，设置闹钟时，设置闹钟分，显示闹钟开关状态） input sw,//按键3，实现进制切换功能，1位宽，共控制2种循环状态（正常显示，12进制显示） input en,//按键4，作为enter键，1位宽，在校时和设置闹钟模式下用作增计数，显秒时用于秒清零，还用于开关闹钟 output [0:6] seg,//七段数码管显示输出 output [0:3] sc,//扫描四个数码管输出 output led_alarm,led_s,led_chime,led_am//闹钟长亮灯,秒钟闪烁灯，报时闪烁灯，闹钟开关长亮灯 ); wire [5:0] ct;//用于存储按键状态，共6位wire [7:0] sw_Hour,hour_al,minute_al;//中间变量，用于显示进制切换后的小时，和设置闹钟时的小时和分钟wire [7:0] Hour,Minute,Second;//中间变量，时，分，秒的两位数字各占4位宽（0-9）supply0 rst;//除实现秒清零功能外，该输入端其余时候均接地 counter main(clk,rst,&#123;ct[5],ct[3:2]&#125;,Hour,Minute,Second,led_s);//主函数为时分秒的计数器，输入为adj与enter键，中间输出为时分秒的计数，终端输出为秒闪烁灯和报时长亮灯display dis(clk,ct[4:0],alarm_state,en,sw_Hour,Minute,Second,hour_al,minute_al,seg,sc);//显示函数，输入为adj,alarm，sw和en键，中间输入有闹钟开关状态，进制转换后的小时计数，分钟计数，秒钟计数，设置闹钟状态下的小时和分钟，输出为4个七段数码管controller c0(clk,rst,adj,alarm,sw,en,ct);//控制函数，输入为默认时钟信号，秒清零信号，四个按键，输出为6位状态编码hour_switch h0(clk,Hour,ct[4],sw_Hour,led_am);//时钟进制切换函数，输入为计数器的时钟，sw按键，输出为进制转换以后的小时和进制转换后显示上午的长亮灯//在正常显示24进制时，display函数的小时计数输入信号仍然来自于hour_switch函数的输出sw_Hour，而非counter函数的输出Houralarm al0(clk,rst,&#123;ct[5],ct[1:0]&#125;,Hour,Minute,hour_al,minute_al,led_alarm,alarm_state);//闹钟设置函数，输入为alarm与enter键，中间输入为counter函数的输出Hour,Minute，中间输出为设置闹钟状态下的小时和分钟（将传递给dispay来显示），//终端输出为闹钟长亮灯和闹钟开关状态endmodule 60进制进位 123456789101112131415161718192021222324252627282930module counter_60( input clk, input rst, input en,//由上一级传递来的进位信号 output reg[3:0] cnth=0,//高四位输出 output reg[3:0] cntl=0,//低四位输出 output co );//60进制计数器assign co = cnth==4'd5&amp;&amp;cntl==4'd9;//在第59次计数时产生对下一级的进位输出信号always@(posedge clk or posedge rst)begin if(rst)&#123;cnth,cntl&#125;&lt;=8'd0;//异步清零，仅秒计数时使用 else if(en)//上一级产生了进位信号 if(cnth==5&amp;&amp;cntl==9)&#123;cnth,cntl&#125;&lt;=8'd0;//若计数达到59，则归零 else if(cntl==4'd9) begin cntl&lt;=4'd0; cnth&lt;=cnth+4'd1;//若低位为9，则低位归零，高位加1 end else cntl&lt;=cntl+4'd1;//若低位不为9，则低位加1 else begin cnth&lt;=cnth; cntl&lt;=cntl;//上一级未产生进位信号时，则维持高低位的输出不变 endendendmodule 24进制进位 123456789101112131415161718192021222324252627282930module counter_24( input clk, input rst, input en, output reg[3:0] cnth=0, output reg[3:0] cntl=0, output co );//24进制计数器assign co = cnth==4'd2&amp;&amp;cntl==4'd3;always@(posedge clk or posedge rst)begin if(rst)&#123;cnth,cntl&#125;&lt;=8'd0; else if(en) if(cnth==2&amp;&amp;cntl==3)&#123;cnth,cntl&#125;&lt;=8'd0;//若计数达到23，则归零 else if(cntl==4'd9) begin cntl&lt;=4'd0; cnth&lt;=cnth+4'd1; end else cntl&lt;=cntl+4'd1; else begin cnth&lt;=cnth; cntl&lt;=cntl; endendendmodule 6进制进位 123456789module counter_6( input clk, input rst, input en, output co ); reg [2:0] cnt = 0;assign co = cnt == 5; ​​12345678910always@(posedge clk or posedge rst)begin if(rst)cnt=0; else if(en) begin if(cnt==5)cnt=0; else cnt = cnt+1; end else cnt = cnt;endendmodule 比较进位判断 123456789101112131415161718192021222324252627282930313233343536module compare( input clk, input [7:0] Hour, input [7:0] Minute, input [7:0] Second, input [7:0] hour_al, input [7:0] minute_al, output led_alarm );reg [5:0] cnt=0;reg [4:0] num=0;wire [5:0] dou_num;assign dou_num = num + num;assign led_alarm = (cnt &lt; dou_num) &amp; cnt[0];divider50Mhz U2(clk,rst,CP_2Hz);//秒计数defparam U0.N = 5, U0.clk_freq = 6, U0.out_freq = 2;//改为1Hz(always@(Hour)begin if(Hour[7:4]==0) num = Hour[3:0]; else if(Hour[7:4]==1) num = Hour[3:0] + 5'b01010; else if(Hour[7:4]==2) num = Hour[3:0] + 5'b10100;endalways@(posedge CP_2Hz)begin if(Hour==hour_al &amp; Minute==minute_al) begin if(Second==0) cnt &lt;= 0; else cnt &lt;= cnt + 1; endendendmodule 12-24小时转换 1234567891011121314151617181920212223242526272829303132module hour_switch( input clk, input [7:0] hour_in, input en,//12进制显示使能信号,即sw键 output reg [7:0] hour_out, output led_am ); assign led_am = en&amp;(hour_in[7:4]==0|hour_in[7:4]==1&amp;hour_in[3:0]&lt;2);//进制切换后上午时间该灯长亮always@(posedge clk) begin if(en) begin//长按sw键则显示进制切换后的时间，松开则正常显示 case(hour_in) 8'b0000_0000: hour_out &lt;= 8'b0001_0010; 8'b0001_0011: hour_out &lt;= 8'b0000_0001; 8'b0001_0100: hour_out &lt;= 8'b0000_0010; 8'b0001_0101: hour_out &lt;= 8'b0000_0011; 8'b0001_0110: hour_out &lt;= 8'b0000_0100; 8'b0001_0111: hour_out &lt;= 8'b0000_0101; 8'b0001_1000: hour_out &lt;= 8'b0000_0110; 8'b0001_1001: hour_out &lt;= 8'b0000_0111; 8'b0010_0000: hour_out &lt;= 8'b0000_1000; 8'b0010_0001: hour_out &lt;= 8'b0000_1001; 8'b0010_0010: hour_out &lt;= 8'b0001_0000; 8'b0010_0011: hour_out &lt;= 8'b0001_0001; default: hour_out &lt;= hour_in;//1am~12am/pm与正常显示时相同 endcase end else hour_out &lt;= hour_in;//若无进制切换使能信号，则输出counter的输出信号以正常显示 endendmodule 控制器 123456789101112131415161718192021222324252627282930313233module controller( input clk, input rst, input adj, input alarm, input sw, input en, output [5:0] ct );reg sw_cnt=0;//1位进制转换开关reg [1:0] adj_cnt=0,alarm_cnt=0;//校时键adj与闹钟设置键alarm的按键状态存储器，各存4个状态wire en_clk;//按键扫描频率，7Hz时钟信号assign en_adj = &#123;alarm_cnt,sw,en&#125; == 4'b0000;//用于adj按键使能，保证其余3个按键均无动作assign en_alarm = &#123;adj_cnt,sw,en&#125; == 4'b0000;//用于alarm按键使能，保证其余3个按键均无动作assign en_sw = &#123;adj_cnt,alarm_cnt,en&#125; == 5'b00000;//用于sw按键使能，保证其余3个按键均无动作assign ct = &#123;en&amp;en_clk,sw_cnt,adj_cnt,alarm_cnt&#125;;//第5位为en&amp;en_clk，表示按下en键且7Hz扫描信号为高电平；第4位为sw，第[3:2]位为adj，第[1:0]位为alarmdivider U0(clk,rst,en_clk);defparam U0.N = 25, U0.clk_freq=50_000_000, U0.out_freq=7;//仿真用700_000//分频得到7Hz扫描时钟信号 always@(posedge clk) begin if(en_clk) begin//每0.14s扫描一次按键，符合人的短按持续时间；若长按，则每秒扫描7次 if(adj&amp;en_adj) adj_cnt &lt;= adj_cnt + 2'b01;//adj键按下且符合使能条件时，状态+1 else if(alarm&amp;en_alarm) alarm_cnt &lt;= alarm_cnt + 2'b01;//alarm键按下且符合使能条件时，状态+1 else if(sw&amp;en_sw) sw_cnt = ~sw_cnt;//sw键按下且符合使能条件时，状态+1 else ; end end ​​ endmodule 译码器转换 12345678910111213141516171819202122232425module decode( input clk, input [3:0] num, output reg[6:0] seg//a,b,c,d,e,f,g );always@(posedge clk)begin case(num) 4'h0: seg = 7'b0000001; //0 4'h1: seg = 7'b1001111; //1 4'h2: seg = 7'b0010010; //2 4'h3: seg = 7'b0000110; //3 4'h4: seg = 7'b1001100; //4 4'h5: seg = 7'b0100100; //5 4'h6: seg = 7'b0100000; //6 4'h7: seg = 7'b0001111; //7 4'h8: seg = 7'b0000000; //8 4'h9: seg = 7'b0000100; //9 4'hf: seg = 7'b1111111; //全灭，用于闪烁 default: seg = 7'b0000001; endcaseendendmodule 数码管显示 12345678910111213141516171819202122module display( input clk, input [4:0] ct, input alarm_state, input en, input [7:0] Hour, input [7:0] Minute, input [7:0] Second, input [7:0] hour_alarm, input [7:0] minute_alarm, output [6:0] seg, output [3:0] sc );wire [3:0] num;//4位宽用于存放数码管所显示的数字scan s0(clk,ct,alarm_state,en,Hour,Minute,Second,hour_alarm,minute_alarm,num,sc);//用于扫描数码管，控制其显示；由于扫描速率设为了200Hz，故人眼无法识别是否闪烁decode dec0(clk,num,seg);//用于每个数码管的显示译码endmodule 动态扫描模块 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475module scan( input clk, input [4:0] ct, input alarm_state, input en, input [7:0] Hour,Minute,Second, input [7:0] hour_al,minute_al, output reg [3:0] num, output reg [3:0] scan );parameter N=6;//用于调整闪烁速率reg [N-1:0] cnt=0;//数码管闪烁计数器，6位宽可存放0~64wire en_200Hz;divider U3(clk,1'b0,en_200Hz);defparam U3.N=25, U3.clk_freq = 50_000_000, U3.out_freq = 200;//仿真用20_000_000//分频得到200Hz的时钟信号assign set_h = ct[3:2] == 2'b01;//校时assign set_m = ct[3:2] == 2'b10;//校分assign set_s = ct[3:2] == 2'b11;//校秒assign alarm_h = ct[1:0] == 2'b01;//设置闹钟时assign alarm_m = ct[1:0] == 2'b10;//设置闹钟分//上述每个状态下对应的两位数码管均会闪烁assign alarm_sw = ct[1:0] == 2'b11;//设置闹钟开关assign dis_s = en&amp;ct[3:0]==0;//正常显示时长按且仅按en键用于显秒assign en_hour = (set_h|alarm_h)&amp;cnt[N-1];//小时闪烁assign en_minute = (set_m|alarm_m|set_s)&amp;cnt[N-1];//分钟闪烁（秒闪烁）//cnt的最高位为1时点亮，每秒从0~64循环扫描，共计200次，故闪烁次数每秒约3次always @ (posedge clk) begin if(en_200Hz) begin cnt &lt;= cnt+1'b1; case (cnt[1:0])//由低两位的四种状态分别控制四个数码管，使显示时间平均 2'b00: begin scan &lt;= 4'b1110;//最低位数码管显示 if(en_minute) num &lt;= 4'b1111;//校分，闹钟设置分，秒清零状态下控制最低位闪烁 else if(alarm_sw) num &lt;= alarm_state;//在设置闹钟开关状态下，最低位显示0或1 else if(alarm_m|alarm_h) num &lt;= minute_al[3:0];//在闹钟设置小时或分钟的状态下，分钟的低位显示在最低位数码管 else if(set_s|dis_s) num &lt;= Second[3:0];//在校秒或显秒的状态下，秒的低位显示在最低位数码管 else num &lt;= Minute[3:0];//其余情况正常显示分钟的低位 end 2'b01: begin scan &lt;= 4'b1101;//次低位数码管显示 if(en_minute|alarm_sw)num &lt;= 4'b1111;//校分，闹钟设置分，秒清零状态下控制次低位闪烁，显示闹钟开关状态时此位不点亮 else if(alarm_m|alarm_h) num &lt;= minute_al[7:4];//在闹钟设置小时或分钟的状态下，分钟的高位显示在次低位数码管 else if(set_s|dis_s) num &lt;= Second[7:4];//在校秒或显秒的状态下，秒的高位显示在次低位数码管 else num &lt;= Minute[7:4];//其余情况正常显示分钟的高位 end 2'b10: begin scan &lt;= 4'b1011;//次高位数码管显示 if(en_hour|set_s|dis_s|alarm_sw) num &lt;= 4'b1111;//校时，设置闹钟小时两种状态下控制闪烁；校秒，显秒和显示闹钟开关状态下此位不点亮 else if(alarm_m|alarm_h) num &lt;= hour_al[3:0];//在闹钟设置小时或分钟的状态下，小时的低位显示在次高位数码管 else num &lt;= Hour[3:0];//其余情况正常显示小时的低位 end 2'b11: begin scan &lt;= 4'b0111;//最高位数码管显示 if(en_hour|set_s|dis_s|alarm_sw) num &lt;= 4'b1111;//校时，设置闹钟小时两种状态下控制闪烁；校秒，显秒和显示闹钟开关状态下此位不点亮 else if(alarm_m|alarm_h) num &lt;= hour_al[7:4];//在闹钟设置小时或分钟的状态下，小时的高位显示在最高位数码管 else num &lt;= Hour[7:4];//其余情况正常显示小时的高位 end endcase end endendmodule 分频器 12345678910111213141516171819202122232425262728module divider( input clk, input rst, output en_out );//分频器parameter N=26;parameter clk_freq = 2;parameter out_freq = 1;reg [N-1:0] count;//内部节点，存放计数器的输出值assign en_out = count == clk_freq/out_freq - 1;//分频输出，仅在counter达到计数的最大值时有输出，且该输出仅持续原始clk信号一个脉冲的时间always@(posedge clk or posedge rst)begin if(rst) begin count&lt;=0;//仿真时用于异步清零 end else begin if(count&lt;(clk_freq/out_freq - 1 )) count&lt;=count+1;//分频计数器增1计数 else begin count&lt;=0;//分频计数器达到计数的最大值时被清零，此时输出信号产生高电平 end endend ​​ endmodule 闹钟 1234567891011121314151617181920212223module alarm( input clk, input rst, input [2:0] ct, input [7:0] Hour, input [7:0] Minute, output [7:0] hour_al, output [7:0] minute_al, output led_alarm, output alarm_state//闹钟开关的状态需传递至display函数在数码管上用0或1显示 );reg alarm_sw_cnt=0;//闹钟开关标志，初始时为0assign alarm_state =alarm_sw_cnt;assign en_hou = ct == 3'b101;//设置闹钟小时状态下en键被7Hz时钟信号扫描到按下时，小时进位，进位信号传递至24进制计数器assign en_min = ct == 3'b110;//设置闹钟分钟状态下en键被7Hz时钟信号扫描到按下时，分钟进位，进位信号传递至60进制计数器assign en_sw = ct == 3'b111;//设置闹钟开关状态下en键被7Hz时钟信号扫描到按下时，控制闹钟开关状态改变的en_sw被使能assign led_alarm = (Hour==hour_al)&amp;(Minute==minute_al)&amp;(alarm_sw_cnt);//比较当前时分与设置的闹钟时分，当相等且在闹钟开关标志为1时，闹钟灯长亮1minalways@(posedge clk) begin if(en_sw) alarm_sw_cnt = ~alarm_sw_cnt;//改变闹钟开关状态 end ​12345counter_60 min(clk,rst,en_min,minute_al[7:4],minute_al[3:0],);counter_24 hou(clk,rst,en_hou,hour_al[7:4],hour_al[3:0],);//设置闹钟状态下计数器的向后进位输出不使用endmodule 建立顶层top文件后分别做24小时和12小时的进位仿真 test代码如下 123456789101112131415161718192021222324252627282930313233343536module counter_test;// Inputsreg clk;reg [2:0] ct;// Outputswire [7:0] Hour;wire [7:0] Minute;wire [7:0] Second;wire led_s;wire led_chime;// Instantiate the Unit Under Test (UUT)counter uut (.clk(clk), .ct(ct), .Hour(Hour), .Minute(Minute), .Second(Second), .led_s(led_s), .led_chime(led_chime));always beginclk=0;#5;clk=1;#5;endinitial begin// Initialize Inputsclk = 0;ct = 0;// Wait 100 ns for global reset to finish#100; ​12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394// Add stimulus hereendendmodulemodule controller_test; // Inputs reg clk; reg adj; reg alarm; reg sw; reg en; // Outputs wire [5:0] ct; // Instantiate the Unit Under Test (UUT) controller uut ( .clk(clk), .adj(adj), .alarm(alarm), .sw(sw), .en(en), .ct(ct) ); always begin clk = ~clk; #5; end initial begin // Initialize Inputs clk = 0; adj = 0; alarm = 0; sw = 0; en = 0; // Wait 100 ns for global reset to finish #10; en=1; sw=1; adj = 1; #10; adj = 0; #10; adj = 1; #10; adj = 0; #10; adj = 1; #10; adj = 0; #10; adj = 1; #10; adj = 0; #10; alarm = 1; #10; alarm = 0; #100; alarm = 1; #10; alarm = 0; #100; alarm = 1; #10; alarm = 0; #100; alarm = 1; #10; alarm = 0; #100; sw = 1; #10; sw = 0; #100; en = 1; #10; en = 0; #100; adj = 1; #10; adj = 0; #100; en = 1; #10; en = 0; #100; adj = 1; #10; adj = 0; #100; sw = 1; #10; sw = 0; #100; alarm = 1; #10; alarm = 0; #100; adj = 1; #10; adj = 0; #100; adj = 1; #10; adj = 0; #100; alarm = 1; #10; alarm = 0; #100; adj = 1; #10; adj = 0; #100; alarm = 1; #10; alarm = 0; #100; alarm = 1; #10; alarm = 0; #100; alarm = 1; #10; alarm = 0; #100; ​12345 // Add stimulus here end endmodule ​ 12345678910111213141516171819202122232425262728293031module hour_switch_test; // Inputs reg clk; reg [7:0] hour_in; reg en; // Outputs wire [7:0] hour_out; wire led_am; // Instantiate the Unit Under Test (UUT) hour_switch uut ( .clk(clk), .hour_in(hour_in), .en(en), .hour_out(hour_out), .led_am(led_am) ); always begin clk&lt;=0; #5; clk&lt;=1; #5; end initial begin // Initialize Inputs #10; clk=0; hour_in=0; en=0; ​​12345678910111213141516171819202122232425262728293031 // Wait 100 ns for global reset to finish #10; hour_in = 8'b0010_0011; #10; hour_in = 8'b0001_0010; #10; hour_in = 8'b0000_0011; #10; hour_in = 8'b0001_0101; #10; en = 1; hour_in = 8'b0010_0011; #10; hour_in = 8'b0001_0010; #10; hour_in = 8'b0000_0011; #10; hour_in = 8'b0001_0110; #10; hour_in = 8'b0000_0101; #10; hour_in = 8'b0000_0000; #10; en = 0; #10; en = 1; end endmodule 管脚约束如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879NET "clk" LOC = B8;NET "clk" IOSTANDARD = LVCMOS18;NET "seg[0]" IOSTANDARD = LVCMOS18;NET "seg[1]" IOSTANDARD = LVCMOS18;NET "seg[2]" IOSTANDARD = LVCMOS18;NET "seg[3]" IOSTANDARD = LVCMOS18;NET "seg[4]" IOSTANDARD = LVCMOS18;NET "seg[5]" IOSTANDARD = LVCMOS18;NET "seg[6]" IOSTANDARD = LVCMOS18;NET "seg[5]" LOC = L13;NET "seg[4]" LOC = P12;NET "seg[3]" LOC = N11;NET "seg[2]" LOC = N14;NET "seg[1]" LOC = H12;NET "seg[0]" LOC = L14;NET "seg[6]" LOC = M12;NET "sc[3]" LOC = F12;NET "sc[2]" LOC = J12;NET "sc[1]" LOC = M13;NET "sc[0]" LOC = K14;NET "en" LOC = G12;NET "led_s" LOC = M5;NET "sc[0]" IOSTANDARD = LVCMOS18;NET "sc[1]" IOSTANDARD = LVCMOS18;NET "sc[2]" IOSTANDARD = LVCMOS18;NET "sc[3]" IOSTANDARD = LVCMOS18;NET "en" IOSTANDARD = LVCMOS18;NET "led_s" IOSTANDARD = LVCMOS18;# PlanAhead Generated IO constraints NET "adj" IOSTANDARD = LVCMOS18;# PlanAhead Generated physical constraints NET "adj" LOC = A7;NET "alarm" LOC = M4;# PlanAhead Generated IO constraints NET "alarm" IOSTANDARD = LVCMOS18;# PlanAhead Generated physical constraints NET "sw" LOC = C11;# PlanAhead Generated IO constraints NET "sw" IOSTANDARD = LVCMOS18;# PlanAhead Generated physical constraints NET "led_am" LOC = M11;# PlanAhead Generated IO constraints NET "led_am" IOSTANDARD = LVCMOS18;# PlanAhead Generated physical constraints NET "led_chime" LOC = P7;# PlanAhead Generated IO constraints NET "led_chime" IOSTANDARD = LVCMOS18;# PlanAhead Generated physical constraints NET "led_alarm" LOC = P6;# PlanAhead Generated IO constraints NET "led_alarm" IOSTANDARD = LVCMOS18;# PlanAhead Generated physical constraints //NET "led_alarm_sw" LOC = N5;# PlanAhead Generated IO constraints //NET "led_alarm_sw" IOSTANDARD = LVCMOS18; 最终仿真如图 24小时 秒进位 分进位 小时进制转换 动态扫描 校时 数字钟选做要求实现闹钟，正点报时 代码如下 module alarm( input clk, input rst, input [2:0] ct, input [7:0] Hour, input [7:0] Minute, output [7:0] hour_al, output [7:0] minute_al, output led_alarm, output alarm_state//闹钟开关的状态需传递至display函数在数码管上用0或1显示 ); reg alarm_sw_cnt=0;//闹钟开关标志，初始时为0 assign alarm_state =alarm_sw_cnt; assign en_hou = ct == 3&apos;b101;//设置闹钟小时状态下en键被7Hz时钟信号扫描到按下时，小时进位，进位信号传递至24进制计数器 assign en_min = ct == 3&apos;b110;//设置闹钟分钟状态下en键被7Hz时钟信号扫描到按下时，分钟进位，进位信号传递至60进制计数器 assign en_sw = ct == 3&apos;b111;//设置闹钟开关状态下en键被7Hz时钟信号扫描到按下时，控制闹钟开关状态改变的en_sw被使能 assign led_alarm = (Hour==hour_al)&amp;(Minute==minute_al)&amp;(alarm_sw_cnt);//比较当前时分与设置的闹钟时分，当相等且在闹钟开关标志为1时，闹钟灯长亮1min always@(posedge clk) begin if(en_sw) alarm_sw_cnt = ~alarm_sw_cnt;//改变闹钟开关状态 end counter_60 min(clk,rst,en_min,minute_al[7:4],minute_al[3:0],); counter_24 hou(clk,rst,en_hou,hour_al[7:4],hour_al[3:0],); //设置闹钟状态下计数器的向后进位输出不使用 endmodule module chime( input clk, input en_2Hz, input [7:0] Hour, input [7:0] Minute, input [7:0] Second, output led_chime ); reg [6:0] cnt=0;//7位宽报时计数器，可循环存储0~127 reg [4:0] num=0;//5位用于存储led_chime的闪烁次数（1~24） wire [5:0] dou_num;//将闪烁次数倍增 assign dou_num = num + num; assign led_chime = (cnt &lt; dou_num) &amp; cnt[0];//工作时该灯的状态每秒改变两次，由于cnt每秒执行两次+1操作，故设置cnt的个位为1时灯亮，形成闪烁；且cnt&gt;=dou_num后不闪烁 always@(Hour)//将Hour的值转化为闪烁次数 begin if(Hour==0) num = 5&apos;b11000;//0时报时灯闪烁24次 else if(Hour[7:4]==0) num = Hour[3:0]; else if(Hour[7:4]==1) num = Hour[3:0] + 5&apos;b01010; else num = Hour[3:0] + 5&apos;b10100;//其余时间用小时数作为闪烁次数 end always@(posedge clk) begin if(en_2Hz) begin//每秒扫描2次， if(Minute==0) begin//1min内可扫描120次 if(Second==0) cnt &lt;= 0;//每个整点时刻先将cnt置零，故报时会在整点过后1s时间开始 else cnt &lt;= cnt + 1;//cnt最大为119，之后Minute==0的条件将不满足 end end end endmodule 关于FPGA的最终实现： 因为Basys2只有四个数码管，所以秒钟的两位代码里采用的是按钮选择，当按下使能按键时显示出秒钟，使能无效时显示为时钟和分钟 最终fpga实现例图 数字钟ISE平台代码打包 https://drive.google.com/open?id=1g2RynQw31bOfzxsSwsKrL5GOCE3AaYrD]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>verilog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ultraedit编译器下载]]></title>
    <url>%2F2018%2F03%2F30%2Fultraedit-e7-bc-96-e8-af-91-e5-99-a8-e4-b8-8b-e8-bd-bd%2F</url>
    <content type="text"><![CDATA[微软出品，价值$49.9，支持python，html，css等语言格式下载地址 https://drive.google.com/open?id=1EdrETRVrZsgTTjxlYpmPm4o40E4arZy0]]></content>
      <categories>
        <category>破解文件</category>
        <category>资源下载</category>
      </categories>
      <tags>
        <tag>下载</tag>
        <tag>破解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mips汇编-代码练习1]]></title>
    <url>%2F2018%2F03%2F29%2Fmips-e6-b1-87-e7-bc-96-e8-af-ad-e8-a8-80-e7-bb-83-e4-b9-a01%2F</url>
    <content type="text"><![CDATA[用汇编程序实现以下伪代码:要求采用移位指令实现乘除法运算. 1234567891011Int main()&#123; Int K,Y; Int Z[50]; Y = 56; For(k=0;k&lt;50;k++) Z[K]=Y-16*(k/4+210);&#125; 要求将数组的50个值依次输出到屏幕上 mips汇编代码 1234567891011121314151617181920212223242526272829303132333435363738394041.dataz:.space 200 #分配50*4的空间存储数组str1:.asciiz"z["str2:.asciiz"]="str3:.asciiz"\n".textmain: li $t0,0 #k li $s1,56 #y la $t1,z #address #读取数组z的首地址loop: slti $t2,$t0,50 #比较k&lt;50 exit beq $t2,$0,exit #判断条件满足则执行exit srl $t3,$t0,2 #运算k/2 addi $s2,$t3,210 #运算k/4+210 sll $s2,$s2,4 #运算16*（k/4+210） sub $s2,$s1,$s2 #运算y-16*（k/4+210） sw $s2,0($t1) #将数组的运算结果写入内存 li $v0,4 la $a0,str1 #z[ syscall li $v0,1 add $a0,$t0,$0 syscall #k的值 li $v0,4 la $a0,str2 syscall #]= li $v0,1 lw $a0,0($t1) syscall #输出的z值 li $v0,4 la $a0,str3 #\n回车换行 syscall addi $t0,$t0,1 #k-1 addi $t1,$t1,4 #address+4 j loopexit: li $v0,10 syscall 仿真结果 错误总结 1234567891011121314151617181920212223242526272829303132333435.dataz:.space 200str1:.asciiz"z["str2:.asciiz"]"str3:.asciiz"\n".textmain: li $t0,0 #k li $s1,56 #y la $t1,z #addressloop: srl $t3,$t0,2 #k/2 addi $s2,$t3,210 #k/4+210 sll $s2,$s2,4 #16* sub $s2,$s1,$s2 #y-16* sw $s2,0($t1) li $v0,4 la $a0,str1 #z[ syscall li $v0,1 add $a0,$t0,$0 syscall #k li $v0,4 la $a0,str2 syscall #] li $v0,1 lw $a0,0($t1) syscall #output numbers li $v0,4 la $a0,str3#z[ syscall addi $t0,$t0,1 #k-1 addi $t1,$t1,4 #address+4]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>mips汇编学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[verilog语法学习1]]></title>
    <url>%2F2018%2F03%2F27%2Fverilog-e8-af-ad-e8-a8-80-e5-ad-a6-e4-b9-a01%2F</url>
    <content type="text"><![CDATA[使用//进行简单行代码注释 使用/和/将一段代码注释 例如 123456789101112/*module SEG7_LUT_8(HEX0,HEX1,HEX2,HEX3,HEX4,HEX5,HEX6,HEX7,iDIG); input[31:0] iDIG; output[6:0] HEX0,HEX1,HEX2,HEX3,HEX4,HEX5,HEX6,HEX7; SEG7_LUTu0(HEX0,iDIG[3:0]); SEG7_LUTu1(HEX1,iDIG[7:4]); SEG7_LUTu2(HEX2,iDIG[11:8]); SEG7_LUTu3(HEX3,iDIG[15:12]); SEG7_LUTu4(HEX4,iDIG[19:16]); SEG7_LUTu5(HEX5,iDIG[23:20]); SEG7_LUTu6(HEX6,iDIG[27:24]); SEG7_LUTu7(HEX7,iDIG[31:28]);endmodule*/ 即整段代码被注释]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>verilog</tag>
        <tag>verilog学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[verilog实现D触发器]]></title>
    <url>%2F2018%2F03%2F27%2Fverilog-e5-ae-9e-e7-8e-b0d-e8-a7-a6-e5-8f-91-e5-99-a8%2F</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829303132333435363738394041424344454647`timescale 1ns / 1ps//////////////////////////////////////////////////////////////////////////////////// Company: // Engineer: // // Create Date: 20:05:15 12/11/2017 // Design Name: // Module Name: triger // Project Name: // Target Devices: // Tool versions: // Description: //// Dependencies: //// Revision: // Revision 0.01 - File Created// Additional Comments: ////////////////////////////////////////////////////////////////////////////////////module Dtriger(d,clk,reset,set,q,qf); input [1:0] d; input clk; input reset; input set; output reg[1:0] q;//输出端q output reg[1:0] qf;//反向输出q非 always @ (posedge clk) begin //时钟上升沿时，触发D触发器 if(!set&amp;&amp; reset) //若set为低电平，reset为高电平时，D触发器置1 begin q&lt;= 2'b11 ; qf&lt;= 2'b00 ; end else if (set&amp;&amp; !reset) //若set为高电平，reset为低电平时，D触发器置0 begin q&lt;= 2'b00 ; qf&lt;= 2'b11 ; end else //D触发器正常工作 begin q&lt;= d ; qf&lt;= ~d ; end endendmodule]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>verilog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[verilog实现7人投票器]]></title>
    <url>%2F2018%2F03%2F27%2Fverilog-e5-ae-9e-e7-8e-b07-e4-ba-ba-e6-8a-95-e7-a5-a8-e5-99-a8%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718module people7(s,sum,vote );input [6:0]s;output reg vote;//定义1为通过，0为禁止output reg[2:0] sum;//对7人结果的统计票数大于等于4为通过integer k;always@(s) beginsum=0;for (k=0;k&lt;=6;k=k+1) begin if(s[k]) sum=sum+1; if(sum&gt;3) vote&lt;=1; else vote&lt;=0; end endendmodule 7人投票器打包 https://drive.google.com/open?id=1kP50XV2VeEsLHB9JCXDWeDa8PAxXGW7V]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>verilog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[verilog实现50mhz分频]]></title>
    <url>%2F2018%2F03%2F27%2Fverilog-e5-ae-9e-e7-8e-b050mhz-e5-88-86-e9-a2-91%2F</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829303132333435`timescale 1ns / 1ps//////////////////////////////////////////////////////////////////////////////////// Company: // Engineer: // // Create Date: 20:39:27 12/11/2017 // Design Name: // Module Name: time50 // Project Name: // Target Devices: // Tool versions: // Description: //// Dependencies: //// Revision: // Revision 0.01 - File Created// Additional Comments: ////////////////////////////////////////////////////////////////////////////////////module time50(clk_50MHZ,clk_1HZ);input clk_50MHZ;reg [25:0]Count_DIV=0;output reg clk_1HZ=0;parameter CLK_Freq=50000000;//定义时钟信号为50mhzalways@(posedge clk_50MHZ) begin if(Count_DIV&lt;(CLK_Freq/2-1)) Count_DIV&lt;=Count_DIV+1'b1; else begin Count_DIV&lt;=0; clk_1HZ=~clk_1HZ; end end endmodule//对50mhz进行分频，达到一半频率进行一次分频 ​ 在进行分频时，clk_freq所除数代表分频数，例如分频为1hz，即为freq*1/2，分频为2hz即为freq*2/2]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>verilog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[verilog实现交通灯（2）]]></title>
    <url>%2F2018%2F03%2F27%2Fverilog-e8-af-ad-e8-a8-80-e5-ae-9e-e7-8e-b0-e4-ba-a4-e9-80-9a-e7-81-af%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788`timescale 1ns / 1ps//////////////////////////////////////////////////////////////////////////////////// Company: // Engineer: // // Create Date: 17:06:14 12/26/2017 // Design Name: // Module Name: traffic // Project Name: // Target Devices: // Tool versions: // Description: //// Dependencies: //// Revision: // Revision 0.01 - File Created// Additional Comments: ////////////////////////////////////////////////////////////////////////////////////module traffic (CP,red,green,yellow); input CP; output reg [1:0]red; output reg [1:0]green; output reg [1:0]yellow; reg [3:0]state; reg [5:0]cnt; always@(posedge CP )begin cnt&lt;=0; state&lt;=4'b0000; case(state) 4'b0000:begin red&lt;=2'b11; green&lt;=2'b11; yellow&lt;=2'b11; state&lt;=4'b0001; end 4'b0001: if(cnt==30)begin state&lt;=4'b0010; cnt&lt;=0; end else begin cnt&lt;=cnt+1'b1; red&lt;=2'b10; green&lt;=2'b01; yellow&lt;=2'b00; state&lt;=4'b0001; end 4'b0010: if(cnt==5)begin state&lt;=4'b0011; cnt&lt;=0; end else begin cnt&lt;=cnt+1'b1; red&lt;=2'b10; green&lt;=2'b00; yellow&lt;=2'b01; state&lt;=4'b0010; end 4'b0011: if(cnt==20)begin state&lt;=4'b0100; cnt&lt;=0; end else begin cnt&lt;=cnt+1'b1; red&lt;=2'b01; green&lt;=2'b10; yellow&lt;=2'b00; state&lt;=4'b0011; end 4'b0101: if(cnt==5)begin state&lt;=4'b0001; cnt&lt;=0; end else begin cnt&lt;=cnt+1'b1; red&lt;=2'b01; green&lt;=2'b00; yellow&lt;=2'b10; state&lt;=4'b0101; end endcase endendmodule ​ 测试代码 123456789101112131415161718192021222324252627module test; // Inputs reg CP; // Outputs wire [1:0] red; wire [1:0] green; wire [1:0] yellow; // Instantiate the Unit Under Test (UUT) traffic uut ( .CP(CP), .red(red), .green(green), .yellow(yellow) );always begin CP=1'b0; #5; CP=1'b1; #5; end initial begin // Initialize Inputs CP = 0; #100; ​123 end endmodule 交通灯打包下载 https://drive.google.com/open?id=1ZoUkJqYmHhWgpwRTWb-Q7oLoLSs-Vq7q]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>verilog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[verilog实现交通灯]]></title>
    <url>%2F2018%2F03%2F27%2Fverilog-e5-ae-9e-e7-8e-b0-e4-ba-a4-e9-80-9a-e7-81-af%2F</url>
    <content type="text"><![CDATA[感谢某吴姓大佬 module transport_light( input CP, input CR, output reg [1:0]A, output reg [1:0]B ); reg [1:0] S; always @ (posedge CP) begin if(!CR) begin S &lt;= 2&apos;b00; A &lt;= 2&apos;b00; B &lt;= 2&apos;b00; end ​ else case (S) 2’b00: begin A &lt;=2’b00 ;B &lt;= 2’b10 ;S &lt;= S+1;end 2’b01: begin A &lt;=2’b11 ;B &lt;= 2’b11 ;S &lt;= S+1;end 2’b10: begin A &lt;=2’b10 ;B &lt;= 2’b00 ;S &lt;= S+1;end 2’b11: begin A &lt;=2’b11 ;B &lt;= 2’b11 ;S &lt;= 2’b00;end endcase end ​​123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657endmoduleTEST BENCHmodule test; // Inputs reg CP; reg CR; // Outputs wire [1:0] A; wire [1:0] B; // Instantiate the Unit Under Test (UUT) transport_light uut ( .CP(CP), .CR(CR), .A(A), .B(B) ); always begin CP = 1; #150; CP = 0; #150; CP = 1; #25; CP = 0; #25; CP = 1; #100; CP = 0; #100; CP = 1; #25; CP = 0; #25; end initial begin // Initialize Inputs CP = 0; CR = 0; // Wait 100 ns for global reset to finish #100; CR = 1; // Add stimulus here end endmodule]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>verilog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[verilog实现2选1数据选择器]]></title>
    <url>%2F2018%2F03%2F27%2Fverilog-e5-ae-9e-e7-8e-b02-e9-80-891-e6-95-b0-e6-8d-ae-e9-80-89-e6-8b-a9-e5-99-a8%2F</url>
    <content type="text"><![CDATA[实验代码 12345678910111213141516171819202122232425262728`timescale 1ns / 1ps//////////////////////////////////////////////////////////////////////////////////// Company: // Engineer: // // Create Date: 17:55:55 12/10/2017 // Design Name: // Module Name: mux2to1 // Project Name: // Target Devices: // Tool versions: // Description: //// Dependencies: //// Revision: // Revision 0.01 - File Created// Additional Comments: ////////////////////////////////////////////////////////////////////////////////////module mux2to1(d0,d1,s,q ); input d0,d1,s; output reg q; always@(d0,d1,s)begin if(s==1) q&lt;=d1; else q&lt;=d0; end ​ endmodule]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>verilog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mips汇编语言练习]]></title>
    <url>%2F2018%2F03%2F27%2Fmips-e6-b1-87-e7-bc-96-e8-af-ad-e8-a8-80-e5-ad-a6-e4-b9-a01%2F</url>
    <content type="text"><![CDATA[1.显示16进制数字 123456789101112131415161718192021222324252627.data#显示16进制数字str:byte 0x20,0x30,0x78hex:.space 8.byte 0x00.textmain: li $v0,0x12AF5678 la $s0,hex addi $s0,$s0,7 li $s1,8rep:andi $s2,$v0,0xf addi $s2,$s2,0x30 slti $t0,$s2,0x3a bne $t0,$0,less addi $s2,$s2,0x07less:sb $s2,0($s0) addi $s0,$s0,-1 addi $s1,$s1,-1 srl $v0,$v0,4 slti $t0,$s1,1 beq $t0,$0,rep li $v0,4 la $a0,str syscall li $v0,10 syscall2.输入16进制数字 123456789101112131415161718192021222324252627282930313233343536373839404142434445.data#input 16进制数字str:.space 11err:asciiz "input error".textmain:li $v0,8 la $a0,str li $s1,11 syscall lbu $t1,0($a0) li $t0,0x30 bne $t1,$t0,printerr lbu $t1,1($a0) li $t0,0x78 bne $t1,$t0,printer addi $a0,$a0,2 li $v0,0rep:lb $t0,0($a0) li $t2,0x0a beq $t0,$t2,exit addi $t0,$t0,-48 slti $t1,$t0,0 bne $t1,$0,printerr slti $t1,$t0,10 beq $t1,$0,upper j convertupper:addi $t0,$t0,-7 slti $t1，$t0,10 bne $t1,$0,printerr slti $t1,$t0,16 beq $t1,$0,lower j convertlower:addi $t0,$t0,-32 slti $t1,$t0,10 bne $t1,$0,printerr slti $t1,$t0,16 beq $t1,$0,printerrconvert:sll $v0,$v0,4 or $v0,$v0,$t0 addi $a0,$a0,1 j repprinterr:li $v0,4 la $a0,err syscallexit :li $v0,10 syscall 3.显示10进制无符号数字 1234567891011121314151617181920.data#显示十进制数无符号数str:.space 10null: .byte 0.text main: li $a0,0xffffffff la $t0,10 la $s0,nullrep:addi $s0,$s0,-1 divu $a0,$t0 mfhi $t1 addi $t1,$t1,0x30 sb $t1,0($s0) mflo $a0 beq $a0,$0,print j repprint: add $a0,$s0,$0 li $v0,4 syscall li $v0,10 syscall 4.显示十进制符号数字 1234567891011121314151617181920212223242526272829303132.data#signed 10str:.space 11null: .byte 0.textmain: li $a0,0xffffffff add $a1,$a0,$0 slt $t1,$a0,$0 beq $t1,$0,posi addi $a0,$a0,-1 li $t2,0xffffffff xor $a1,$a0,$t2posi:la $t0,10 la $s0,nullrep:addi $s0,$s0,-1 divu $a1,$t0 mfhi $t1 addi $t1,$t1,0x30 sb $t1,0($s0) mflo $a1 beq $a1,$0,print j rep print:slt $t1,$a0,$0 beq $t1,$0,printposi addi $s0,$s0,-1 li $t1,0x2d sb $t1,0($s0)printposi: add $a0,$s0,$0 li $v0,4 syscall li $v0,10 syscall 5.输入10进制数 1234567891011121314151617181920212223242526272829303132333435363738394041.data#input 10 countstr:.space 12err:.asciiz"input error".textmain: li $v0,8 la $a0,str li $a1,12 syscall lbu $t1,0($a0) li $t0,0x2d bne $t1,$t0,posi addi $a0,$a0,1posi:li $v1,0 li $t2,10rep:lb $t0,0($a0) li $t2,0x0a beq $t0,$t2,exit addi $t0,$t0,-48 slti $t1,$t0,0 bne $t1,0,printerr slti $t1,$t0,10 beq $t1,$0,printerrconvert:multu $v1,$t2 mflo $v1 mfhi $t2 bne $t2,0,printerr add $v1,$v1,$t0 addi $a0,$a0,1 j repprinterr:li $v0,4 la $a0,err syscallexit:la $a0,str lbu $t1,0($a0) li $t0,0x2d bne $t1,$t0,return li $t2,0xffffffff xor $v1,$v1,$t2 addi $v1,$v1,1return: li $v0,10 syscall 6.对数组的正数和负数求和 12345678910111213141516171819202122232425262728293031323334353637.data#data countarray:.word -1,3,4,-5posi:.asciiz"\nthe sun of positive numbers are:" nega:.asciiz"\nthe sun of negative numbers are:".textmain: li $v0,4 la $a0,posi syscall la $a0,array li $a1,4 jal sum add $a0,$v0,$0 li $v0,1 syscall li $v0,4 la $a0,nega syscall add $a0,$v1,$0 li $v0,1 syscall li $v0,10 syscall sum:li $v0,0 li $v1,0loop: blez $a1,retzz addi $a1,$a1 ,-1 lw $t0,0($a0) addi $a0,$a0,4 bltz $t0,negg add $v0,$v0,$t0 b loopnegg:add $v1,$v1,$t0 b loopretzz: jr $ra]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>mips汇编学习</tag>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[verilog实现步进电机]]></title>
    <url>%2F2018%2F03%2F26%2Fverilog-e5-ae-9e-e7-8e-b0-e6-ad-a5-e8-bf-9b-e7-94-b5-e6-9c-ba%2F</url>
    <content type="text"><![CDATA[感谢某位姓王大佬赞助 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051`timescale 1ns / 1psmodule topblock(CLK_50M,A,CLR1,CLR2,state); input CLK_50M,A,CLR1,CLR2; output [2:0] state; wire CP; Divider50MHz U0(CLR1,CLK_50M,CP); steppermotor U1(A,CP,CLR2,state);endmodulemodule Divider50MHz(CLR,CLK_50M,CLK_1HzOut); input CLR,CLK_50M; output reg CLK_1HzOut; reg [24:0] Count_DIV; //parameter CLK_Frq = 50000000,OUT_Frq = 1; parameter CLK_Frq = 50000000,OUT_Frq = 5000000; always @(posedge CLK_50M,negedge CLR) begin if(!CLR) begin CLK_1HzOut&lt;=0;Count_DIV&lt;=0;end else begin if(Count_DIV&lt;(CLK_Frq/(2*OUT_Frq)-1)) Count_DIV&lt;=Count_DIV+1'b1; else begin Count_DIV&lt;=0;CLK_1HzOut&lt;=~CLK_1HzOut;end end endendmodule module steppermotor(A,CP,CLR,state); input A,CP,CLR; output reg [2:0] state; parameter S0=3'b111,S1=3'b000,S2=3'b110,S3=3'b010; parameter S4=3'b011,S5=3'b001,S6=3'b101,S7=3'b100; always @(posedge CP,negedge CLR) begin if(~CLR) state&lt;=S2; else case(state) S0:state&lt;=S1; S1:state&lt;=S2; S2:begin state&lt;=(A==0)?S3:S7;end S3:begin state&lt;=(A==0)?S4:S2;end S4:begin state&lt;=(A==0)?S5:S3;end S5:begin state&lt;=(A==0)?S6:S4;end S6:begin state&lt;=(A==0)?S7:S5;end S7:begin state&lt;=(A==0)?S2:S6;end endcase end endmodule]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>verilog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[verilog实现流水灯]]></title>
    <url>%2F2018%2F03%2F26%2Fverilog-e5-ae-9e-e7-8e-b0-e6-b5-81-e6-b0-b4-e7-81-af%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536`timescale 1ns / 1ps//////////////////////////////////////////////////////////////////////////////////// Company: // Engineer: // // Create Date: 16:45:44 08/17/2012 // Design Name: // Module Name: led // Project Name: // Target Devices: // Tool versions: // Description: //// Dependencies: //// Revision: // Revision 0.01 - File Created// Additional Comments: ////////////////////////////////////////////////////////////////////////////////////module led( input clk, input reset, output [3:0] led_out ); reg[26:0]counter; always@(posedge clk) begin if(reset) counter&lt;=0; else counter&lt;=counter+1; end assign led_out=counter[26:23]; ​ endmodule 流水灯打包 https://drive.google.com/open?id=1kP50XV2VeEsLHB9JCXDWeDa8PAxXGW7V]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>verilog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[verilog语言实现10进制计数器]]></title>
    <url>%2F2018%2F03%2F26%2Fverilog-e8-af-ad-e8-a8-80-e5-ae-9e-e7-8e-b010-e8-bf-9b-e5-88-b6-e7-9a-84-e8-ae-a1-e6-95-b0-e5-99-a8%2F</url>
    <content type="text"><![CDATA[1234567module counter10(clk_50MHZ,seg,an); input clk_50MHZ; output [6:0]seg; output [3:0]an; reg [3:0]out=0; //seg7段译码器信号端 an4选择器信号端 ​ ​ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768reg [1:0]clk_for_an=0;​ reg [25:0]Count_DIV=0;​ reg clk_1HZ=0;​ reg [3:0]an=0;​ reg [6:0]seg=0;​ parameter CLK_Freq=50000000;//定义时钟信号为50mhz​ ​ ​ ​ ​ ​ /*always@(posedge clk_50MHZ) begin​ if(clk_for_an&lt;3)​ clk_for_an=clk_for_an+1;​ else​ clk_for_an=2'b00;​ end*/​ ​ always@(posedge clk_50MHZ) begin​ if(Count_DIV&lt;(CLK_Freq/2-1))​ Count_DIV&lt;=Count_DIV+1'b1;​ else begin​ Count_DIV&lt;=0;​ clk_1HZ=~clk_1HZ;​ end​ end//对50mhz进行分频，达到一半频率进行一次分频​ ​ ​ ​ always@(posedge clk_50MHZ) begin​ case(&#123;Count_DIV[1],Count_DIV[0]&#125;)​ 2'b00:an&lt;=4'b0111;​ 2'b01:an&lt;=4'b1011;​ 2'b10:an&lt;=4'b1101;​ 2'b11:an&lt;=4'b1110;​ endcase​ end//对an进行赋值​ ​ always@(posedge clk_50MHZ) begin​ if(Count_DIV==24999999&amp;&amp;clk_1HZ)//当时钟信号为24999999时为有效清零信号​ begin ​ if(out==4'b1001)​ out&lt;=4'b0000;​ else​ out&lt;=out+1'b1;​ end​ ​ end//运算加法器部分逢9置零​ ​ always@(posedge clk_50MHZ) begin​ case(out)​ 0:seg=7'b100_0000;​ 1:seg=7'b111_1001;​ 2:seg=7'b010_0100;​ 3:seg=7'b011_0000;​ 4:seg=7'b001_1001;​ 5:seg=7'b001_0010;​ 6:seg=7'b000_0010;​ 7:seg=7'b111_1000;​ 8:seg=7'b000_0000;​ 9:seg=7'b001_0000;​ endcase​ end​ endmodule]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>verilog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[wps pro版]]></title>
    <url>%2F2018%2F03%2F23%2Fwps-pro-e7-a0-b4-e8-a7-a3-e7-89-88-e4-b8-8b-e8-bd-bd%2F</url>
    <content type="text"><![CDATA[去除更新，去除广告，去掉无用模块，精简功能 去除后台下载软件，去除账户登陆 绿色版纯净无广告 激活码 THUV2-32HH7-6NMHN-PTX7Y-QQCTH 谷歌云盘：https://drive.google.com/open?id=1i0f9Nissu22xGWAaABKHAsgvdmka4Kof 百度云链接：https://pan.baidu.com/s/1eW3nnuhOtbgCbZo_cjulOw 密码：lj1t 微软onedrive：https://1drv.ms/u/s!Ah7P83mKLnExhEHphyrEp1Zy7HkX]]></content>
      <categories>
        <category>破解文件</category>
        <category>资源下载</category>
      </categories>
      <tags>
        <tag>下载</tag>
        <tag>破解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[代码编辑器notepad++]]></title>
    <url>%2F2018%2F03%2F22%2Fnotepad-e4-b8-8b-e8-bd-bd%2F</url>
    <content type="text"><![CDATA[开源的代码编辑器，支持多种代码格式和语法高亮 搭配notepad插件使用体验很棒 百度网盘： https://pan.baidu.com/s/1petx3QU7vUUwYaaBjAad3Q 谷歌云盘： https://drive.google.com/open?id=1ky-oMKtQPma3zyAv5siGTBwZXfPTJwQk onedrive： https://1drv.ms/u/s!Ah7P83mKLnExhDqfSy_PieGS9Evd]]></content>
      <categories>
        <category>资源下载</category>
      </categories>
      <tags>
        <tag>下载</tag>
        <tag>verilog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kindle实用工具]]></title>
    <url>%2F2018%2F03%2F22%2Fkindle-e5-ae-9e-e7-94-a8-e5-b7-a5-e5-85-b7-e4-b8-8b-e8-bd-bd%2F</url>
    <content type="text"><![CDATA[1.全能解决方案calibre 转换电子书格式，修改封面，重新排版，更换字体等 2.pdf重排版工具k2pdfopt 开源协议的pdf排版软件，选择输出设备为kindle即可将传统pdf文件转换成适合6寸kindle的版本，同时支持ocr光学识别，对界面进行重新排版以便阅读 3.kindle清理软件sdrcleaner 清理多余的sdr文档，清理书签笔记标注文件 谷歌云盘地址calibre：https://drive.google.com/open?id=1CmXbxfxpxkep0sMb8tMdjXxY5E6FWo8D k2pdfopt：https://drive.google.com/open?id=1mXveJVKA_5RyRXXTVIJkzOUbQfKajwaB sdrcleaner：https://drive.google.com/open?id=1Izp3MPoQkH9sk7bK8sAlv-bx3MKDUnrw 百度网盘calibre：https://pan.baidu.com/s/1rNoHcNqwb-FrirdzLBL1UAk2pdf：https://pan.baidu.com/s/1hF8zeaos-AKw8xQaCJWIZwsdrcleaner：https://pan.baidu.com/s/1g2rbFnqoYgQ9hZqIvUZzvw微软onedrivecalibre：https://1drv.ms/u/s!Ah7P83mKLnExhEAFJ9hkUX7y3u24kapdf：https://1drv.ms/u/s!Ah7P83mKLnExhD6occhFl98UlV9Fsdrcleaner：https://1drv.ms/u/s!Ah7P83mKLnExhD_ykW8pkwt-SGah]]></content>
      <categories>
        <category>资源下载</category>
      </categories>
      <tags>
        <tag>下载</tag>
        <tag>kindle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[太宰治三部曲 for kindle]]></title>
    <url>%2F2018%2F03%2F22%2Fe5-a4-aa-e5-ae-b0-e6-b2-bb-e4-b8-89-e9-83-a8-e6-9b-b2%2F</url>
    <content type="text"><![CDATA[onedrive下载 https://1drv.ms/u/s!Ah7P83mKLnExhDSh85xKCIPJ2-b7百度网盘下载 https://pan.baidu.com/s/1ch0gCsUINRo69aDE3GM18A谷歌云盘 https://drive.google.com/open?id=1Rze5iAmxzoJVCjmrd5eqMOopyTpjutDR]]></content>
      <categories>
        <category>资源下载</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>下载</tag>
        <tag>kindle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[收藏mobi电子书分享]]></title>
    <url>%2F2018%2F03%2F21%2Fe6-94-b6-e8-97-8fmobi-e7-94-b5-e5-ad-90-e4-b9-a6-e5-88-86-e4-ba-ab%2F</url>
    <content type="text"><![CDATA[补档 https://pan.baidu.com/s/1bIYxMwea-qkQ8vBvWKfdTw 提取码 achnonedrive https://1drv.ms/f/s!Ah7P83mKLnExhCjDzv4Akf32KY8n]]></content>
      <categories>
        <category>资源下载</category>
      </categories>
      <tags>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[verilog实现自动洗衣机]]></title>
    <url>%2F2018%2F03%2F21%2Fverilog-e5-ae-9e-e7-8e-b0-e8-87-aa-e5-8a-a8-e6-b4-97-e8-a1-a3-e6-9c-ba-e5-8a-9f-e8-83-bd%2F</url>
    <content type="text"><![CDATA[造福大家，分享给以后需要写的伙伴实验流程设计： 1、系统功能 基本功能：待机5s正转60s待机5s反转60s四种基本状态，能够实现设置循环次数后待机，并显示循环次数，遇到紧急情况可按紧急按钮暂停洗衣机的工作，循环次数到0自动报警。 2、系统设计 ①分频模块：将系统给的50MHz的频率通过分频模块变成1Hz的clk。 ②三个七段数码管，分别表示倒计时的个位tia，十位tib和循环剩余次数tim。 ③洗衣机主程序： 控制模块采用有限状态机实现对洗衣机工作状态的控制。启动start后，控制器首先进入待机s0状态，时间从5秒倒计时，如果没有到0秒则继续等待，时间自减；当t=0,进入洗衣机正转s1状态，时间从60秒倒计时，如果没有到0秒则继续等待，时间自减；当t=0, 进入洗衣机待机s2状态，同理等待5秒；当t为零后，进入s3洗衣机反转状态，时间从60秒倒计时，如果没有到0秒则继续等待，时间自减；整个过程依次循环。紧急状态stop，当按下紧急停止按钮后，处于正反转状态中的电机停止转动，同时紧急报警 LED灯亮，因此紧急状态不设定独立状态。 ④在实验过程中发现不能在数码管上同时显示出十位和个位，于是采用四位动态扫描模块，分频400hz分时显示数码管，因为人眼的视觉暂留效应所以看上去像是三个数码管同时亮了 123456789101112131415161718module Divider50MHZ(CR,clk,clk0); input CR,clk; output reg clk0; reg [24:0] Count_DIV; always @(posedge clk,negedge CR) if(!CR) begin clk0&lt;=0; Count_DIV&lt;=0; end else begin if(Count_DIV&lt;4999999) Count_DIV&lt;=Count_DIV+1'b1; else begin Count_DIV&lt;=0; clk0 &lt;= ~clk0; endendendmodule 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384module seg7(clk,a,b,t,D,w); input \[3:0\]a,b,t; reg \[3:0\]code; input clk; output\[6:0\]D; output \[2:0\]w; reg \[6:0\]D; integer clk\_div; reg clk\_400hz; always @(posedge clk) begin if(clk\_div==100000) begin clk\_div&lt;=1'b0; clk\_400hz&lt;=~clk\_400hz; end else clk\_div&lt;=clk\_div+1'b1; end reg \[2:0\]w=3'b110; always @(posedge clk_400hz) w&lt;=&#123;w\[1:0\],w\[2\]&#125;; always @(w) case(w) 3'b110:code=a; 3'b101:code=b; 3'b011:code=t; endcasealways@(code) begin case(code) 4'b0000: D&lt;=7'b0000001; 4'b0001: D&lt;=7'b1001111; 4'b0010: D&lt;=7'b0010010; 4'b0011: D&lt;=7'b0000110; 4'b0100: D&lt;=7'b1001100; 4'b0101: D&lt;=7'b0100100; 4'b0110: D&lt;=7'b1100000; 4'b0111: D&lt;=7'b0001111; 4'b1000: D&lt;=7'b0000000; 4'b1001: D&lt;=7'b0000100; default: D&lt;=7'b1111111; endcase end endmodulemodule washing(CR,clk,rst,stop,start,add,fore,back,a,b,alarm,led,t,D,w); input CR,clk,rst,start,add,stop; //stop为紧急状态信号 wire clk0; output reg fore,back,alarm; //display output reg \[3:0\]a,b,t; //a为倒计时个位，b为倒计时十位 output reg \[2:0\]led; output wire \[6:0\]D; output \[2:0\]w; reg \[3:0\]state; reg \[3:0\]count; parameter s0=4'b0001,s1=4'b0010,s2=4'b0100,s3=4'b1000; Divider50MHZ part1(CR,clk,clk0); always@(posedge add or posedge rst) // 循环次数 count 设置 begin if(rst) count&lt;=1'b0; else begin if(start==0) begin if(count&lt;15) count&lt;=count+1'b1; else count&lt;=1'b0; end end end always@(posedge clk0 or posedge rst) begin if(rst) // 系统复位 begin back&lt;=1'b0; fore&lt;=1'b0; a&lt;=4'b0000; b&lt;=4'b0000; state&lt;=s0; led&lt;=3'b001; alarm=1'b0; end else begin if(!stop&amp;&amp; start) //start为1，stop为0则正常工作 begin alarm=0; if(t) // 循环次数 t&gt;0, 开始工作 begin case(state) s0:begin if(b==0 &amp;&amp; a==0) //时间为0，状态转移 begin state&lt;=s1; a&lt;=4'b0100;//4 b&lt;=4'b0000;//0 led&lt;=3'b001; back&lt;=1'b0; fore&lt;=1'b0; end else begin state&lt;=s0; led&lt;=3'b100; back&lt;=1'b0; fore&lt;=1'b0; end end s1:begin if(b==0&amp;&amp;a==0) begin state&lt;=s2; a&lt;=4'b1001;//9 b&lt;=4'b0001;//5 back&lt;=1'b0; fore&lt;=1'b1; led&lt;=3'b010; end else begin state&lt;=s1; led&lt;=3'b001; back&lt;=1'b0; fore&lt;=1'b0; end end s2:begin if(b==0&amp;&amp;a==0) begin state&lt;=s3; a&lt;=4'b0100;//4 b&lt;=4'b0000;//0 back&lt;=1'b0; fore&lt;=1'b0; led&lt;=3'b001; end else begin state&lt;=s2; back&lt;=1'b0; fore&lt;=1'b0; led&lt;=3'b010; end end s3:begin if(b==0&amp;&amp;a==0) begin state&lt;=s0; a&lt;=4'b1001;//4 b&lt;=4'b0001;//0 back&lt;=1'b1; fore&lt;=1'b0; led&lt;=3'b100; end else begin state&lt;=s3; back&lt;=1'b0; fore&lt;=1'b0; led&lt;=3'b001; end end default:state&lt;=s0; endcase if(&#123;b,a&#125;&gt;0) // 倒计时控制部分 begin if(a==0) //a为0,则a赋值9，b自减1 begin a&lt;=9;//9 b&lt;=b-1'b1; end else a&lt;=a-1'b1; end else if(a==0&amp;&amp;b==0&amp;&amp;state==s0&amp;&amp;!stop&amp;&amp;led==3'b100) begin // 一次循环结束t自减1 t&lt;=t-1'b1; end end else begin back&lt;=1'b0; fore&lt;=1'b0; a&lt;=4'b0000; b&lt;=4'b0000; alarm=0; state&lt;=s0; led&lt;=3'b001; end end else if(stop &amp;&amp; start) //en 为 1，进入紧急状态 begin back&lt;=1'b0; fore&lt;=1'b0; alarm=1'b1; end else //start为0，给循环次数t赋值 begin t&lt;=count; a&lt;=0; b&lt;=0; alarm=1'b0; end end end seg7 part2(clk,a,b,t,D,w); endmodule 管脚约束 ​ 部分代码修改提示 时钟的1hz因为实验要求改为分频2hz 59s的倒计时因为时间过长改为19s]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>verilog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[wordpress插件分享]]></title>
    <url>%2F2018%2F03%2F11%2Fwordpress-e5-ae-9e-e7-94-a8-e6-8f-92-e4-bb-b6%2F</url>
    <content type="text"><![CDATA[wordpress实用插件 1.代码插入高亮插件 2.网站seo优化插件yoast seo高级版 使用ftp上传至插件目录下，解压安装 onedrive地址https://1drv.ms/u/s!Ah7P83mKLnExhD2c93lG__z6v8aY 谷歌云盘 https://drive.google.com/open?id=1RJb9ZmY-kfrV7bX35DvGMDgt00rq0ODP https://drive.google.com/open?id=13FZAgl43BtNw_K8wPJDx3O5eXjTcnUNy]]></content>
      <categories>
        <category>破解文件</category>
        <category>资源下载</category>
      </categories>
      <tags>
        <tag>下载</tag>
        <tag>破解</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[wordpress屏蔽代码]]></title>
    <url>%2F2018%2F03%2F11%2Fwordpress-e5-b1-8f-e8-94-bd-e4-bb-a3-e7-a0-81%2F</url>
    <content type="text"><![CDATA[wordpress的后台模块屏蔽代码 在后台php语言的fuction.php里添加代码 屏蔽左侧菜单 function remove_menus() { global $menu; $restricted = array( __(&apos;Dashboard&apos;), __(&apos;Posts&apos;), __(&apos;Media&apos;), __(&apos;Links&apos;), __(&apos;Pages&apos;), __(&apos;Appearance&apos;), __(&apos;Tools&apos;), __(&apos;Users&apos;), __(&apos;Settings&apos;), __(&apos;Comments&apos;), __(&apos;Plugins&apos;) ); end ($menu); while (prev($menu)){ $value = explode(&apos; &apos;,$menu[key($menu)][0]); if(strpos($value[0], &apos;&lt;&apos;) === FALSE) { if(in_array($value[0] != NULL ? $value[0]:&quot;&quot; , $restricted)){ unset($menu[key($menu)]); } }else { $value2 = explode(&apos;&lt;&apos;, $value[0]); if(in_array($value2[0] != NULL ? $value2[0]:&quot;&quot; , $restricted)){ unset($menu[key($menu)]); } } } } if (is_admin()){ // 屏蔽左侧菜单 add_action(&apos;admin_menu&apos;, &apos;remove_menus&apos;); } 屏蔽子菜单 function remove_submenu() { // 删除”设置”下面的子菜单”隐私” remove_submenu_page(&apos;options-general.php&apos;, &apos;options-privacy.php&apos;); // 删除”外观”下面的子菜单”编辑” remove_submenu_page(&apos;themes.php&apos;, &apos;theme-editor.php&apos;); } if (is_admin()){ //删除子菜单 add_action(&apos;admin_init&apos;,&apos;remove_submenu&apos;); } 屏蔽后台更新 function wp_hide_nag() { remove_action( &apos;admin_notices&apos;, &apos;update_nag&apos;, 3 ); } add_action(&apos;admin_menu&apos;,&apos;wp_hide_nag&apos;); 屏蔽后台显示和提示帮助 function remove_screen_options(){ return false;} add_filter(&apos;screen_options_show_screen&apos;, &apos;remove_screen_options&apos;); add_filter( &apos;contextual_help&apos;, &apos;wpse50723_remove_help&apos;, 999, 3 ); function wpse50723_remove_help($old_help, $screen_id, $screen){ $screen-&gt;remove_help_tabs(); return $old_help; } 屏蔽主页模块 function example_remove_dashboard_widgets() { // Globalize the metaboxes array, this holds all the widgets for wp-admin global $wp_meta_boxes; // 以下这一行代码将删除 &quot;快速发布&quot; 模块 unset($wp_meta_boxes[&apos;dashboard&apos;][&apos;side&apos;][&apos;core&apos;][&apos;dashboard_quick_press&apos;]); // 以下这一行代码将删除 &quot;引入链接&quot; 模块 unset($wp_meta_boxes[&apos;dashboard&apos;][&apos;normal&apos;][&apos;core&apos;][&apos;dashboard_incoming_links&apos;]); // 以下这一行代码将删除 &quot;插件&quot; 模块 unset($wp_meta_boxes[&apos;dashboard&apos;][&apos;normal&apos;][&apos;core&apos;][&apos;dashboard_plugins&apos;]); // 以下这一行代码将删除 &quot;近期评论&quot; 模块 unset($wp_meta_boxes[&apos;dashboard&apos;][&apos;normal&apos;][&apos;core&apos;][&apos;dashboard_recent_comments&apos;]); // 以下这一行代码将删除 &quot;近期草稿&quot; 模块 unset($wp_meta_boxes[&apos;dashboard&apos;][&apos;side&apos;][&apos;core&apos;][&apos;dashboard_recent_drafts&apos;]); // 以下这一行代码将删除 &quot;WordPress 开发日志&quot; 模块 unset($wp_meta_boxes[&apos;dashboard&apos;][&apos;side&apos;][&apos;core&apos;][&apos;dashboard_primary&apos;]); // 以下这一行代码将删除 &quot;其它 WordPress 新闻&quot; 模块 unset($wp_meta_boxes[&apos;dashboard&apos;][&apos;side&apos;][&apos;core&apos;][&apos;dashboard_secondary&apos;]); // 以下这一行代码将删除 &quot;概况&quot; 模块 unset($wp_meta_boxes[&apos;dashboard&apos;][&apos;normal&apos;][&apos;core&apos;][&apos;dashboard_right_now&apos;]); } add_action(&apos;wp_dashboard_setup&apos;, &apos;example_remove_dashboard_widgets&apos; ); 屏蔽后台页脚版本 function change_footer_admin () {return &apos;&apos;;} add_filter(&apos;admin_footer_text&apos;, &apos;change_footer_admin&apos;, 9999); function change_footer_version() {return &apos;&apos;;} add_filter( &apos;update_footer&apos;, &apos;change_footer_version&apos;, 9999); 屏蔽后台wp的logo function annointed_admin_bar_remove() { global $wp_admin_bar; /* Remove their stuff */ $wp_admin_bar-&gt;remove_menu(&apos;wp-logo&apos;); } add_action(&apos;wp_before_admin_bar_render&apos;, &apos;annointed_admin_bar_remove&apos;, 0);]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>脚本</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows的java环境配置]]></title>
    <url>%2F2018%2F03%2F10%2Fjava-e7-8e-af-e5-a2-83-e9-85-8d-e7-bd-ae%2F</url>
    <content type="text"><![CDATA[一：右键计算机，属性，高级设置，环境变量二：新建环境变量1：JAVA_HOME 变量值地址为jdk安装目录路径2：CLASSPATH 变量值为 .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar3：Path(系统已经存在Path变量，请在Path变量最后进行添加，不要删除其他内容) ;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin 安装完成后在cmd里输入java，javac查看是否配置成功]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安卓打包签名工具]]></title>
    <url>%2F2018%2F03%2F10%2Fe5-ae-89-e5-8d-93-e6-89-93-e5-8c-85-e7-ad-be-e5-90-8d-e5-b7-a5-e5-85-b7%2F</url>
    <content type="text"><![CDATA[利用安卓打包签名工具 给修改后的app包重新签名，实现非root方式修改软件 最实用操作，修改微信和qq的启动页画面 修改app内置颜色配色方案和文字 修改界面框架 非root机成功率看造化，国产安卓定制系统看脸 下载地址: https://pan.baidu.com/s/1uiqmmJoHbZxbXbRu5-XKrw https://1drv.ms/u/s!Ah7P83mKLnExhDvaVJ2HEiDvdE07 https://1drv.ms/u/s!Ah7P83mKLnExhDvaVJ2HEiDvdE07]]></content>
      <categories>
        <category>资源下载</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>下载</tag>
        <tag>破解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[verilog语法之reg和wire区别]]></title>
    <url>%2F2018%2F03%2F10%2Fverilog-e8-af-ad-e8-a8-80-e8-af-ad-e6-b3-95%2F</url>
    <content type="text"><![CDATA[​ reg相当于存储单元，wire相当于物理连线 Verilog 中变量的物理数据分为线型和寄存器型。 ​ 这两种类型的变量在定义时要设置位宽，缺省为1位。变量的每一位可以是0，1，X，Z。其中x代表一个未被预置初始状态的变量或者是由于由两个或多个驱动装置试图将之设定为不同的值而引起的冲突型线型变量。z代表高阻状态或浮空量。 ​ 线型数据包括wire,wand,wor等几种类型在被一个以上激励源驱动时，不同的线型数据有各自决定其最终值的分辨办法。​ 两者的区别是：即存器型数据保持最后一次的赋值，而线型数据需要持续的驱动 输入端口可以由net/reg驱动，但输入端口只能是net；输出端口可以使net/reg类型，输出端口只能驱动net；若输出端口在过程块中赋值则为reg型，若在过程块外赋值则为net型 用关键词inout声明一个双向端口, inout端口不能声明为寄存器类型，只能是net类型。 wire表示直通，即只要输入有变化，输出马上无条件地反映；reg表示一定要有触发，输出才会反映输入。 不指定就默认为1位wire类型。专门指定出wire类型，可能是多位或为使程序易读。wire只能被assign连续赋值，reg只能在initial和always中赋值。wire使用在连续赋值语句中，而reg使用在过程赋值语句中。 在连续赋值语句中，表达式右侧的计算结果可以立即更新表达式的左侧。​ 在理解上，相当于一个逻辑之后直接连了一条线，这个逻辑对应于表达式的右侧，而这条线就对应于wire。在过程赋值语句中，表达式右侧的计算结果在某种条件的触发下放到一个变量当中，而这个变量可以声明成reg类型的。根据触发条件的不同，过程赋值语句可以建模不同的硬件结构：如果这个条件是时钟的上升沿或下降沿，那么这个硬件模型就是一个触发器；如果这个条件是某一信号的高电平或低电平，那么这个硬件模型就是一个锁存器；如果这个条件是赋值语句右侧任意操作数的变化，那么这个硬件模型就是一个组合逻辑。 输入端口可以由wire/reg驱动，但输入端口只能是wire；输出端口可以使wire/reg类型，输出端口只能驱动wire；若输出端口在过程块中赋值则为reg型，若在过程块外赋值则为net型。用关键词inout声明一个双向端口, inout端口不能声明为reg类型，只能是wire类型；输入和双向端口不能声明为寄存器类型。 简单来说硬件描述语言有两种用途：1、仿真，2、综合。对于wire和reg，也要从这两个角度来考虑。从仿真的角度来说，HDL语言面对的是编译器（如Modelsim等），相当于软件思路。 这时： wire对应于连续赋值，如assign reg对应于过程赋值，如always，initial 从综合的角度来说，HDL语言面对的是综合器（如DC等），要从电路的角度来考虑。 这时：1、wire型的变量综合出来一般是一根导线；2、reg变量在always块中有两种情况： (1)、always后的敏感表中是（a or b or c）形式的，也就是不带时钟边沿的，综合出来还是组合逻辑 (2)、always后的敏感表中是（posedge clk）形式的，也就是带边沿的，综合出来一般是时序逻辑，会包含触发器（Flip－Flop） 在设计中，输入信号一般来说你是不知道上一级是寄存器输出还是组合逻辑输出，那么对于本级来说就是一根导线，也就是wire型。而输出信号则由你自己来决定是寄存器输出还是组合逻辑输出，wire型、reg型都可以。但一般的，整个设计的外部输出（即最顶层模块的输出），要求是寄存器输出，较稳定、扇出能力也较好。转自csdn http://blog.csdn.net/zmq5411/article/details/7952461]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>verilog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[p站画师id分享第二辑]]></title>
    <url>%2F2018%2F03%2F10%2Fpixivid2%2F</url>
    <content type="text"><![CDATA[id为地址后面数字画师主页 https://www.pixiv.net/member.php?id=13122157 https://www.pixiv.net/member.php?id=152142 https://www.pixiv.net/member.php?id=1030312 https://www.pixiv.net/member.php?id=2188232 https://www.pixiv.net/member.php?id=1555970]]></content>
      <categories>
        <category>ACG下载</category>
      </categories>
      <tags>
        <tag>pixiv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[百度网盘直链下载js脚本]]></title>
    <url>%2F2018%2F03%2F09%2Fe7-99-be-e5-ba-a6-e7-bd-91-e7-9b-98-e7-9b-b4-e9-93-be-e4-b8-8b-e8-bd-bdjs-e8-84-9a-e6-9c-ac%2F</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768var CURL, DURLtry &#123; CURL = $context.safari.items.location.href&#125; catch (e) &#123; CURL = $clipboard.link&#125; finally &#123; if (/pan.baidu.com/g.test(CURL)) &#123; $http.get(&#123; url: CURL, header: &#123; "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 10_1_1 like Mac OS X; zh-CN) AppleWebKit/537.51.1 (KHTML, like Gecko) Mobile/14B100 UCBrowser/10.7.5.650 Mobile" &#125;, handler: function(resp) &#123; var data = resp.data.match(/(window\.yunData = ).*?(?=;)/g) data = JSON.parse(data[0].split("=")[1]) list = data.file_list[0] Name = list.path.split("/").pop() DURL = "https://pan.baidu.com/share/download?bdstoken=" + data.bdstoken + "&amp;web=5&amp;app_id=" + list.app_id + "&amp;logid=" + data.sharesuk + "=&amp;channel=chunlei&amp;clienttype=5&amp;uk=" + data.uk + "&amp;shareid=" + data.shareid + "&amp;fid_list=%5B" + list.fs_id + "%5D&amp;sign=" + data.downloadsign + "&amp;timestamp=" + data.timestamp + "&amp;r=0.7219390214898602" $http.get(&#123; url: DURL, handler: function(resp) &#123; var data = resp.data if (!data.errno) &#123; $ui.toast("直链已复制到剪贴板...") $clipboard.text = data.dlink $ui.menu(&#123; items: ["链接已复制", "直接下载", "迅雷下载", "直接退出"], handler: function(title, idx) &#123; switch (idx) &#123; case 1: $http.download(&#123; url: data.link, handler: function(resp) &#123; var file = resp.data $share.sheet([Name, file]) &#125; &#125;) break; case 2: $app.openURL("thunder://" + data.dlink) break; default: $app.close() $context.close() break; &#125; &#125; &#125;) &#125; else &#123; $ui.alert("直链获取失败...") $delay(1, function() &#123; $app.close(); $context.close(); &#125;) &#125; &#125; &#125;) &#125; &#125;) &#125; else &#123; $ui.alert("不是有效的百度网盘链接...") $delay(1, function() &#123; $app.close(); $context.close(); &#125;) &#125;&#125; ios用户使用jsbox运行脚本提取直链，使用safari或者迅雷下载]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>百度网盘</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用chrome实现轻量网页打包软件]]></title>
    <url>%2F2018%2F03%2F07%2Fchrome-e6-89-93-e5-8c-85-e7-bd-91-e9-a1-b5-e4-b8-bapwa-e8-bd-bb-e5-ba-94-e7-94-a8%2F</url>
    <content type="text"><![CDATA[本文转自少数派 做了适当修改 PWA(Progressive Web Apps)是 Google 最近在提的一种 Web App 形态（或者如 Wikipedia 所称的_“软件开发方法”_）。 它比原生应用更轻量，但是却比现有的Web APP的功能更加丰富。 最大也是最关键的区别是它能够脱离浏览器的「束缚」（虽然依然是基于浏览器的技术），能够把PWA网站添加到你的桌面上，不管是PC操作系统还是手机操作系统，类似于一个原生应用一样，并且拥有媲美原生应用的体验。 它也能拥有原生APP应用一般的启动闪屏，它也能像原生APP应用一般能有消息推送——不过要知道，它源自Web，通常只有传统APP的体积的十分之一甚至更小。它不用等待下载安装的时间，打开网页的时候就已经「下载」并且「安装」完毕。 要想体验这项技术，如果你是安卓用户，那最新版的Chrome已经支持； 如果你是iOS用户，可以等待3月份的11.3版本更新；如果你是PC电脑用户，那么来看看怎么在电脑上也体验体验PWA吧。 配置Chrome 首先更新你的Chrome版本到64或以上。 然后在地址栏输入chrome://flags，找到Desktop PWAs的选项将其Enabled了，然后Chrome会提示你重启浏览器。（实践表明，在搜索栏搜desktop即可出现） 重启后，再点击chrome的菜单栏，更多工具里你就会看见“添加到桌面”的选项。 选择喜欢的网站添加即可 安卓版原理相似，也可以开启这个功能 ios限制权限 我尝试了pixiv和哔哩哔哩发现效果很好，chrome的插件特性也可以加入pwa里面，比如添加了adblock插件后浏览无广告的网页就像app一样纯净。亲测了pixiv的下载插件也可以直接在pwa里面运行十分方便。 最后，我无耻地测试了一下自己的博客发现兼容性很好，而且pwa可以缓存下网页数据方便下次打开，甚至在不联网的情况下也可以打开，看之前缓冲的网页。（如果你清理了chrome缓存那么这个也会被清理掉） 最后说一句，电脑要用浏览器当然最好chrome，什么360极速浏览器，QQ浏览器，搜狗浏览器说实话我看不上，套壳而已，添加了国人化使用体验更好而已，最后恬不知耻地写上采用超高速内核，打开网页效率更快 个人喜好，各有喜爱。 最后不是所有网页都适合打包，有的打包真的很丑。 推荐几个：破站，p站，我的博客，邮箱，hub系统（骄傲），网页版推特，百度网盘（配合油猴插件巨好用），聚合搜索引擎，网页版网易云音乐，贴吧 效果：]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux虚拟机安装实践分享2]]></title>
    <url>%2F2018%2F03%2F06%2Fe8-99-9a-e6-8b-9f-e6-9c-ba-e5-ae-89-e8-a3-85linux-e7-9a-84vmwaretools%2F</url>
    <content type="text"><![CDATA[安装VMware tools 等待虚拟机启动 选择虚拟机上方的菜单安装vmware tools 如果是第一次安装会等待一小会，下载一个linux的zip文件 下载完成后文件会在文件管理器的下载目录里面 因为我已经删掉了所以在回收站里面，选择那个后缀名为tar.gz的文件右键提取，就提取在所在目录就行，记住提取出的文件的名字，或者重命名个简单的 然后回到桌面，进入终端控制，鼠标右键打开终端 输入sudo su然后回车 按照提示输入你的账户root密码，就是你之前安装系统的时候的密码 输入后会进入root模式 利用cd指令指向你放vmwaretools的目录，比如cd download 提醒，安装的是中文版linux的系统，所以目录应该是中文 改成cd 下载即可 想要输入中文点击右上角的键盘切换，切换成拼音 cd 下载目录后，继续cd 到你之前重命名的那个文件名字，后缀带上 然后回车，系统会自动开始安装，当看见successfully的时候表示已经安装完成 这个时候就可以改变分辨率，直接往虚拟机里拖文件了]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>虚拟机linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[总结规律 猜空白中的数字]]></title>
    <url>%2F2018%2F03%2F06%2Fproblem-of-google%2F</url>
    <content type="text"><![CDATA[结合数字的英文字母解答 考虑这是Google出的一道题目 有google的最优解答 10，9，60，90，70，66，_]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[建站心得]]></title>
    <url>%2F2018%2F03%2F05%2Fstartexp%2F</url>
    <content type="text"><![CDATA[​ 买一个好点的服务器​ 为什么要好，因为谁也不想自己的网站运行着突然就失连了。​ 最早使用的是000webhost的免费空间，每16小时要停机休息一次，这就意味着在这一小时里你和你辛苦建立的网站说再见了。一旦运气不好主机休息的期间数据出了问题，那你辛苦建好的站就没了当然如果你是一个经常做数据备份的人那么你还有希望。免费的一定不是最好的，为了一份保障最好花点心思挑选主机。​ 国内主机商 阿里云最强服务最好 ，腾讯云其次，百度就是个赶脚的，看见大家都做云服务器自己也搞，结果起步晚经验不足质量差 阿里云非常贵啦，对主机没有太高要求的可以选择腾讯云，都有学生优惠服务，优惠年9.9一直到你毕业那年很划算。 国外主机有很多比国内便宜许多，vultr，1host还有好多忘记了，vultr是一家新提供商，实力雄厚，之前体验了一下。月付5美元，500g的流量挺适合搭线路，有hk和美国西海岸服务器连接速度比较快。 没有服务器是一直不出问题的，所以得经常备份网站，这样才能万无一失。]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux虚拟机安装实践分享]]></title>
    <url>%2F2018%2F03%2F05%2Flinux-e8-99-9a-e6-8b-9f-e6-9c-ba-e5-ae-89-e8-a3-85-e6-96-b9-e6-b3-95-e6-ad-a5-e9-aa-a4%2F</url>
    <content type="text"><![CDATA[一：安装VMware station虚拟机 二：下载linux虚拟机映像我下载的是ubuntu16.3的官方长期服务版 三：安装虚拟机打开虚拟机，选择添加虚拟机 选择自定义 使用默认的就行，兼容性最好 选择稍后安装，这样可以选择配置信息 选择linux系统，版本如果是ubuntu就直接选择ubuntu的默认预设，如果是其他的选择对应的32或64位版本 安装的位置建议放在除c盘外的根目录下，否则出错 这里视自己的cpu性能而定，不要选择和cpu数目一样的否则会死机，建议都选择2 内存的选择虚拟机不需要很大的内存，按照建议来就行 这里的网络连接模式一定要选择，第一个桥接模式，如果你是用wifi连接的网络，不选择桥接可能导致无法联网！ 类型按照默认的推荐的选择即可 如果之前装过ubuntu可以选择使用现有磁盘然后覆盖安装，第一次安装就选择创建新的磁盘，给你的磁盘取个名字 这里要注意的是，虚拟机空间不需要太大，因为你不需要在里面下载过多的东西，推荐的20gb足够了，如果选择20gb就将虚拟磁盘存为单个文件比较方便，这样也会提高访问的速度。 然后一直点下一步就好了 安装好的虚拟机就是这样 选择开启虚拟机试试吧 当然初次开机的时候，屏幕会非常小，分辨率还无法调节这个时候我们来安装虚拟机必备软件vmware tools来对虚拟机实现优化]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>虚拟机linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人搭建aria2下载平台]]></title>
    <url>%2F2018%2F03%2F04%2Fe6-90-ad-e5-bb-baaria-e6-9c-ac-e5-9c-b0-e6-9c-8d-e5-8a-a1-e5-99-a8%2F</url>
    <content type="text"><![CDATA[aria2属于一种新的下载方式，之前linux系统上使用较多，所以基本操作都是使用命令行，本软件自带配置文件和图形界面。目前国内最大的假药广告平台的百度网盘已经屏蔽了大部分的可提取外链下载的脚本，可以另外抓取百度网盘的链接但是下载多了会直接封号。某雷目前也差不多不充会员基本旧的资源无法获取速度，冲了会员也只是可以高速下载储存在迅雷云端的数据，旧到渣的资源也很难下载。 于是我们有了新一代的下载工具，aria2。搭配远程服务器，配合aria2可以利用本地加速和网络远程加速下载的多线程下载方式，支持b t 、http、ftp，magnet协议 本文不提供原理，不提供远程搭建服务器，由于aria2不是个软件而是通过建立本地环境直接用命令行下载链接的，这里提供aria2的gui界面封包软件。 ok以下附下载地址和github源码 windows 64位 百度网盘 https://pan.baidu.com/s/1sliAhjRgithub源码 https://persepolisdm.github.io/更新：号称最好看的图像界面ariaNg已经下载，搭建环境和服务器另找时间测试 2018 3.3更新:百度api重新开放，使用油猴插件可以直接提取大文件直链下载，或者使用第三方yundownload内置的提取直链api进行下载，可能会封号一次下载不要贪多]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>下载</tag>
        <tag>aria2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[P站画师id分享]]></title>
    <url>%2F2018%2F03%2F04%2Fpixivid1%2F</url>
    <content type="text"><![CDATA[id=1113943 id=15231158 id=1710950 id=3302692 id=5155946]]></content>
      <categories>
        <category>ACG下载</category>
        <category>资源下载</category>
      </categories>
      <tags>
        <tag>pixiv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[信号与系统英文第二版（奥本海默）]]></title>
    <url>%2F2018%2F03%2F03%2Fsingalandsystems%2F</url>
    <content type="text"><![CDATA[下载地址链接：https://pan.baidu.com/s/1c3koRDm 密码：S30s 云端硬盘下载地址：https://drive.google.com/open?id=11c6X-7oYe1AqTpyAqcCANPaY3G_koCLW]]></content>
      <categories>
        <category>资源下载</category>
      </categories>
      <tags>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[奈何今夜风雨交加，何人识得吾等凡心]]></title>
    <url>%2F2018%2F02%2F28%2Fe5-a5-88-e4-bd-95-e4-bb-8a-e5-a4-9c-e9-a3-8e-e9-9b-a8-e4-ba-a4-e5-8a-a0-ef-bc-8c-e4-bd-95-e4-ba-ba-e8-af-86-e5-be-97-e5-90-be-e7-ad-89-e5-87-a1-e5-bf-83%2F</url>
    <content type="text"><![CDATA[难道上帝不爱我了吗？ 他何时爱过我？ 你难道不能救下你深受折磨的信徒？ 若有上帝，事皆可为 到最后还是得靠自己！]]></content>
      <categories>
        <category>吐槽</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[插画收集支持百度外链下载]]></title>
    <url>%2F2018%2F02%2F27%2Fbaiducollection%2F</url>
    <content type="text"><![CDATA[时隔三月，还是无法忘怀崩崩崩。。。 插画集1下载地址 https://pan.baidu.com/s/1c2UFBry 密码fs38]]></content>
      <categories>
        <category>资源下载</category>
      </categories>
      <tags>
        <tag>pixiv</tag>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ios的ssr客户端配置文件分享]]></title>
    <url>%2F2018%2F02%2F27%2Fios-e7-9a-84ssr-e5-ae-a2-e6-88-b7-e7-ab-af-e9-85-8d-e7-bd-ae-e6-96-87-e4-bb-b6-e5-88-86-e4-ba-ab%2F</url>
    <content type="text"><![CDATA[配置文件 https://drive.google.com/open?id=1HtH2r5m0nzmdxIik121XmsOEnvcZQ0e3使用方法，下载后放在自己icloud里，进入ssr客户端选择从icloud导入配置文件即可 提供多种代理模式文件原作者地址 等我有空补]]></content>
      <categories>
        <category>资源下载</category>
      </categories>
      <tags>
        <tag>下载</tag>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[选择一个合适的网盘服务]]></title>
    <url>%2F2018%2F02%2F27%2Fe5-a6-82-e4-bd-95-e9-80-89-e6-8b-a9-e4-b8-80-e4-b8-aa-e5-90-88-e9-80-82-e7-9a-84-e7-bd-91-e7-9b-98-e6-9c-8d-e5-8a-a1%2F</url>
    <content type="text"><![CDATA[如何选择一个合适的网盘如何定义一个网盘​ 作为网络存储工具，网盘起着十分重要的作用，不仅是上传下载自己的文件还可以下载别人分享的文件，合格的网盘还起着更加重要的作用那就是同步服务。​ 同步服务让使用者可以通过各种软件内置的api调用网盘云服务更加方便的使用网盘，比如微软的one drive集成在其产品里面，任何时候都可以直接调用访问其内部的文件，甚至同步你的数据到one drive空间里。​ 在ios上苹果做到了将icloud集成到各app里面让同步更加方便。 ​ 接下来介绍几款使用最多方便的云盘服务 1:国内坚果云 作为专为同步而生的云服务，坚果云提供了web dav接口让支持webdav的软件都可以通过授权连接到坚果云，免费账户提供每月1g上传流量和3g下载流量，支持文件坂本查看，但是外链分享免费用户只支持分享给坚果云账户，目前主流软件内都支持webdav调用作为国内云盘其速度访问绝对是优势。 2，国内百度网盘 说它是个云盘不如说它是个云端硬盘，大部分用它的人都是用来分享资源的，存东西确实不靠谱。认证即得2t空间，支持外链分享和离线下载，分享文件最佳选择，分享大文件还是得靠vip才会使下载速度不那么尴尬。百度网盘不支持授权调用，所以应用内部是不能绑定直接访问里面文件的，只能从官方app查看。 3，国内腾讯云 企鹅出品，必属emmm 4，国外maga网盘 界面友好，国内直连，之前用过一段时间体验不错，就是下载文件一次不能太多，我有次下了1000个直接客户端崩溃了。免费用户提供50g空间，可以外链分享速度还行，值得一提的是maga的创始人14年因为原公司破产自己投资建的maga网盘，运营了四年这个东西谁说的准！ 5，国外one drive 巨硬出品，必属精品，配合自己office使用简直不能太爽。支持外链分享，免费用户5g空间，但是国内访问不时抽风，连接不是很稳定 6，Google drive 谷歌的存储空间，集成在主流app内使用很方便，支持外链，免费空间15g。但是目前被墙，国内使用不便，搭配其Google文档服务在线编辑很方便 7，dropbox 著名服务商dropbox的网盘服务，基本大部分软件都内置dropbox授权调用，十分方便，同步服务最好的云盘，几乎所有备份软件都支持dropbox。国内软件支持就比较少了，免费用户1.5g空间完成任务扩至18g，支持外链和共享平台，文件增量上传。目前被墙，使用需改dns或系统host文件 8，mediafire 使用过一段时间，额莫名其妙就不能下载文件了，免费用户10g空间，支持外链速度很慢，不推荐，貌似只能用来分享资源 9，pcloud 来自保加利亚的网盘（让我想起了妖王），免费用户10g空间，国内直连速度很快，支持外链，还支持离线下载磁力链接！（然而很难成功下载），小众app仅供分享资源。 10，sugar 好看的蜂鸟图标，玄学的访问速度，免费10g空间，国内不能直连，很慢很慢！除了好看 没有免费好用的服务，使用总得付出点代价，用起来方便就是好的服务]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[奇怪的东西]]></title>
    <url>%2F2018%2F02%2F26%2Fe5-a5-87-e6-80-aa-e7-9a-84-e4-b8-9c-e8-a5-bf%2F</url>
    <content type="text"><![CDATA[如果脑子里突然出现一些奇怪的东西怎么办？ 当然是写下来了]]></content>
      <categories>
        <category>奇怪的东西</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[win上使用ss&ssr的全解]]></title>
    <url>%2F2018%2F02%2F25%2Fwinndowssr%2F</url>
    <content type="text"><![CDATA[因为政策本文不再更新第一步：下载win版的shadowsocksr软件解压缩后放在目录下打开 你会看见这些 选择4.0版的exe软件打开会发现桌面的右下任务栏出现一个小飞机 这是一个代表自由的小飞机（滑稽） 然后点开进入界面 这就是软件的主界面，点左边的添加，添加线路，从这里输入服务器信息和加密协议，也可以将自己的ssr链接复制，直接右键点击任务栏的小飞机图标选择从剪切板导入ssr链接。 关于ssr的服务商，自己寻找免费线路或者购买线路，不建议分享他人，不建议进行宣传，本来就是边缘的东西。 要注意的是添加ssr的时候混淆协议和参数不要填错，否则无法连接服务器 在配置好线路后点击确定，小飞机启动，右键小飞机图标出现如下界面 点击系统代理模式 软件内置了pac的规则，一共有三种规则：直连，pac和全局代理。直连即不经过代理直接连接网络，pac规则内部有事先写好的绕过中国大陆主要网站（只有pac里规定的使用代理的ip才会开启代理），全局代理所有流量经过服务器，打开国内网络可能很慢并且费流量。 压缩包里自带了pac文件不需要配置，选择pac模式可以保证网站的正常访问，其他地方不建议更改。 现在可以进行代理访问网络 需要注意的一点，非常重要的一点！电脑上不要有杀毒软件比如360，电脑管家，他们的后台监控会主动上传ip地址，可能造成一段时间后ssr的服务器ip被墙。如果有不要打开，尊重线路的创建者最好不要打开这些软件后台运行。 第二步：配置浏览器部分浏览器貌似不需要配置就会使用系统代理，以chrome浏览器内核开发的需要使用额外插件。 以chrome为例： 打开chrome进入插件页面（扩展程序） 勾选开发者模式，将所提供的代理插件拖到这个页面安装后启用 左边的导入\导出，点击进入，选择从备份中恢复 导入所提供的配置文件，然后退出，这是chrome右上方的插件会出现一个圈 单击出现选项，选择系统代理 ：）浏览器的代理上网就配置好了 说明：在ssr的压缩包内提供了chrome的代理插件，安装后新建代理模式选择系统代理即可。 最后提供下载链接（部分需科学上网）win版ssr下载地址：github地址https://github.com/shadowsocksrr/shadowsocksr-csharp/releases/tag/4.8.0win版V2ray下载地址：https://pan.baidu.com/s/1dLjwt1HCpoO3-RILvfKaPQ 云端硬盘 https://drive.google.com/open?id=10reY1wA0CcJc4B2CQEqCzVc0CU_rBzlhchrome插件：https://drive.google.com/open?id=106Pw2j4AKPEM5HYdBvI1DRw_nqn5yhaochrome插件配置文件：https://drive.google.com/open?id=1HzD068xhLxLBrv4QCxv9WsBcJZD9esfY插件名称：proxyswitchyomega可自行下载 文明上网，从你我做起最后更新于2018.6.18]]></content>
      <categories>
        <category>网络技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>下载</tag>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二维码打赏]]></title>
    <url>%2F2016%2F01%2F01%2Findex_qr%2F</url>
    <content type="text"><![CDATA[请支持作者吧！]]></content>
  </entry>
  <entry>
    <title><![CDATA[感谢]]></title>
    <url>%2F2016%2F01%2F01%2Findex_thank%2F</url>
    <content type="text"><![CDATA[部分资源来自互联网，如有侵权请联系我删除 图床不稳定，如遇图片丢失不会补档 服务器位于洛杉矶所以访问速度有些缓慢博客已经交由Github Page托管 感谢Hexo提供博客页面支持，感谢Archer提供博客模板支持 感谢SSLforFree提供的SSL证书 感谢阿里云提供的域名解析支持 感谢imgchr提供的免费图床和CDN加速 本站使用Dropbox备份，由谷歌在线文档提供文档支持 如需捐赠，请点击捐赠，感谢有你！]]></content>
  </entry>
</search>
